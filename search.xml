<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[[LeetCode]171-Excel表列序号.md]]></title>
      <url>/2019/09/10/LeetCode-171-Excel%E8%A1%A8%E5%88%97%E5%BA%8F%E5%8F%B7-md/</url>
      <content type="html"><![CDATA[<h1 id="171-Excel表列序号"><a href="#171-Excel表列序号" class="headerlink" title="171-Excel表列序号"></a>171-Excel表列序号</h1><p><a href="https://leetcode-cn.com/problems/excel-sheet-column-number/" target="_blank" rel="noopener">题目内容</a></p>
<blockquote>
<p>其实这道题就是一个进制转换题，把26个字母看作26进制，只是进制从1开始到26</p>
</blockquote>
<h2 id="第一次提交"><a href="#第一次提交" class="headerlink" title="第一次提交"></a>第一次提交</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(<span class="keyword">char</span> * s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[i] != <span class="string">'\0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum * <span class="number">26</span> + s[i] - <span class="number">64</span>;             <span class="comment">//在输入最后一个测试用例的时候("FXSHRXW")首先会产生溢出，之后才会执行减去64的操作</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：999 / 1000 个通过测试用例<br>执行出错信息：Line 5: Char 24: runtime error: signed integer overflow: 2147483624 + 87 cannot be represented in type ‘int’ (solution.c)<br>最后执行的输入：”FXSHRXW”</p>
</blockquote>
<p>总结：在最后一个测试用例执行的时候，发生了int溢出，因为FXSHRXW执行到最后一个字母时，sum<em>26刚执行完还没有发生溢出，直到加上s[i]才发生溢出，所以考虑将**</em>-64移动到前面，避免溢出***</p>
<p>分析：</p>
<ol>
<li>FXSHRX执行完之后，sum取值是82595524</li>
<li>sum * 26 = 2147483624</li>
<li>sum * 26 + s[i] = 2147483624 + 87 因为此时s[i]是最后一个字母W对应的ASCII编码，发生溢出</li>
<li>故猜想把后面的-64提到前面避免溢出，最后跑了一遍可行</li>
</ol>
<h2 id="第二次提交"><a href="#第二次提交" class="headerlink" title="第二次提交"></a>第二次提交</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">titleToNumber2</span><span class="params">(<span class="keyword">char</span> * s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[i] != <span class="string">'\0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// sum = sum * 26 + s[i] - 64;</span></span><br><span class="line">        <span class="comment">// 为了防止溢出，修改加的顺序, 要把-64提到前面</span></span><br><span class="line">        sum = sum * <span class="number">26</span> - <span class="number">64</span> + s[i];</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第二次提交：成功<br>执行用时 :8 ms, 在所有 C 提交中击败了35.51%的用户<br>内存消耗 :6.7 MB, 在所有 C 提交中击败了30.43%的用户</p>
</blockquote>
<figure class="image-box">
                <img src="./2.png" alt="第二种解法" title class>
                <p>第二种解法</p>
            </figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>C 语言int 范围-2147483648 ~ 2147483647</code></p>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Job </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[吴恩达机器学习]03多变量线性回归]]></title>
      <url>/2019/09/07/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-03%E5%A4%9A%E5%8F%98%E9%87%8F%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
      <content type="html"><![CDATA[<h1 id="多变量线性回归"><a href="#多变量线性回归" class="headerlink" title="多变量线性回归"></a>多变量线性回归</h1><h2 id="一些表示"><a href="#一些表示" class="headerlink" title="一些表示"></a>一些表示</h2><p>n 表示特征数量<br>m 表示训练集样本数量<br>$$x^i 表示第i个训练样本的输入特征(向量)$$<br>$$x^i_j 表示第i个训练样本的输入特征(向量)中第j维特征的值$$</p>
<h2 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h2><blockquote>
<p>如果每个特征都处于相近的范围内，这样梯度下降法就可以更快的收敛</p>
</blockquote>
<p><strong>特征缩放最主要的就是将每个特征缩放到一个相近的范围，这样梯度下降就可以更快收敛</strong></p>
<p>目标：将每个特征的取值约束到范围-1~1(附近也可以 例如 -2~0.5, 但是-0.00001~0.00002 不可以)之间， 最大不超过-3~3 最小不超过-1/3～1/3, </p>
<h3 id="均值归一化"><a href="#均值归一化" class="headerlink" title="均值归一化"></a>均值归一化</h3><p>公式：归一化后的值 = (归一化前的值 - 归一化前的平均值 / (归一化前的最大值-归一化的最小值)）</p>
<h2 id="梯度下降算法"><a href="#梯度下降算法" class="headerlink" title="梯度下降算法"></a>梯度下降算法</h2><p>当梯度下降算法执行一定轮数之后，曲线将会趋于平缓，此时如何判断到达平缓点，不建议通过阀值来进行判断，建议绘图观看图来进行观察<br><figure class="image-box">
                <img src="./1.png" alt="损失函数随迭代次数变化图" title class>
                <p>损失函数随迭代次数变化图</p>
            </figure></p>
<p>如果得到下面这种图像，说明梯度没有下降反而上升，此时我们可以降低学习率，(因为学习率太大会导致直接越过局部最小点而上升到较高点)</p>
<figure class="image-box">
                <img src="./2.png" alt="代价函数随迭代次数变化图" title class>
                <p>代价函数随迭代次数变化图</p>
            </figure>
<p><strong>注意：数学家已经证明，学习率很小的时候，代价函数会一直下降，所以如果遇到代价函数上涨，要降低学习率。但是也不能太小，太小将会移动很缓慢</strong></p>
<h2 id="特征和多项式回归"><a href="#特征和多项式回归" class="headerlink" title="特征和多项式回归"></a>特征和多项式回归</h2><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p>在某些情况下，我们不一定要使用给出的变量来作为特征，而是自己可以创造特征</p>
<h3 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h3><blockquote>
<p>在某些情况下，我们使用最简单的线性回归并不能取得很好的拟合效果，此时我们可以深入一步，使用多项式回归尝试。</p>
</blockquote>
<p>例如，在一组数据中，给了临街宽度和房子的深度 以及房价，用来构建模型预测房价</p>
<p>在这个例子中，我们可以构建一个新特征(房子面积=临街宽度*房子深度), 采用新特征来预测房价，画图如下<br><figure class="image-box">
                <img src="./3.png" alt="3.png" title class>
                <p>3.png</p>
            </figure></p>
<p>此时，对于图像我们可以考虑采用二次函数构建，但是随着面积增大，房价趋于平缓，因此不建议使用二次函数构建；也可以采用三次函数，或在线性回归函数后面加上一个平方根项</p>
<p>当我们采用三次函数时，将会转换为$$h_Θ(x) = Θ_0 + Θ_1 x + Θ_2 x^2 + Θ_3 x^3$$</p>
<p>此时我们可以构建三个特征，分别是房子面积，面积的平方，面积的立方</p>
<a id="more"></a>
<h2 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h2><blockquote>
<p>对于方程中只有一个变量而言，求导然后令其为0， 直接求解<br>对于方程中有多个变量，可以求偏导令其为0，求解方程组</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
            <category> 第一阶段 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ML </tag>
            
            <tag> 吴恩达 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[吴恩达机器学习]02单变量线性回归.md]]></title>
      <url>/2019/09/05/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02%E5%8D%95%E5%8F%98%E9%87%8F%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-md/</url>
      <content type="html"><![CDATA[<h1 id="单变量线性回归"><a href="#单变量线性回归" class="headerlink" title="单变量线性回归"></a>单变量线性回归</h1><h2 id="模型描述"><a href="#模型描述" class="headerlink" title="模型描述"></a>模型描述</h2><h3 id="课程用到的一些符号说明"><a href="#课程用到的一些符号说明" class="headerlink" title="课程用到的一些符号说明"></a>课程用到的一些符号说明</h3><ul>
<li>m = 训练集的样本数量</li>
<li>x = 输入变量 （或特征）</li>
<li>y = 输出变量 (预测的值)</li>
<li>(x , y) 表示一个训练样本</li>
<li>$$(x_i, y_i)表示第i个训练样本$$ </li>
</ul>
<p><img src="2单变量线性回归.png" alt="单变量线性回归.png"></p>
<blockquote>
<p>一般可以表示为$$h(x) = c_1 * x + c_2$$</p>
</blockquote>
<h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p>在线性回归预测中，我们希望获得两个理想的参数$$c_1和c_2$$使得我们预测的结果h与实际的结果y的差值越小越好。这里我们引入了代价函数$$\sum_{i=1}^m{(h-y)^2} ，$$ 也就是<strong>预测值与实际值的误差平方和越小越好</strong>, 也就是<strong>最小化代价函数</strong></p>
<blockquote>
<p>代价函数也被成为平方误差函数或平方误差代价函数</p>
</blockquote>
<p>此时我们已经将问题转换为求使得代价函数$$\sum_{i=1}^m{(h-y)^2} $$最小的两个理想参数$$c_1和c_2$$， 我们可以把其看作线性回归的整体目标函数。</p>
<p>为了更直观理解，吴恩达老师将其代价函数简化为如下图中描述(即在求和的基础上除以2m)</p>
<figure class="image-box">
                <img src="02代价函数.png" alt="02代价函数.png" title class>
                <p>02代价函数.png</p>
            </figure>
<figure class="image-box">
                <img src="02代价函数2.png" alt="02代价函数2.png" title class>
                <p>02代价函数2.png</p>
            </figure>
<p>也有其他评估线性回归的代价函数，但是平方误差和是我们最常见的一个评估手段。</p>
<h2 id="梯度下降法-Gradient-Descent-Algorithm"><a href="#梯度下降法-Gradient-Descent-Algorithm" class="headerlink" title="梯度下降法(Gradient Descent Algorithm)"></a>梯度下降法(Gradient Descent Algorithm)</h2><blockquote>
<p>梯度下降法可以将代价函数最小化，不仅可以用来最小化代价函数，而且可以最小化其他函数，并且应用领域十分广泛</p>
</blockquote>
<p>梯度下降的思路：</p>
<ol>
<li>给要确定值的所有参数一个初始值(通常我们都把他们初始化为0)</li>
<li>不停的改变所有参数来减小代价函数的值直到找到了代价函数的最小值</li>
</ol>
<blockquote>
<p>计算注意事项：所有参数必须做到同时更新，不可以更新后赋值。梯度下降必须做到所有参数的同时更新。</p>
</blockquote>
<figure class="image-box">
                <img src="梯度下降公式以及注意事项.png" alt="梯度下降公式以及注意事项" title class>
                <p>梯度下降公式以及注意事项</p>
            </figure>
<p>其中α称为学习率，也就是决定梯度下降走路的步伐，控制我们以多大的速度更新参数$$Θ_j,第二部分是导数项，</p>
<p>吴恩达老师提出的问题：对于J(Θ_1),如果Θ_1已经处于一个局部最优点，那么下一步梯度下降会怎样？$$</p>
<blockquote>
<p>$$因为已经处于局部最优点，此时导数为0，所以Θ_1将不会再改变，也就是Θ_1就是原来的Θ_1，将会使我们的解一直保持在局部最优解中$$</p>
</blockquote>
<figure class="image-box">
                <img src="梯度下降2.png" alt="梯度下降一些问题" title class>
                <p>梯度下降一些问题</p>
            </figure>
<p>注意：随着梯度下降算法的运行，后面的步骤中，导数将会变得越来越小，使得梯度下降越来越慢，因此没必要在后面的步骤中减小学习率</p>
<h2 id="梯度下降与代价函数结合–线性回归"><a href="#梯度下降与代价函数结合–线性回归" class="headerlink" title="梯度下降与代价函数结合–线性回归"></a>梯度下降与代价函数结合–线性回归</h2><figure class="image-box">
                <img src="线性回归总结.png" alt="线性回归总结" title class>
                <p>线性回归总结</p>
            </figure>
<p>Batch梯度下降法，表示每一步梯度下降，我们都遍历了整个训练集，其实在数学中可以通过方程组求出最小代价函数的参数，但是对于大规模数据集，梯度下降比较实用</p>
<p><img src="梯度下降推导公式1.png" alt="梯度下降公式1"><br><figure class="image-box">
                <img src="梯度下降推导公式2.png" alt="梯度下降公式2" title class>
                <p>梯度下降公式2</p>
            </figure></p>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
            <category> 第一阶段 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ML </tag>
            
            <tag> 吴恩达 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[吴恩达机器学习]01机器学习入门.md]]></title>
      <url>/2019/09/05/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8-md/</url>
      <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>机器学习：在没有明确设置的情况下，使计算机具有学习能力的研究领域。（也可以定义为计算机程序从经验E中学习，解决某一任务T，进行某一性能度量P，通过P测定在T上的表现因经验E而提高）</li>
<li>监督学习：我们给算法一个数据集，其中包括正确答案。即对于数据集中的每个样本，我们都给出了正确的答案，最终我们希望算法可以预测给定的数据，并给出正确的预测结果</li>
<li>无监督学习：Unsupervised learning allows us to approach problems with little or no idea what our results<br>should look like. We can derive structure from data where we don’t necessarily know the<br>effect of the variables.</li>
<li>回归：预测连续的数值输出，例如预测房价</li>
<li>分类：设法预测一个离散的输出(预测的结果范围不止两种，可能有更多种)，也就是类似于预测0或1<a id="more"></a>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
            <category> 第一阶段 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ML </tag>
            
            <tag> 吴恩达 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[老男孩教育s14-数据分析部分-numpy基础教程[1]]]></title>
      <url>/2019/06/23/%E8%80%81%E7%94%B7%E5%AD%A9%E6%95%99%E8%82%B2s14-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E9%83%A8%E5%88%86-numpy%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B-1/</url>
      <content type="html"><![CDATA[<h2 id="numpy-数组"><a href="#numpy-数组" class="headerlink" title="numpy 数组"></a>numpy 数组</h2><h3 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h3><p>第一种方式：通过列表创建<br>第二种方式：通过部分函数进行numpy的创建，例如np.ones(), np.zeros()</p>
<blockquote>
<p>一维数组的创建</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>二维数组的创建<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])          <span class="comment"># 每个元素都为整形</span></span><br><span class="line">np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4.0</span>, <span class="number">5</span>, <span class="number">6</span>]])        <span class="comment"># 每个元素都会转换为float</span></span><br><span class="line">np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4.0</span>, <span class="string">'a'</span>, <span class="number">6</span>]])      <span class="comment"># 每个元素都会转换为一个字符串</span></span><br><span class="line">np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4.0</span>, <span class="string">'a'</span>]])         <span class="comment"># 每行将会对应一个list 的 object</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">np.ones(img_arr.shape)</span><br><span class="line">np.full((<span class="number">1</span>, <span class="number">10</span>), fill_value=<span class="number">100</span>)</span><br><span class="line">np.linspace(<span class="number">1</span>, <span class="number">21</span>, <span class="number">21</span>)  <span class="comment"># 从1到21开始，进行21等分(等分的时候包括两个端点)</span></span><br><span class="line">np.arange(<span class="number">0</span>, <span class="number">100</span>, step=<span class="number">2</span>) <span class="comment"># 从0开始到100，步伐为2，将会得到0,2,4,...98</span></span><br><span class="line">np.random.randint(<span class="number">0</span>, <span class="number">100</span>, size=(<span class="number">5</span>, <span class="number">10</span>)) <span class="comment"># 产生5行10列的二维数组，每个元素都是0到100之间的随机数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 固定时间种子，产生的随机数就固定下来了</span></span><br><span class="line">np.random.seed(<span class="number">123</span>)</span><br><span class="line">np.random.randint(<span class="number">0</span>, <span class="number">100</span>, (<span class="number">2</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正态分布</span></span><br><span class="line">np.random.randn(<span class="number">4</span>, <span class="number">5</span>) <span class="comment"># 返回一个4行5列的基于正态分布的数组</span></span><br><span class="line"><span class="comment"># rand方法会产生0-1的随机数，左闭右开</span></span><br><span class="line">np.random.rand((<span class="number">3</span>, <span class="number">4</span>)) <span class="comment"># 生成一个3行4列的数组，</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>注意：</p>
<ul>
<li>numpy 默认 ndarray 的所有元素类型相同</li>
<li>如果传进来的列表包含不同类型，则统一类型，优先级 str &gt; float &gt; int</li>
<li>产生随机数时，如果希望产生的随机数一直保持不变，可以定义一个随机数种子来确保随机数保持不变</li>
</ul>
</blockquote>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>ndim 返回ndarray的维度<br>shape 返回ndarray的形状<br>dtype 返回ndarray的类型<br>size 返回总长度</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.dtype</span><br><span class="line">arr.ndim</span><br><span class="line">arr.size</span><br><span class="line">arr.shape</span><br></pre></td></tr></table></figure>
<h3 id="数组的索引"><a href="#数组的索引" class="headerlink" title="数组的索引"></a>数组的索引</h3><blockquote>
<p>使用数组的索引</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">array([[-0.37195736, -0.97033029, -0.80038168, -0.4547916 ],</span></span><br><span class="line"><span class="string">       [-1.69906423,  1.63460351,  1.        ,  1.90131093],</span></span><br><span class="line"><span class="string">       [ 1.47817555, -1.09057493,  1.28130256,  0.78534857]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 使用索引修改数组内容</span></span><br><span class="line">arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">arr[<span class="number">1</span>, <span class="number">2</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="数组的切片"><a href="#数组的切片" class="headerlink" title="数组的切片"></a>数组的切片</h3><blockquote>
<p>数组倒序采用[::-1]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line">arr = np.random.randint(<span class="number">60</span>, <span class="number">120</span>, size=(<span class="number">6</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>获取数组前2行：arr[:2]<br>获取数组前2列：arr[:,:2]<br>获取数组前2行和前2列：arr[0:2, 0:2]<br>将数组的行倒序换成最后一行 arr[::-1]<br>将数组列倒序 arr[, ::-1]</p>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.imread() <span class="comment"># 读取指定图片的内容,返回一个多维数组</span></span><br><span class="line">plt.imshow() <span class="comment"># 将返回的多维数组渲染成一个图片</span></span><br><span class="line">im_arr.shape <span class="comment"># 获得ndarray的形状, 返回一个元祖类型</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据分析 </category>
            
            <category> numpy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 老男孩全栈s14 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[版本管理工具-Git篇[3]]]></title>
      <url>/2019/06/22/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-Git%E7%AF%87%5B3%5D/</url>
      <content type="html"><![CDATA[<figure class="image-box">
                <img src="git三棵树.png" alt="git三棵树" title class>
                <p>git三棵树</p>
            </figure>
<h2 id="git-reset-命令"><a href="#git-reset-命令" class="headerlink" title="git reset 命令"></a>git reset 命令</h2><blockquote>
<p>git reset 默认是 git reset –mixed</p>
<ul>
<li>移动HEAD的指向，将其指向上一个快照，</li>
<li><strong>将HEAD移动后指向的快照回滚到暂存区域</strong><br>git reset –soft HEAD~</li>
<li>移动HEAD的指向，将其指向上一个快照,<br>git reset –hard HEAD~</li>
<li>移动HEAD的指向，将其指向上一个快照</li>
<li><strong>将HEAD移动后指向的快照回滚到暂存区域</strong></li>
<li>将暂存区域的文件还原到工作目录(<strong>会覆盖掉工作目录的文件，需要注意</strong>)</li>
</ul>
</blockquote>
<p>回滚指定快照：<br>git reset 快照ID号   – 回滚到指定的快照<br>回滚个别文件：<br>git reset 版本快照 文件名/路径  – HEAD指针将不会移动</p>
<p>reset 命令回滚快照三部曲<br>移动HEAD的指向   <strong>–soft</strong><br>移动HEAD的指向，并将快照回滚到暂存区  <strong>–mixed</strong><br>移动HEAD的指向，并将快照回滚到暂存区，同时将暂存区还原到工作目录  <strong>–hard</strong></p>
<p>git reset HEAD~        – 回滚到上一次提交的快照<br>git reset HEAD~~       – 回滚到上上次提交的快照<br>git reset HEAD~10      – 回滚到前10次提交时的快照</p>
<h2 id="关于分支的操作"><a href="#关于分支的操作" class="headerlink" title="关于分支的操作"></a>关于分支的操作</h2><p>git branch 分支名       – 创建分支<br>git checkout 分支名     – 切换分支</p>
<p>git checkout -b 分支名  – 创建并切换分支<br>git merge 分支名        – 合并分支名与master分支<br>git branch -d 分支名    – 删除分支</p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
            <category> 入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> GitHub </tag>
            
            <tag> 版本管理工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GitHub+Hexo+Appveyor 保存博客源代码并自动部署]]></title>
      <url>/2019/06/16/GitHub-Hexo-Appveyor-%E4%BF%9D%E5%AD%98%E5%8D%9A%E5%AE%A2%E6%BA%90%E4%BB%A3%E7%A0%81%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/db9a95078b16" target="_blank" rel="noopener">参考</a><br><a href="https://formulahendry.github.io/2016/12/04/hexo-ci/" target="_blank" rel="noopener">参考2</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h3><p>其实自己之前就有换过电脑的经历，每次换电脑之后都需要重新安装开发环境，博客之前的文章用u盘拷贝过来，很是担心u盘丢失之后自己的学习记录无法保存，于是网上看到了使用Appveyor对博客进行自动部署，在自动部署的过程中，源代码也会自动托管到github的一个存放源代码的仓库中，我们在源代码仓库发生的变动appveyor将会自动对变动进行重新渲染到我们博客(<del>不是源代码对应的仓库哦</del>)存放的目录，不仅仅保存了博客的源代码，还可以自动部署！</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>步骤如下：</p>
<ol>
<li>appveyor 添加项目</li>
<li>在自己的项目本地文件中<strong>添加appveyor.yml配置文件</strong>，同时配置<strong>密钥</strong></li>
<li>在appveyor中配置项目的环境变量</li>
<li>将变动push到对应的github的仓库中，appveyor探查到仓库变动之后，将会自动渲染并部署变动到STATIC_SITE_REPO 指定的仓库中</li>
</ol>
<h2 id="设置AppVeyor"><a href="#设置AppVeyor" class="headerlink" title="设置AppVeyor"></a>设置AppVeyor</h2><blockquote>
<p>添加好appveyor.yml之后，再到Appveyor portal设置以下四个变量。STATIC_SITE_REPO就是Content Repo的地址，TARGET_BRANCH就是你Content Repo的branch，一般默认就是master，GIT_USER_EMAIL和GIT_USER_NAME就是你GitHub账号的信息。</p>
</blockquote>
<p>STATIC_SITE_REPO ： 就是hexo渲染后存放的仓库。一般都是username.github.io<br>TARGET_BRANCH: 就是存放源代码的仓库的分支。默认是master<br>GIT_USER_EMAIL: GitHub的邮箱地址<br>GIT_USER_NAME: GitHub的用户名</p>
<h2 id="appveyor-yml配置文件"><a href="#appveyor-yml配置文件" class="headerlink" title="appveyor.yml配置文件"></a>appveyor.yml配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">clone_depth: 5</span><br><span class="line"></span><br><span class="line">environment:</span><br><span class="line">  access_token:</span><br><span class="line">    secure: 7AzX+wI/I7gTU6LmboXo1zyCb7Qw+1IGwUUrFW31ayFsTlvN/aVh+k8FWWI1PlNB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">  - node --version</span><br><span class="line">  - npm --version</span><br><span class="line">  - npm install</span><br><span class="line">  - npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">build_script:</span><br><span class="line">  - hexo generate</span><br><span class="line"></span><br><span class="line">artifacts:</span><br><span class="line">  - path: public</span><br><span class="line"></span><br><span class="line">on_success:</span><br><span class="line">  - git config --global credential.helper store</span><br><span class="line">  - ps: Add-Content &quot;$env:USERPROFILE\.git-credentials&quot; &quot;https://$($env:access_token):x-oauth-basic@github.com`n&quot;</span><br><span class="line">  - git config --global user.email &quot;%GIT_USER_EMAIL%&quot;</span><br><span class="line">  - git config --global user.name &quot;%GIT_USER_NAME%&quot;</span><br><span class="line">  - git clone --depth 5 -q --branch=%TARGET_BRANCH% %STATIC_SITE_REPO% %TEMP%\static-site</span><br><span class="line">  - cd %TEMP%\static-site</span><br><span class="line">  - del * /f /q</span><br><span class="line">  - for /d %%p IN (*) do rmdir &quot;%%p&quot; /s /q</span><br><span class="line">  - SETLOCAL EnableDelayedExpansion &amp; robocopy &quot;%APPVEYOR_BUILD_FOLDER%\public&quot; &quot;%TEMP%\static-site&quot; /e &amp; IF !ERRORLEVEL! EQU 1 (exit 0) ELSE (IF !ERRORLEVEL! EQU 3 (exit 0) ELSE (exit 1))</span><br><span class="line">  - git add -A</span><br><span class="line">  - if &quot;%APPVEYOR_REPO_BRANCH%&quot;==&quot;master&quot; if not defined APPVEYOR_PULL_REQUEST_NUMBER (git diff --quiet --exit-code --cached || git commit -m &quot;Update Static Site&quot; &amp;&amp; git push origin %TARGET_BRANCH% &amp;&amp; appveyor AddMessage &quot;Static Site Updated&quot;)</span><br></pre></td></tr></table></figure>
<p><strong>注意把自己的secure对应的密钥换成自己的密钥</strong></p>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> 自动部署 </category>
            
            <category> Hexo博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CI </tag>
            
            <tag> Hexo </tag>
            
            <tag> 自动部署 </tag>
            
            <tag> Appveyor </tag>
            
            <tag> 博客源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MLA-03-决策树初探]]></title>
      <url>/2019/06/10/MLA-03-%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<h2 id="决策树背景知识了解"><a href="#决策树背景知识了解" class="headerlink" title="决策树背景知识了解"></a>决策树背景知识了解</h2><blockquote>
<p>引用机器学习实战书上：”决策树的一个重要任务是为了数据中所蕴含的知识信息”</p>
</blockquote>
<h3 id="决策树的一般流程"><a href="#决策树的一般流程" class="headerlink" title="决策树的一般流程"></a>决策树的一般流程</h3><ol>
<li>收集数据：可以使用任何方法</li>
<li>准备数据：树构造算法只适用于标称型数据，因此数值型数据必须离散化</li>
<li>分析数据：可以使用任何方法，构造树完成之后，应该检查图形是否符合预期</li>
<li>训练算法：构造树的数据结构</li>
<li>测试算法：使用经验树计算错误概率</li>
<li>使用算法：此步骤可以适用于任何监督学习算法，而使用决策树可以更好的理解数据的内在含义</li>
</ol>
]]></content>
      
        <categories>
            
            <category> ML </category>
            
            <category> 决策树 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ML </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> 决策树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[MLA-02]k-近邻算法初探]]></title>
      <url>/2019/06/10/MLA-02-k-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="归一化特征值"><a href="#归一化特征值" class="headerlink" title="归一化特征值"></a>归一化特征值</h3><blockquote>
<p>有时候以为不同特征值的取值范围差距很大，在我们使用K近邻算法计算距离的时候，取值范围差距大的特征值将会对k近邻算法计算出的结果造成很大的影响，因此我们需要对所有特征值进行归一化</p>
</blockquote>
<p><strong>机器学习实战一书中给出归一化的公式： newValue = (oldValue - min) / (max - min)</strong></p>
<p>其中 min 和 max 分别是数据集中该特征值对应的最小值和最大值</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="k近邻算法改进约会网站"><a href="#k近邻算法改进约会网站" class="headerlink" title="k近邻算法改进约会网站"></a>k近邻算法改进约会网站</h3><p>事例来自于机器学习实战一书的2.2，</p>
<p>步骤如下：</p>
<ol>
<li>收集数据</li>
<li>准备数据：对数据进行处理(包括上面提到的归一化处理)</li>
<li>分析数据：使用matplotlib画图</li>
<li>训练算法：此步骤不适用于k近邻算法</li>
<li>测试算法：使用测试数据进行测试</li>
<li>使用算法</li>
</ol>
<p>测试样本和非测试样本的区别在于：测试样本是已经分类完成的数据，如果预测分类与实际分类不同，则标记为一个错误</p>
<p>数据集解释：</p>
<ol>
<li>每行数据代表1个顾客，其中有4列，分别对应 每年获得的飞行常客里程数， 玩视频游戏所耗时间百分比， 每周消费的冰激淋公升数， 最终的分类</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file2matrix</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将文本记录转换为Numpy的解析程序</span></span><br><span class="line"><span class="string">    :param filename:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    fr = open(filename)</span><br><span class="line">    arrayOlines = fr.readlines()</span><br><span class="line">    numberOfLines = len(arrayOlines)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 得到文件行数</span></span><br><span class="line">    returnMat = zeros((numberOfLines, <span class="number">3</span>))</span><br><span class="line">    classLabelVector = []</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以下三行用于解析文件到数据列表</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> arrayOlines:</span><br><span class="line">        line = line.strip()</span><br><span class="line">        listFromLine = line.split(<span class="string">'\t'</span>)</span><br><span class="line">        returnMat[index, :] = listFromLine[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">        classLabelVector.append(int(listFromLine[<span class="number">-1</span>]))</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> returnMat, classLabelVector</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> matplotlib</span><br><span class="line">    <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    datingDataMat, datingLabels = file2matrix(<span class="string">'data/datingTestSet2.txt'</span>)</span><br><span class="line">    <span class="comment"># ax.scatter(datingDataMat[:, 1], datingDataMat[:, 2])</span></span><br><span class="line">    ax.scatter(datingDataMat[:, <span class="number">1</span>], datingDataMat[:, <span class="number">2</span>], <span class="number">15.0</span>*array(datingLabels), <span class="number">15.0</span>*array(datingLabels))</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">autoNorm</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">    <span class="comment"># 传入一个0表示按照列取最小值</span></span><br><span class="line">    minVals = dataSet.min(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 传入一个0表示按照列取最大值</span></span><br><span class="line">    maxVals = dataSet.max(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    ranges = maxVals - minVals</span><br><span class="line">    normDataSet = zeros(shape(dataSet))</span><br><span class="line">    m = dataSet.shape[<span class="number">0</span>]</span><br><span class="line">    normDataSet = dataSet - tile(minVals, (m, <span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 特征值相除</span></span><br><span class="line">    normDataSet = normDataSet / tile(ranges, (m, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Numpy中矩阵除法需要使用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> normDataSet, ranges, minVals</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(inX, dataSet, labels, k)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    k近邻算法的实现</span></span><br><span class="line"><span class="string">    :param inX: 输入向量</span></span><br><span class="line"><span class="string">    :param dataSet: 输入的训练样本集</span></span><br><span class="line"><span class="string">    :param labels:  标签向量</span></span><br><span class="line"><span class="string">    :param k:   选择最近邻居的数目</span></span><br><span class="line"><span class="string">    :return:    返回k近邻算法执行后分类的结果</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    dataSetSize = dataSet.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行距离计算</span></span><br><span class="line">    <span class="comment">## 将其扩展为与标签个数相同的输入数据的矩阵，执行矩阵减操作时，直接对每个对应的元素互相减去</span></span><br><span class="line">    diffMat = tile(inX, (dataSetSize, <span class="number">1</span>)) - dataSet</span><br><span class="line">    sqDiffMat = diffMat ** <span class="number">2</span></span><br><span class="line">    sqDistances = sqDiffMat.sum(axis=<span class="number">1</span>)</span><br><span class="line">    distances = sqDistances ** <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行统计</span></span><br><span class="line">    sortedDistIndicies = distances.argsort()</span><br><span class="line">    classCount = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择距离最小的k个点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        votellabel = labels[sortedDistIndicies[i]]</span><br><span class="line">        classCount[votellabel] = classCount.get(votellabel, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">datingClassTest</span><span class="params">()</span>:</span></span><br><span class="line">    hoRatio = <span class="number">0.10</span></span><br><span class="line">    datingDataMat, datingLabels = file2matrix(<span class="string">'data/datingTestSet2.txt'</span>)</span><br><span class="line">    normMat, ranges, minVals = autoNorm(datingDataMat)</span><br><span class="line">    m = normMat.shape[<span class="number">0</span>]</span><br><span class="line">    numTestVecs = int(m * hoRatio)</span><br><span class="line">    errorCount = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numTestVecs):</span><br><span class="line">        classifierResult = classify(normMat[i, :], normMat[numTestVecs:m, :], datingLabels[numTestVecs:m], <span class="number">3</span>)</span><br><span class="line">        print(<span class="string">"The classifier came back with: %d, the real answer is: %d"</span> % (classifierResult, datingLabels[i]))</span><br><span class="line">        <span class="keyword">if</span> (classifierResult != datingLabels[i]):</span><br><span class="line">            errorCount += <span class="number">1.0</span></span><br><span class="line">    print(<span class="string">"The total error rate is %f:"</span> % (errorCount / float(numTestVecs)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    datingClassTest()</span><br></pre></td></tr></table></figure>
<h3 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h3><blockquote>
<p>数据集是每个数字对应成32*32像素的文件，</p>
</blockquote>
<p>思路：通过将每个数字对应的文件(32*32像素)转换为(1, 1024)的矩阵，并使用k近邻算法与训练集数据进行计算，选取距离最小的k个元素，并进行统计，得到最终结果。<strong>需要预先对数据进行处理</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(inX, dataSet, labels, k)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    k近邻算法的实现</span></span><br><span class="line"><span class="string">    :param inX: 输入向量</span></span><br><span class="line"><span class="string">    :param dataSet: 输入的训练样本集</span></span><br><span class="line"><span class="string">    :param labels:  标签向量</span></span><br><span class="line"><span class="string">    :param k:   选择最近邻居的数目</span></span><br><span class="line"><span class="string">    :return:    返回k近邻算法执行后分类的结果</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    dataSetSize = dataSet.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行距离计算</span></span><br><span class="line">    <span class="comment">## 将其扩展为与标签个数相同的输入数据的矩阵，执行矩阵减操作时，直接对每个对应的元素互相减去</span></span><br><span class="line">    diffMat = tile(inX, (dataSetSize, <span class="number">1</span>)) - dataSet</span><br><span class="line">    sqDiffMat = diffMat ** <span class="number">2</span></span><br><span class="line">    sqDistances = sqDiffMat.sum(axis=<span class="number">1</span>)</span><br><span class="line">    distances = sqDistances ** <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行统计</span></span><br><span class="line">    sortedDistIndicies = distances.argsort()</span><br><span class="line">    classCount = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择距离最小的k个点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        votellabel = labels[sortedDistIndicies[i]]</span><br><span class="line">        classCount[votellabel] = classCount.get(votellabel, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">datingClassTest</span><span class="params">()</span>:</span></span><br><span class="line">    hoRatio = <span class="number">0.10</span></span><br><span class="line">    datingDataMat, datingLabels = file2matrix(<span class="string">'data/datingTestSet2.txt'</span>)</span><br><span class="line">    normMat, ranges, minVals = autoNorm(datingDataMat)</span><br><span class="line">    m = normMat.shape[<span class="number">0</span>]</span><br><span class="line">    numTestVecs = int(m * hoRatio)</span><br><span class="line">    errorCount = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numTestVecs):</span><br><span class="line">        classifierResult = classify(normMat[i, :], normMat[numTestVecs:m, :], datingLabels[numTestVecs:m], <span class="number">3</span>)</span><br><span class="line">        print(<span class="string">"The classifier came back with: %d, the real answer is: %d"</span> % (classifierResult, datingLabels[i]))</span><br><span class="line">        <span class="keyword">if</span> (classifierResult != datingLabels[i]):</span><br><span class="line">            errorCount += <span class="number">1.0</span></span><br><span class="line">    print(<span class="string">"The total error rate is %f:"</span> % (errorCount / float(numTestVecs)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img2vec</span><span class="params">(imgFile)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    准备数据，将图像文件转换为1*1024的图像</span></span><br><span class="line"><span class="string">    :param imgFile:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    vec = zeros((<span class="number">1</span>, <span class="number">1024</span>))</span><br><span class="line">    <span class="keyword">with</span> open(imgFile) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.readlines()</span><br><span class="line">        line_number = len(content)</span><br><span class="line">        <span class="keyword">for</span> line_index <span class="keyword">in</span> range(line_number):</span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> range(len(content[line_index].strip())):</span><br><span class="line">                vec[<span class="number">0</span>, line_index*<span class="number">32</span> + index] = content[line_index].strip()[index]</span><br><span class="line">    <span class="keyword">return</span> vec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handwritingClassTest</span><span class="params">()</span>:</span></span><br><span class="line">    hwLabels = []</span><br><span class="line">    trainingFileList = os.listdir(<span class="string">'trainingDigits'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取目录内容</span></span><br><span class="line">    m = len(trainingFileList)</span><br><span class="line">    trainingMat = zeros((m, <span class="number">1024</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        <span class="comment"># 从文件名解析分类数字</span></span><br><span class="line">        fileNameStr = trainingFileList[i]</span><br><span class="line">        fileStr = fileNameStr.split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">        classNumStr = int(fileStr.split(<span class="string">'_'</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        hwLabels.append(classNumStr)</span><br><span class="line">        trainingMat[i, :] = img2vec(<span class="string">'trainingDigits/%s'</span> % fileNameStr)</span><br><span class="line">        testFileList = os.listdir(<span class="string">'testDigits'</span>)</span><br><span class="line">        errorCount = <span class="number">0.0</span></span><br><span class="line">        mTest = len(testFileList)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(mTest):</span><br><span class="line">        fileNameStr = testFileList[i]</span><br><span class="line">        fileStr = fileNameStr.split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">        classNumStr = int(fileStr.split(<span class="string">'_'</span>)[<span class="number">0</span>])</span><br><span class="line">        vectorUnderTest = img2vec(<span class="string">'testDigits/%s'</span> % fileNameStr)</span><br><span class="line">        classifierResult = classify(vectorUnderTest, trainingMat, hwLabels, <span class="number">3</span>)</span><br><span class="line">        print(<span class="string">'the classifier came back with: %d'</span> % classNumStr)</span><br><span class="line">        <span class="keyword">if</span> (classifierResult != classNumStr):</span><br><span class="line">            errorCount += <span class="number">1.0</span></span><br><span class="line">    print(<span class="string">'the total number of errors is: %d'</span> % errorCount)</span><br><span class="line">    print(<span class="string">'the total error rate is: %f'</span> % (errorCount / float(mTest)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    handwritingClassTest()</span><br></pre></td></tr></table></figure>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>缺陷：</p>
<ol>
<li>无法给出任何数据的基础结构信息，也不知道平均实例样本和典型实例样本具有什么特征。</li>
<li>k近邻算法必须保存全部数据集，如果训练数据集很大，将会需要大量的存储空间对数据进行保存，并且计算需要耗费大量时间，无法做到实时计算。</li>
</ol>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> ML </category>
            
            <category> k近邻算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ML </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> K近邻算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[MLA-01]k-近邻算法初探]]></title>
      <url>/2019/06/07/MLA-01-k-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><p>k 邻近算法是《机器学习实战》中第一个讲到的机器学习算法，也是最容易理解的算法，不需要很多背景知识即可理解和上手。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>k-近邻算法采用测量不同特征值之间的距离进行分类</p>
</blockquote>
<p>优点：精度高，对异常值不敏感，无数据输入确定<br>缺点：计算复杂度高，空间复杂度高<br>适用数据范围：数值型和标称型</p>
<h2 id="需要了解的一些知识"><a href="#需要了解的一些知识" class="headerlink" title="需要了解的一些知识"></a>需要了解的一些知识</h2><ul>
<li>k邻近算法只适用于分类算法(预测的值是离散的而不是连续的)</li>
<li>k邻近算法属于监督学习</li>
</ul>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>对于要预测的某个数据点，从已带有标签的数据中选择k个距离该数据点最近的数据，并对其标签进行统计，频率最大的便是该数据点的标签，也就是我们预测的结果</p>
<blockquote>
<p>书上的解释：存在一个样本数据集合，也称作训练样本集，并且样本集中每个数据都存在标签，即我们知道样本集中每个数据与所属分类的对应关系。输入没有标签的数据后，将新数据的每个特征值与样本集中每个数据特征进行比较，然后算法提取样本集中特征最相似数据(最近邻)的分类标签。一般来说，只选择样本数据集中前k个最相似的数据。最后选择k个最相似数据中出现次数最多的分类，作为新数据的分类。</p>
</blockquote>
<h1 id="一般流程"><a href="#一般流程" class="headerlink" title="一般流程"></a>一般流程</h1><ol>
<li>收集数据</li>
<li>准备数据：计算距离所需要的数值，最好是结构化的数据格式</li>
<li>分析数据</li>
<li>训练算法：此步骤不适用于k近邻算法</li>
<li>测试算法：计算错误率</li>
<li>使用算法：首先需要输入样本数据和结构化的输出结果，然后运行k近邻算判定输入数据分别属于哪个分类，最后应用对计算出的分类执行后续的处理</li>
</ol>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>对每个未知类别属性的数据集中的每个点依次执行如下操作：</p>
<ol>
<li>计算已知类别数据集中点与当前点之间的距离</li>
<li>按照距离从小到大进行排序</li>
<li>选取与当前点距离最小的k个点</li>
<li>确定前k个点所在类别的出现频率</li>
<li>返回前k个点出现频率最高的类别作为当前点的预测分类</li>
</ol>
<h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入科学计算包</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 导入运算符模块，k近邻算法执行排序操作时将会使用这个模块提供的函数</span></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    group = array([[<span class="number">1.0</span>, <span class="number">1.1</span>], [<span class="number">1.0</span>, <span class="number">1.0</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0.1</span>]])</span><br><span class="line">    labels = [<span class="string">'A'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>]</span><br><span class="line">    <span class="keyword">return</span> group, labels</span><br></pre></td></tr></table></figure>
<h2 id="实现KNN分类算法"><a href="#实现KNN分类算法" class="headerlink" title="实现KNN分类算法"></a>实现KNN分类算法</h2><blockquote>
<p>采用欧式距离公式计算两个数据点之间的距离，从小到大排序，确定前k个最小距离元素所对应的分类</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(inX, dataSet, labels, k)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  根据欧式距离公式计算出的距离从小到大排序，返回前k个元素</span></span><br><span class="line"><span class="string">  :param inX: 用于分类的输入向量</span></span><br><span class="line"><span class="string">  :param dataSet: 输入的训练样本集</span></span><br><span class="line"><span class="string">  :param labels: 标签向量</span></span><br><span class="line"><span class="string">  :param k: 标签向量元素的个数或训练集中数据的行数</span></span><br><span class="line"><span class="string">  :return:</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  dataSetSize = dataSet.shape[<span class="number">0</span>]</span><br><span class="line">  <span class="comment"># 距离计算</span></span><br><span class="line">  diffMat = tile(inX, (dataSetSize, <span class="number">1</span>)) - dataSet</span><br><span class="line">  sqDiffMat = diffMat ** <span class="number">2</span></span><br><span class="line">  sqDistances = sqDiffMat.sum(axis=<span class="number">1</span>)</span><br><span class="line">  distances = sqDistances ** <span class="number">0.5</span></span><br><span class="line">  sortedDistIndicies = distances.argsort()</span><br><span class="line">  classCount = &#123;&#125;</span><br><span class="line">  <span class="comment"># 以下两行，选择距离最小的k个点</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">      votellabel = labels[sortedDistIndicies[i]]</span><br><span class="line">      classCount[votellabel] = classCount.get(votellabel, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">      sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="literal">True</span>)</span><br><span class="line">  <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h3 id="numpy中的tile-方法"><a href="#numpy中的tile-方法" class="headerlink" title="numpy中的tile()方法"></a>numpy中的tile()方法</h3><blockquote>
<p>的功能是重复某个数组。比如tile(A,n)，功能是将数组A重复n次，构成一个新的数组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">tile(num, <span class="number">2</span>) <span class="comment"># 返回一个数组，将num重复两次</span></span><br><span class="line">tile(num, (<span class="number">1</span>, <span class="number">2</span>)) <span class="comment"># 返回一个1行并且将num重复两次的矩阵</span></span><br><span class="line">tile(num, (<span class="number">2</span>, <span class="number">3</span>)) <span class="comment"># 返回一个两行并且每行将num重复3次的矩阵</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>结果是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br></pre></td></tr></table></figure>
<h3 id="字典使用get-方法"><a href="#字典使用get-方法" class="headerlink" title="字典使用get()方法"></a>字典使用get()方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classCount[votellabel] = classCount.get(votellabel, <span class="number">0</span>) + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>作用：从classCount字典中获取votellabel的元素，如果不存在返回0</p>
<h3 id="operator模块的itemgetter-方法"><a href="#operator模块的itemgetter-方法" class="headerlink" title="operator模块的itemgetter()方法"></a>operator模块的itemgetter()方法</h3><blockquote>
<p>operator模块提供的itemgetter函数用于获取对象的哪些维的数据</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>operator.itemgetter函数<del>获取的不是值</del>，而是<strong>定义了一个函数</strong>，通过该函数作用到对象上才能获取值。</p>
<h2 id="测试分类器"><a href="#测试分类器" class="headerlink" title="测试分类器"></a>测试分类器</h2><blockquote>
<p>k近邻算法的错误率在0-1之间， 错误率=错误次数/测试执行的总数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">group, labels = createDataSet()</span><br><span class="line">print(classify([<span class="number">0</span>, <span class="number">0</span>], group, labels, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面就是一个简单的分类器的简单实现，采用欧式距离公式计算两个数据点的距离</p>
<h2 id="k近邻算法的缺点"><a href="#k近邻算法的缺点" class="headerlink" title="k近邻算法的缺点"></a>k近邻算法的缺点</h2><ol>
<li>如果期望k近邻算法能够表现优秀，我们必须有接近实际数据的训练样本集</li>
<li>由于必须对数据集中的每个数据计算距离值，在实际使用中(如需要实时计算或数据量超级大时)可能非常耗时</li>
<li>无法给出任何数据的基础结构信息，因此我们无法知晓平均实例样本和典型实例样本具有什么特征</li>
<li>k近邻算法可以很好的完成分类任务，但是最大的缺点就是无法给出数据的内在含义</li>
</ol>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> ML </category>
            
            <category> k近邻算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ML </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> K近邻算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Flask实现一个简单的图书管理]]></title>
      <url>/2019/05/17/%E4%BD%BF%E7%94%A8Flask%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="项目演示以及讲解项目开发流程"><a href="#项目演示以及讲解项目开发流程" class="headerlink" title="项目演示以及讲解项目开发流程"></a>项目演示以及讲解项目开发流程</h2><ol>
<li>配置连接数据库</li>
<li>添加书和作者模型</li>
<li>添加数据</li>
<li>使用模板显示数据库查询的数据</li>
<li>使用WTF显示变淡</li>
<li>实现相关增删逻辑</li>
</ol>
<h2 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h2><ol>
<li>导入SQLAlchemy</li>
<li>配置数据库</li>
<li>关闭动态跟踪修改</li>
<li>创建数据库对象</li>
<li>使用终端创建数据库</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'mysql://root:123456@localhost:3306/flask_books'</span></span><br><span class="line"><span class="comment"># 关闭自动跟踪修改</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库对象，并将数据库对应与对应的app绑定起来</span></span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure>
<h3 id="定义书和作者模型"><a href="#定义书和作者模型" class="headerlink" title="定义书和作者模型"></a>定义书和作者模型</h3><ul>
<li>模型继承自db.Model</li>
<li><strong>tablename</strong> 指定表名</li>
<li>db.Column() 标明是一个字段</li>
<li>db.relationship 定义关系引用 </li>
</ul>
<a id="more"></a>
<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">db.drop_all()</span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据</span></span><br><span class="line">au1 = Author(name=<span class="string">'老王'</span>)</span><br><span class="line">au2 = Author(name=<span class="string">'老惠'</span>)</span><br><span class="line">au3 = Author(name=<span class="string">'老刘'</span>)</span><br><span class="line"><span class="comment"># 把数据提交给用户会话</span></span><br><span class="line">db.session.add([au1, au2, au3])</span><br><span class="line"><span class="comment"># 提交会话</span></span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line">bk1 = Book(name=<span class="string">'老王回忆录'</span>, author_id=au1.id)</span><br><span class="line">bk2 = Book(name=<span class="string">'我读书少，你别骗我'</span>, author_id=au1.id)</span><br><span class="line">bk3 = Book(name=<span class="string">'如何才能让自己更骚'</span>, author_id=au2.id)</span><br><span class="line">bk4 = Book(name=<span class="string">'怎样征服美丽少女'</span>, author_id=au3.id)</span><br><span class="line">bk5 = Book(name=<span class="string">'如何征服英俊少男'</span>, author_id=au3.id)</span><br><span class="line"><span class="comment"># 将数据提交给会话</span></span><br><span class="line">db.session.add([bk1, bk2, bk3. bk4, bk5])</span><br><span class="line"><span class="comment"># 提交会话</span></span><br><span class="line">db.session.commit()</span><br><span class="line">print(<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="显示作者数据"><a href="#显示作者数据" class="headerlink" title="显示作者数据"></a>显示作者数据</h3><ol>
<li>查询所有作者信息，将消息传递给模板</li>
<li>模板按照格式，依次for循环作者和书籍即可 </li>
</ol>
<blockquote>
<p>这里用到了关系引用，通过作者获得书名，但实际上作者表中只有书的id，这里使用了关系引用来获取书名</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> author <span class="keyword">in</span> authors %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; author.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;% <span class="keyword">for</span> book <span class="keyword">in</span> author.books %&#125;</span><br><span class="line">            &lt;li&gt;&#123;&#123; book.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<h3 id="使用WTF显示表单"><a href="#使用WTF显示表单" class="headerlink" title="使用WTF显示表单"></a>使用WTF显示表单</h3><ol>
<li>自定义表单类,需要继承FlaskForm</li>
<li>模板中进行显示</li>
<li>注意：设置secret_key / 编码 / csrf_token</li>
</ol>
<p>自定义表单类：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义表单类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorForm</span><span class="params">(FlaskForm)</span>:</span></span><br><span class="line">    author = StringField(label=<span class="string">'作者'</span>, validators=[DataRequired()])</span><br><span class="line">    books = StringField(label=<span class="string">'书籍'</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(label=<span class="string">'添加'</span>)</span><br></pre></td></tr></table></figure>
<p>视图函数中创建表单对象并进行传递</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 查询所有作者信息并传递给模板</span></span><br><span class="line">    authors = Author.query.all()</span><br><span class="line">    <span class="comment"># 创建自定义表单类</span></span><br><span class="line">    form = AuthorForm()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'books.html'</span>, authors=authors, form=form)</span><br></pre></td></tr></table></figure>
<p>在对应的Html文件中使用表单</p>
<blockquote>
<p>Tips: 记得编写csrf_token,如果有flash消息，记得显示flash</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span>&#123;&#123;form.csrf_token()&#125;&#125;<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span>&#123;&#123;form.author.label&#125;&#125; &#123;&#123; form.author &#125;&#125;<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span>&#123;&#123;form.books.label&#125;&#125; &#123;&#123; form.books &#125;&#125;<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span>&#123;&#123; form.submit &#125;&#125;<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;# 显示消息闪现的内容 #&#125;</span><br><span class="line">    &#123;% for message in get_flashed_messages() %&#125;</span><br><span class="line">        &#123;&#123; message &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="实现相关的增删逻辑"><a href="#实现相关的增删逻辑" class="headerlink" title="实现相关的增删逻辑"></a>实现相关的增删逻辑</h3><blockquote>
<p>做表单验证记得添加对应的POST请求</p>
</blockquote>
<blockquote>
<p>采用默认的html文件中的表单需要记得修改method=’post’，如果没有修改将会默认是get请求</p>
</blockquote>
<h4 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h4><ol>
<li>调用wtf验证函数用一行代码实现验证</li>
<li>如果通过验证可以获取数据</li>
<li>判断作者是否存在</li>
<li>如果作者存在，判断书籍是否存在，如果没有重复书籍，则可以添加数据</li>
<li>如果作者不存在，就添加作者和书籍</li>
<li>验证不通过就提示错误</li>
</ol>
<p>调用wtf验证函数用一行代码实现验证: form.validate_on_submit() 其中<strong>form是自定义表单类的对象名</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 调用wtf验证函数用一行代码实现验证</span></span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        <span class="comment"># 2. 如果通过验证可以获取数据</span></span><br><span class="line">        author_name = form.author.data</span><br><span class="line">        book_name = form.books.data</span><br><span class="line">        print(author_name)</span><br><span class="line">        print(book_name)</span><br><span class="line">        <span class="comment"># 3. 判断作者是否存在</span></span><br><span class="line">        author = Author.query.filter_by(name=author_name).first()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 如果作者存在</span></span><br><span class="line">        <span class="keyword">if</span> author:</span><br><span class="line">            <span class="comment"># 判断书籍是否存在，如果没有重复书籍，则可以添加数据</span></span><br><span class="line">            book = Book.query.filter_by(name=book_name).first()</span><br><span class="line">            <span class="keyword">if</span> book:</span><br><span class="line">                <span class="comment"># 书籍存在</span></span><br><span class="line">                flash(<span class="string">'已存在同名书籍'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 书籍不存在</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment"># 添加数据</span></span><br><span class="line">                    new_book = Book(name=book_name, author_id=author.id)</span><br><span class="line">                    db.session.add(new_book)</span><br><span class="line">                    db.session.commit()</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    print(e)</span><br><span class="line">                    flash(<span class="string">"添加书籍失败"</span>)</span><br><span class="line">                    <span class="comment"># 添加失败，数据库回滚</span></span><br><span class="line">                    db.session.rollback()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'45'</span>)</span><br><span class="line">            <span class="comment"># 5. 如果作者不存在，就先添加作者再添加书籍</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 添加数据</span></span><br><span class="line">                new_author = Author(name=author_name)</span><br><span class="line">                db.session.add(new_author)</span><br><span class="line">                db.session.commit()</span><br><span class="line"></span><br><span class="line">                new_book = Book(name=book_name, author_id=new_author.id)</span><br><span class="line">                db.session.add(new_book)</span><br><span class="line">                db.session.commit()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(e)</span><br><span class="line">                flash(<span class="string">"添加作者和书籍失败"</span>)</span><br><span class="line">                <span class="comment"># 添加失败，数据库回滚</span></span><br><span class="line">                db.session.rollback()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 6. 验证不通过就提示错误</span></span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">'post'</span>:</span><br><span class="line">            flash(<span class="string">"参数不全"</span>)</span><br><span class="line">        print(<span class="string">'2'</span>)</span><br></pre></td></tr></table></figure>
<p>tips: <strong>一定要记得在添加作者和书籍之后才查询作者并显示，否则新加的作者或书籍不会被显示</strong></p>
<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><h4 id="点击书籍旁边的删除"><a href="#点击书籍旁边的删除" class="headerlink" title="点击书籍旁边的删除"></a>点击书籍旁边的删除</h4><blockquote>
<p> url_for redirect 控制代码块 与 for else 的使用</p>
</blockquote>
<blockquote>
<p>根据书籍的id删除书籍</p>
</blockquote>
<p>流程：点击删除按钮 –&gt; 将需要发送书籍的ID传入给删除书籍的路由–&gt; 路由需要接收参数</p>
<blockquote>
<p>from flask import Flask, render_template, flash, request, redirect, url_for</p>
</blockquote>
<blockquote>
<p> <strong>一般情况下redirect 与 url_for 是结合使用的</strong><br>redirect: 就是用来重定向的</p>
</blockquote>
<blockquote>
<p>url_for() 需要传入视图函数名，会返回该视图函数对应的路由地址</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">return</span> redirect(&#123;&#123; url_for(<span class="string">'index'</span>) &#125;&#125;)</span><br><span class="line">&gt; 等同于<span class="keyword">return</span> redirect(<span class="string">'/'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; url_for() 除了第1个传入视图函数名，后面还可以在对应的视图界面中传入视图函数所需要的参数，参数名便是视图函数中的动态参数名</span><br><span class="line">&gt; &lt;a href=&quot;&#123;&#123; url_for(&apos;delete_book&apos;, book_id=book.id) &#125;&#125;&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p>对应的视图函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/delete_book/&lt;int:book_id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_book</span><span class="params">(book_id)</span>:</span></span><br><span class="line">    <span class="comment"># 查询数据库对应id书籍是否存在，如果有就删除，没有就提示错误</span></span><br><span class="line">    book = Book.query.get(book_id)</span><br><span class="line">    <span class="keyword">if</span> book:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            db.session.delete(book)</span><br><span class="line">            db.session.commit()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            flash(<span class="string">'删除书籍出错'</span>)</span><br><span class="line">            db.session.rollback()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flash(<span class="string">'书籍不存在'</span>)</span><br><span class="line"><span class="comment"># 如何返回当前网址 --&gt; 重定向</span></span><br><span class="line">    <span class="comment"># url_for 需要传入视图函数名，会返回该视图函数对应的路由地址</span></span><br><span class="line">    <span class="keyword">return</span> redirect(&#123;&#123; url_for(<span class="string">'index'</span>) &#125;&#125;)</span><br><span class="line">    <span class="comment"># 等同于return redirect('/')</span></span><br></pre></td></tr></table></figure>
<p>删除书籍对应的视图界面：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for book in author.books %&#125;</span><br><span class="line">    &#123;# 如果有书将会执行下面这一行代码 #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; book.name &#125;&#125; <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('delete_book', book_id=book.id) &#125;&#125;"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    &#123;# 如果没有书将会执行下面这一行代码 #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>
<p>删除书籍对应的功能函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/delete_book/&lt;int:book_id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_book</span><span class="params">(book_id)</span>:</span></span><br><span class="line">    <span class="comment"># 查询数据库对应id书籍是否存在，如果有就删除，没有就提示错误</span></span><br><span class="line">    book = Book.query.get(book_id)</span><br><span class="line">    <span class="keyword">if</span> book:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            db.session.delete(book)</span><br><span class="line">            db.session.commit()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            flash(<span class="string">'删除书籍出错'</span>)</span><br><span class="line">            db.session.rollback()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flash(<span class="string">'书籍不存在'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如何返回当前网址 --&gt; 重定向</span></span><br><span class="line">    <span class="comment"># url_for 需要传入视图函数名，会返回该视图函数对应的路由地址</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    <span class="comment"># 等同于return redirect('/')</span></span><br></pre></td></tr></table></figure>
<h5 id="点击作者旁边的删除"><a href="#点击作者旁边的删除" class="headerlink" title="点击作者旁边的删除"></a>点击作者旁边的删除</h5><p>首先判断作者是否存在，如果存在，先删除作者名下对应的书籍然后再删除书籍</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/delete_author/&lt;int:author_id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_author</span><span class="params">(author_id)</span>:</span></span><br><span class="line">    <span class="comment"># 1 查询是否有该id对应的作者</span></span><br><span class="line">    author = Author.query.get(author_id)</span><br><span class="line">    <span class="keyword">if</span> author:</span><br><span class="line">        <span class="comment"># 先删除作者名下的书籍</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 首先对书查询之后直接删除</span></span><br><span class="line">            Book.query.filter_by(author_id=author.id).delete()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 删除作者</span></span><br><span class="line">            db.session.delete(author)</span><br><span class="line">            db.session.commit()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            flash(<span class="string">'删除作者出错'</span>)</span><br><span class="line">            db.session.rollback()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flash(<span class="string">'作者不存在'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>做项目的时候，最好先从数据库入手，做模型的一个创建，表名，字段的设置，然后在模板中显示数据</p>
<p>注意csrf_token的问题，secret_key的问题，中文编码的问题</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 中文编码问题的解决</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Flask </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Web </tag>
            
            <tag> flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV+TensorFlow 入门人工智能图像处理[2]]]></title>
      <url>/2019/05/14/OpenCV-TensorFlow-%E5%85%A5%E9%97%A8%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-2/</url>
      <content type="html"><![CDATA[<h2 id="TensorFlow理解"><a href="#TensorFlow理解" class="headerlink" title="TensorFlow理解"></a>TensorFlow理解</h2><h3 id="TensorFlow运算的实质"><a href="#TensorFlow运算的实质" class="headerlink" title="TensorFlow运算的实质"></a>TensorFlow运算的实质</h3><ul>
<li>tf本质 = 张量tensor + 计算图graphs</li>
<li>张量不仅指常量还包括变量，其实就是tensorflow中的数据</li>
<li>计算图其实就是数据操作的过程，构成了计算图</li>
<li>在tensorflow中，所有的计算图都要放入到会话session中来执行</li>
<li>session可以理解为一个运算的交互环境</li>
<li>session中所有的变量才可以进行操作，所以有一个init操作</li>
<li>init操作实质也是一个计算图</li>
<li>如果不使用with语句打开session,最后需要手动close</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化操作，实质也是一个计算图</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br></pre></td></tr></table></figure>
<h3 id="常量与变量的四则运算"><a href="#常量与变量的四则运算" class="headerlink" title="常量与变量的四则运算"></a>常量与变量的四则运算</h3><h4 id="常数之间的四则运算"><a href="#常数之间的四则运算" class="headerlink" title="常数之间的四则运算"></a>常数之间的四则运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">data1 = tf.constant(<span class="number">6</span>)</span><br><span class="line">data2 = tf.constant(<span class="number">2</span>)</span><br><span class="line">data_add = tf.add(data1, data2)</span><br><span class="line">data_mul = tf.multiply(data1, data2)</span><br><span class="line">data_sub = tf.subtract(data1, data2)</span><br><span class="line">data_div = tf.divide(data1, data2)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    print(sess.run(data_add))</span><br><span class="line">    print(sess.run(data_mul))</span><br><span class="line">    print(sess.run(data_sub))</span><br><span class="line">    print(sess.run(data_div))</span><br></pre></td></tr></table></figure>
<p>执行结果<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">12</span><br><span class="line">4</span><br><span class="line">3.0</span><br></pre></td></tr></table></figure></p>
<h4 id="常数与变量的四则运算"><a href="#常数与变量的四则运算" class="headerlink" title="常数与变量的四则运算"></a>常数与变量的四则运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">data1 = tf.constant(<span class="number">6</span>)</span><br><span class="line">data2 = tf.Variable(<span class="number">2</span>)</span><br><span class="line">data_add = tf.add(data1, data2)</span><br><span class="line">data_copy = tf.assign(data2, data_add) <span class="comment"># 将data_add运算的结果追加到data2中</span></span><br><span class="line">data_mul = tf.multiply(data1, data2)</span><br><span class="line">data_sub = tf.subtract(data1, data2)</span><br><span class="line">data_div = tf.divide(data1, data2)</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># 所有的变量必须完成初始化才可以操作</span></span><br><span class="line">    sess.run(init)</span><br><span class="line">    print(sess.run(data_add))</span><br><span class="line">    print(sess.run(data_mul))</span><br><span class="line">    print(sess.run(data_sub))</span><br><span class="line">    print(sess.run(data_div))</span><br></pre></td></tr></table></figure>
<p>执行结果<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">12</span><br><span class="line">4</span><br><span class="line">3.0</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">data1 = tf.constant(<span class="number">6</span>)</span><br><span class="line">data2 = tf.Variable(<span class="number">2</span>)</span><br><span class="line">data_add = tf.add(data1, data2)</span><br><span class="line">data_copy = tf.assign(data2, data_add) <span class="comment"># 将data_add运算的结果追加到data2中</span></span><br><span class="line">data_mul = tf.multiply(data1, data2)</span><br><span class="line">data_sub = tf.subtract(data1, data2)</span><br><span class="line">data_div = tf.divide(data1, data2)</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># 所有的变量必须完成初始化才可以操作</span></span><br><span class="line">    sess.run(init)</span><br><span class="line">    print(sess.run(data_add))</span><br><span class="line">    print(sess.run(data_mul))</span><br><span class="line">    print(sess.run(data_sub))</span><br><span class="line">    print(sess.run(data_div))</span><br><span class="line">    print(<span class="string">"data2:"</span>, sess.run(data2))</span><br><span class="line">    print(<span class="string">"sess.run(data_copy) "</span>, sess.run(data_copy)) <span class="comment"># 将8赋值给data_copy</span></span><br><span class="line">    print(<span class="string">"data2:"</span>, sess.run(data2))</span><br><span class="line">    <span class="comment"># 将8+6赋值给data_copy, eval()方法类似于下面的代码，也是会话执行</span></span><br><span class="line">    print(<span class="string">"data_copy.eval()"</span>, data_copy.eval())  <span class="comment"># 此时data_add已经为14</span></span><br><span class="line">    print(<span class="string">"data2:"</span>, sess.run(data2))</span><br><span class="line">    print(<span class="string">"tf.get_default_session().run(data_copy)"</span>, tf.get_default_session().run(data_copy))</span><br><span class="line">    print(<span class="string">"data2:"</span>, sess.run(data2))</span><br><span class="line">    <span class="comment"># 计算图执行得两种方式：</span></span><br><span class="line">    <span class="comment"># 1. sess.run(图名)</span></span><br><span class="line">    <span class="comment"># 2. 图名.eval()</span></span><br></pre></td></tr></table></figure>
<p>执行结果<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">12</span><br><span class="line">4</span><br><span class="line">3.0</span><br><span class="line">data2: 2</span><br><span class="line">sess.run(data_copy)  8</span><br><span class="line">data2: 8</span><br><span class="line">data_copy.eval() 14</span><br><span class="line">data2: 14</span><br><span class="line">tf.get_default_session().run(data_copy) 20</span><br><span class="line">data2: 20</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> 计算机视觉 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> TensorFlow </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> CV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV+TensorFlow 入门人工智能图像处理[1]]]></title>
      <url>/2019/05/09/OpenCV-TensorFlow-%E5%85%A5%E9%97%A8%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-1/</url>
      <content type="html"><![CDATA[<h2 id="opencv"><a href="#opencv" class="headerlink" title="opencv"></a>opencv</h2><h3 id="opencv的导入"><a href="#opencv的导入" class="headerlink" title="opencv的导入"></a>opencv的导入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br></pre></td></tr></table></figure>
<h3 id="读取图像数据"><a href="#读取图像数据" class="headerlink" title="读取图像数据"></a>读取图像数据</h3><p>imread()方法对图片进行数据的读取</p>
<ol>
<li>有2个参数，第1个参数是文件名</li>
<li>第2个参数是图片的类型，如果当前参数为0，读取的是灰度图片，如果参数为1，读取进来的为彩色图片</li>
<li>该方法完成图片的读取，返回的是当前图片的图像数据</li>
<li>虽然表面上看只是图像读取，但是包含了几个步骤，文件的读取，图像格式的分析，图像数据的解码，数据的加载</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">'./image0.jpg'</span>, <span class="number">1</span>)</span><br><span class="line">(b, g, r) = img[<span class="number">100</span>, <span class="number">100</span>]</span><br><span class="line">print(b, g, r)</span><br></pre></td></tr></table></figure>
<p><strong>opencv中读取图像后获得的像素点是bgr(blue, green, red)与rgb不同</strong></p>
<h3 id="展示图像"><a href="#展示图像" class="headerlink" title="展示图像"></a>展示图像</h3><p>imshow()对图片进行展示</p>
<ol>
<li>有2个参数，第1个参数是展示出的图像所在的窗体名称</li>
<li>第2个参数是当前窗体展示的内容</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cv2.imshow(<span class="string">'image'</span>, img)</span><br><span class="line"><span class="comment"># 防止一瞬间消失掉后看不到图片</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>因为读取图片之后对图片进行显示的时候将会在一瞬间消失掉，因此我们需要stop，也就是采用了<strong>cv2.waitKey(0)</strong></p>
<h3 id="图像数据的写入"><a href="#图像数据的写入" class="headerlink" title="图像数据的写入"></a>图像数据的写入</h3><p>imwrite() 将数据写入到一张图片中</p>
<ol>
<li>有2个参数，第1个参数是 图片的名称</li>
<li>第2个参数是 当前图片的数组</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时的img是解码之后的数据</span></span><br><span class="line">cv2.imwrite(<span class="string">'image1.jpg'</span>, img)</span><br><span class="line">type(img) <span class="comment"># 将会是一个ndarray数组</span></span><br></pre></td></tr></table></figure>
<h3 id="图像质量"><a href="#图像质量" class="headerlink" title="图像质量"></a>图像质量</h3><blockquote>
<p>图像划分为jpg与png，两个采用不同的压缩格式</p>
</blockquote>
<h4 id="PNG与JPG压缩的区别："><a href="#PNG与JPG压缩的区别：" class="headerlink" title="PNG与JPG压缩的区别："></a>PNG与JPG压缩的区别：</h4><ol>
<li>jpg图片压缩将会损失图片的质量，也就是有损压缩，png图片压缩是无损压缩</li>
<li>jpg无法设置透明度，png可以设置透明度，不仅仅可以修改传统的RGB</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第3个参数用来描述当前图片的质量,对于jpg图片的压缩可以采用不同的压缩比来对其进行控制，范围是0-100</span></span><br><span class="line">cv2.imwrite(<span class="string">'imageTest2.jpg'</span>, img, [cv2.IMWRITE_JPEG_QUALITY, <span class="number">50</span>]) </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(<span class="string">'./image0.jpg'</span>, <span class="number">1</span>)</span><br><span class="line">cv2.imwrite(<span class="string">'imageTest.png'</span>, img, [cv2.IMWRITE_PNG_COMPRESSION, <span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>在imwrite()方法的第3个参数中：</p>
<ol>
<li>对于JPG 来说 数字越小，压缩比越高，图片质量越不清晰，压缩范围是0-100</li>
<li>对于PNG 来说，数字越小，压缩比越低，图片质量越清晰 ，压缩范围是0-9 </li>
</ol>
<h2 id="坐标轴"><a href="#坐标轴" class="headerlink" title="坐标轴"></a>坐标轴</h2><figure class="image-box">
                <img src="./OpenCV-TensorFlow-入门人工智能图像处理-1/坐标轴.png" alt="糟了" title="这是标题" class>
                <p>这是标题</p>
            </figure>   
<p>x轴对应垂直高度的变化</p>
<h2 id="图像基础知识"><a href="#图像基础知识" class="headerlink" title="图像基础知识"></a>图像基础知识</h2><ul>
<li><p>像素点(像素)：图像是由一个个方块组成，每个方块称为像素点，</p>
</li>
<li><p>每种颜色都是由RGB三种颜色分量组合而成。</p>
</li>
<li><p>像素点如何存储：在计算机中，每种颜色都可以通过RGB三种颜色进行合成，在8位颜色深度中，每个RGB对应的分量取值都是0-255</p>
</li>
<li><p>颜色深度：8位颜色深度，表示的是RGB每个分量中， 都有2^8个可能</p>
</li>
<li>对于png图片来说，每一个像素点除了RGB之外，还可能有α通道作为透明度</li>
<li>经常见到的颜色存储格式：RGB(red, green, blue) 、BGR(blue, green, red)</li>
</ul>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>如果有一个图片，宽为640 高是480 ，表示图片在水平方向上有640个像素点，在竖直方向上有480个像素点，</p>
<p>图片未经压缩的大小计算： 大小 = 宽度 <em> 高度 </em> 3 * 颜色深度 (单位是bit)</p>
<p>除以8 转换为B </p>
<p>首先是宽度*高度，得到多少个像素点，然后因为每个点是由RGB中的3个颜色分量组成，所以 再乘以3，每个颜色分量是8位的颜色深度，所以最后计算而来</p>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> 计算机视觉 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> TensorFlow </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> CV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python中使用uuid来生成唯一标识]]></title>
      <url>/2019/05/08/Python%E4%B8%AD%E4%BD%BF%E7%94%A8uuid%E6%9D%A5%E7%94%9F%E6%88%90%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86/</url>
      <content type="html"><![CDATA[<h2 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">print(uuid.uuid4()) <span class="comment">#将会生成一个带有-分隔的随机</span></span><br><span class="line"><span class="comment"># 09debe4e-895b-4283-afb7-d9bb9e3ecc02</span></span><br><span class="line"><span class="comment"># 使用.hex将其-分隔符去掉</span></span><br><span class="line">print(uuid.uuid4().hex)</span><br><span class="line"><span class="number">2</span>a6acd34fe4940eeb0f4a76fbad319c1</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/crazyhacking/article/details/38898721" target="_blank" rel="noopener">参考</a><br><a href="https://www.cnblogs.com/tangpg/p/9475900.html" target="_blank" rel="noopener">参考</a></p>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> uuid </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[No module named MYSQLdb 问题解决]]></title>
      <url>/2019/05/06/No-module-named-MYSQLdb-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>今天使用Flask框架逆向生成数据库表，报出如下错误：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No module named MYSQLdb</span><br></pre></td></tr></table></figure>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>Windows 7 环境，命令行下：</p>
<blockquote>
<p>pip install mysqlclient</p>
</blockquote>
<p><a href="https://www.cnblogs.com/guohaojintian/p/6030818.html" target="_blank" rel="noopener">参考</a></p>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[千峰数据分析-Numpy学习记录[1]]]></title>
      <url>/2019/05/05/%E5%8D%83%E5%B3%B0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-Numpy%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-1/</url>
      <content type="html"><![CDATA[<h2 id="查看Numpy版本"><a href="#查看Numpy版本" class="headerlink" title="查看Numpy版本"></a>查看Numpy版本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">print(np.__version__)</span><br></pre></td></tr></table></figure>
<h2 id="使用Numpy创建ndarray对象"><a href="#使用Numpy创建ndarray对象" class="headerlink" title="使用Numpy创建ndarray对象"></a>使用Numpy创建ndarray对象</h2><h3 id="通过列表转换为ndarray对象"><a href="#通过列表转换为ndarray对象" class="headerlink" title="通过列表转换为ndarray对象"></a>通过列表转换为ndarray对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">n1 = np.array([<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<h3 id="使用Numpy自带函数进行填充"><a href="#使用Numpy自带函数进行填充" class="headerlink" title="使用Numpy自带函数进行填充"></a>使用Numpy自带函数进行填充</h3><p>np.ones((10, 8), dtype=int)  第1个参数是一个元祖，指定了创建ndarray的形状，这里表示10行8列</p>
<p>np.zeros((4, 4))  创建一个4行4列的形状的全0数组<br>np.full((10, 10), fill_value=1024) 创建一个10行10列的数组，使用1024对值进行填充<br>np.eye(10) 创建一个维度为10的方阵，并且主对角线全为1，也就是满秩<br>np.linspace(0, 100, 20)   从0开始到100，分为20个点，也就有19个空隙，每个空隙的大小为100/19<br>np.arange(0, 100, 2) 生成从0到100的随机数，但是不包括100，步长为2<br>np.random.randint(10) 生成10以内的随机数<br>np.random.randint(1, 10) 生成1-10以内的随机数<br>np.random.randint(1, 10, 5) 生成5个1-10以内的随机数<br>np.random.randn(100) 生成一个标准正态分布<br>np.random.normal(loc=175, scale=0, size=100) 生成一个自己自定义的一个正态分布，scale越大波动越大，这里取值为0时，将会生成100个175<br>np.random.random(100) 生成100个0-1的随机数<br>np.random.random([200, 300, 3]) 生成行200，列300，高3的三维0-1的随机数</p>
<h2 id="Numpy中关于JPG与PNG图像的读取"><a href="#Numpy中关于JPG与PNG图像的读取" class="headerlink" title="Numpy中关于JPG与PNG图像的读取"></a>Numpy中关于JPG与PNG图像的读取</h2><p>JPG与PNG是两种不同的图片格式，Numpy将JPG图用3维数组来进行表示，每个元素的取值都在0-255之间；PNG也被Numpy用3维数组来表示，与JPG不同的是每个元素的取值在0-1之间</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">cat = plt.imread(<span class="string">'D:/git仓库/QF-Numpy/cat.jpg'</span>)</span><br><span class="line">cat</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">结果如下：</span></span><br><span class="line"><span class="string">array([[[231, 186, 131],</span></span><br><span class="line"><span class="string">        [232, 187, 132],</span></span><br><span class="line"><span class="string">        [233, 188, 133],</span></span><br><span class="line"><span class="string">        ...,</span></span><br><span class="line"><span class="string">        [100,  54,  54],</span></span><br><span class="line"><span class="string">        [ 92,  48,  47],</span></span><br><span class="line"><span class="string">        [ 85,  43,  44]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[232, 187, 132],</span></span><br><span class="line"><span class="string">        [232, 187, 132],</span></span><br><span class="line"><span class="string">        [233, 188, 133],</span></span><br><span class="line"><span class="string">        ...,</span></span><br><span class="line"><span class="string">        [100,  54,  54],</span></span><br><span class="line"><span class="string">        [ 92,  48,  47],</span></span><br><span class="line"><span class="string">        [ 84,  42,  43]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[232, 187, 132],</span></span><br><span class="line"><span class="string">        [233, 188, 133],</span></span><br><span class="line"><span class="string">        [233, 188, 133],</span></span><br><span class="line"><span class="string">        ...,</span></span><br><span class="line"><span class="string">        [ 99,  53,  53],</span></span><br><span class="line"><span class="string">        [ 91,  47,  46],</span></span><br><span class="line"><span class="string">        [ 83,  41,  42]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       ...,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[199, 119,  82],</span></span><br><span class="line"><span class="string">        [199, 119,  82],</span></span><br><span class="line"><span class="string">        [200, 120,  83],</span></span><br><span class="line"><span class="string">        ...,</span></span><br><span class="line"><span class="string">        [189,  99,  65],</span></span><br><span class="line"><span class="string">        [187,  97,  63],</span></span><br><span class="line"><span class="string">        [187,  97,  63]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[199, 119,  82],</span></span><br><span class="line"><span class="string">        [199, 119,  82],</span></span><br><span class="line"><span class="string">        [199, 119,  82],</span></span><br><span class="line"><span class="string">        ...,</span></span><br><span class="line"><span class="string">        [188,  98,  64],</span></span><br><span class="line"><span class="string">        [186,  96,  62],</span></span><br><span class="line"><span class="string">        [188,  95,  62]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[199, 119,  82],</span></span><br><span class="line"><span class="string">        [199, 119,  82],</span></span><br><span class="line"><span class="string">        [199, 119,  82],</span></span><br><span class="line"><span class="string">        ...,</span></span><br><span class="line"><span class="string">        [188,  98,  64],</span></span><br><span class="line"><span class="string">        [188,  95,  62],</span></span><br><span class="line"><span class="string">        [188,  95,  62]]], dtype=uint8)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">plt.imread(<span class="string">'./成绩.png'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">结果如下：</span></span><br><span class="line"><span class="string">array([[[1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        ...,</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        ...,</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        ...,</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       ...,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        ...,</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        ...,</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        ...,</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.],</span></span><br><span class="line"><span class="string">        [1., 1., 1.]]], dtype=float32)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> 数据分析 </category>
            
            <category> Numpy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Numpy </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 数据挖掘 </tag>
            
            <tag> Data Analysis </tag>
            
            <tag> Data Mining </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Python 爬虫篇](5)URLError实战]]></title>
      <url>/2019/04/28/Python-%E7%88%AC%E8%99%AB%E7%AF%87-5-URLError%E5%AE%9E%E6%88%98/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> 爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 精通Python网络爬虫、核心技术、框架与项目实战 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Python 爬虫篇](4)设置代理服务器 DebugLog实战]]></title>
      <url>/2019/04/28/Python-%E7%88%AC%E8%99%AB%E7%AF%87-4-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8-DebugLog%E5%AE%9E%E6%88%98/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> 爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 精通Python网络爬虫、核心技术、框架与项目实战 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Python 爬虫篇](3)超时设置与Get、Post请求]]></title>
      <url>/2019/04/28/Python-%E7%88%AC%E8%99%AB%E7%AF%87-3-%E8%B6%85%E6%97%B6%E8%AE%BE%E7%BD%AE%E4%B8%8EGet%E3%80%81Post%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h2 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h2><p>当我们使用爬取网页时，我们可以设置超时时间，以便可以更快或者重新访问网页，从而避免在获取响应网页内容上浪费太多时间</p>
<p>语法如下：</p>
<blockquote>
<p>urllib.request.urlopen(timeout=1) # 设置1秒为超时界限</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">url = <span class="string">"http://www.google.com.hk"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 超时设置为1秒钟，即1秒钟未响应则判定超时，并读取该网站的内容，输出获取到内容的长度</span></span><br><span class="line">        file = urllib.request.urlopen(url, timeout=<span class="number">1</span>)</span><br><span class="line">        data = file.read()</span><br><span class="line">        print(len(data))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"出现异常"</span> + str(e))</span><br></pre></td></tr></table></figure>
<h2 id="爬虫之Get请求"><a href="#爬虫之Get请求" class="headerlink" title="爬虫之Get请求"></a>爬虫之Get请求</h2><p>案例：使用get请求获取百度</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> 爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 精通Python网络爬虫、核心技术、框架与项目实战 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Python 爬虫篇](1)快速使用urllib爬取网页]]></title>
      <url>/2019/04/27/Python-%E7%88%AC%E8%99%AB%E7%AF%87-1-%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8urllib%E7%88%AC%E5%8F%96%E7%BD%91%E9%A1%B5/</url>
      <content type="html"><![CDATA[<h3 id="读取内容常见的3种方式"><a href="#读取内容常见的3种方式" class="headerlink" title="读取内容常见的3种方式"></a>读取内容常见的3种方式</h3><blockquote>
<p>在我们使用urllib打开网页之后，要读取文件的全部内容可以有如下3种方式</p>
<ol>
<li>file.read()读取网页全部内容到一个字符串中</li>
<li>file.readline()读取文件的一行内容</li>
<li>file.readlines()读取网页内容到一个列表中，<strong>如果要读取网页全部内容，建议使用这种方式</strong></li>
</ol>
</blockquote>
<h3 id="读取网页内容并且保存到本地"><a href="#读取网页内容并且保存到本地" class="headerlink" title="读取网页内容并且保存到本地"></a>读取网页内容并且保存到本地</h3><h4 id="方法一：使用文件进行操作"><a href="#方法一：使用文件进行操作" class="headerlink" title="方法一：使用文件进行操作"></a>方法一：使用文件进行操作</h4><ol>
<li>首先 爬取一个网页并将爬取到的内容读取出来赋值给一个变量</li>
<li>以写入的方式打开一个本地文件，命名为.html文件</li>
<li>将1中的变量中的内容写入到2中的文件</li>
<li>关闭该文件</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">URL = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">data = urllib.request.urlopen(URL).read()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'baidu_content.html'</span>, <span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br></pre></td></tr></table></figure>
<h4 id="方法二：直接使用urllib-request-urlretrieve-URL-file"><a href="#方法二：直接使用urllib-request-urlretrieve-URL-file" class="headerlink" title="方法二：直接使用urllib.request.urlretrieve(URL, file)"></a>方法二：直接使用urllib.request.urlretrieve(URL, file)</h4><blockquote>
<p>使用urllib.request.urlretrieve(URL, file) 直接将URL对应的网页内容保存到指定的FILE文件</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">URL = <span class="string">"http://www.baidu.com"</span></span><br><span class="line">urllib.request.urlretrieve(URL, <span class="string">'1.html'</span>)</span><br></pre></td></tr></table></figure>
<p><strong>urllib.request.urlretrieve(URL, file)将网页内容保存到本地将会产生缓存，如果希望清除缓存可以采用如下的方式</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.urlcleanup()</span><br></pre></td></tr></table></figure></p>
<h3 id="urllib的其他常见用法"><a href="#urllib的其他常见用法" class="headerlink" title="urllib的其他常见用法"></a>urllib的其他常见用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>file = urllib.request.urlopen(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"><span class="comment"># 如果希望返回与当前环境有关的信息，可以使用info()返回</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>file.info</span><br><span class="line">&lt;bound method HTTPResponse.info of &lt;http.client.HTTPResponse object at <span class="number">0x7fd8fb0edb00</span>&gt;&gt;</span><br><span class="line"><span class="comment"># 如果希望获取当前爬取网页的状态码，可以使用getcode()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>file.getcode()</span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="comment"># 如果想要获取爬取网页的URL地址，可以使用geturl()实现</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>file.geturl()</span><br><span class="line"><span class="string">'http://www.baidu.com'</span></span><br></pre></td></tr></table></figure>
<h3 id="URL注意事项"><a href="#URL注意事项" class="headerlink" title="URL注意事项"></a>URL注意事项</h3><p>一般来说，URL标准只允许一部分ASCII字符，因此对于中文以及其他一些字符，将会对其进行URL编码</p>
<p>如果要进行URL编码可以使用 urllib.request.quote(编码内容) 来进行编码<br>如果要进行URL解码可以使用 urllib.request.unquote(编码内容) 来进行编码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>file.geturl()</span><br><span class="line"><span class="string">'http://www.baidu.com'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>urllib.request.quote(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"><span class="string">'http%3A//www.baidu.com'</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> 爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 精通Python网络爬虫、核心技术、框架与项目实战 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Python 爬虫篇](2)爬取网页遇到403错误 模拟浏览器进行爬取]]></title>
      <url>/2019/04/27/Python-%E7%88%AC%E8%99%AB%E7%AF%87-2-%E7%88%AC%E5%8F%96%E7%BD%91%E9%A1%B5%E9%81%87%E5%88%B0403%E9%94%99%E8%AF%AF-%E6%A8%A1%E6%8B%9F%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E8%A1%8C%E7%88%AC%E5%8F%96/</url>
      <content type="html"><![CDATA[<blockquote>
<p>出现403错误，是因为浏览器的这些网页为了防止我们恶意采集数据而进行的反爬虫设置，我们需要修改报头来模拟浏览器</p>
</blockquote>
<p>通过在头部设置User-Agent信息来模拟浏览器</p>
<h2 id="使用build-opener-修改报头"><a href="#使用build-opener-修改报头" class="headerlink" title="使用build_opener()修改报头"></a>使用build_opener()修改报头</h2><p>格式：</p>
<ol>
<li>headers = (“User-Agent”, 具体信息)</li>
<li>opener对象名.addheaders = [头信息]</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># url = "http://blog.csdn.com/weiwei_pig/article/details/51178226"</span></span><br><span class="line"><span class="comment"># 定义要爬取的地址</span></span><br><span class="line">url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line">file = urllib.request.urlopen(url).read()</span><br><span class="line">print(file)</span><br><span class="line"><span class="comment"># 定义一个变量存储对应的Users-Agent信息，格式为("User-Agent", 具体信息)</span></span><br><span class="line">headers = (<span class="string">"User-Agent"</span>, <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span>)</span><br><span class="line"><span class="comment"># 创建自定义的opener对象并赋值给变量opener</span></span><br><span class="line">opener = urllib.request.build_opener()</span><br><span class="line"><span class="comment"># 设置opener对象的addheaders，即设置对应的头信息</span></span><br><span class="line">opener.addheaders = [headers]</span><br><span class="line"><span class="comment"># 设置好头部信息，就可以使用opener对象的open()方法打开对应的网址</span></span><br><span class="line"><span class="comment"># 此时，将会采用刚才添加的头部信息模拟浏览器打开网站</span></span><br><span class="line">data = opener.open(url).read()</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>
<h2 id="使用add-header-修改报头"><a href="#使用add-header-修改报头" class="headerlink" title="使用add_header()修改报头"></a>使用add_header()修改报头</h2><blockquote>
<p>可以使用urllib.request.Request下的add_header()方法来修改报头</p>
</blockquote>
<p><strong>格式为 req对象.add_header(字段名，字段值)</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="comment"># 1. 首先设置要爬取的网址</span></span><br><span class="line">url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line"><span class="comment"># 2. urllib.request.Request(url)创建一个Request对象并且赋值给变量req</span></span><br><span class="line">req = urllib.request.Request(url)</span><br><span class="line"><span class="comment"># 3. req对象使用add_header()方法添加对应的报头信息，格式为 req对象.add_header(字段名，字段值)</span></span><br><span class="line">req.add_header(<span class="string">"User-Agent"</span>, <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span>)</span><br><span class="line"><span class="comment"># 4. 使用设置好的req对象打开url链接，此时将会打开并读取网页内容赋值给data变量</span></span><br><span class="line">data = urllib.request.urlopen(req).read()</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> 爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 精通Python网络爬虫、核心技术、框架与项目实战 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu虚拟机搭建FAISS]]></title>
      <url>/2019/04/25/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAFAISS/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>因为使用Anaconda安装FAISS是最简单的一种方法，之前使用Conda(Anaconda的包管理工具)安装，老是曝出如下问题： </p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda: error: failed to fetch repodata from 'http://repo.continuum.io/pkgs/pro/linux-64/'</span><br></pre></td></tr></table></figure>
<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>重新去官网下载一个最新的Anaconda安装包<br><a href="https://pan.baidu.com/s/11pP63oKIAKjZBSI4ycGA5g" target="_blank" rel="noopener">百度网盘下载</a><br>提取码：lebr</p>
<h2 id="Ubuntu安装Anaconda"><a href="#Ubuntu安装Anaconda" class="headerlink" title="Ubuntu安装Anaconda"></a>Ubuntu安装Anaconda</h2><p><a href="https://www.jianshu.com/p/2645510a39de" target="_blank" rel="noopener">参考</a></p>
<h2 id="安装其他包"><a href="#安装其他包" class="headerlink" title="安装其他包"></a>安装其他包</h2><p><a href="https://www.jianshu.com/p/2645510a39de" target="_blank" rel="noopener">参考</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">yirufeng@ubuntu:~/Anaconda$ conda install openblas</span><br><span class="line">WARNING: The conda.compat module is deprecated and will be removed in a future release.</span><br><span class="line">Collecting package metadata: done</span><br><span class="line">Solving environment: done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># Package Plan ##</span><br><span class="line"></span><br><span class="line">  environment location: /home/yirufeng/anaconda3</span><br><span class="line"></span><br><span class="line">  added / updated specs:</span><br><span class="line">    - openblas</span><br><span class="line"></span><br><span class="line">The following packages will be downloaded:</span><br><span class="line"></span><br><span class="line">    package                    |            build</span><br><span class="line">    ---------------------------|-----------------</span><br><span class="line">    conda-4.6.14               |           py37_0        2.1 MB</span><br><span class="line">    libgfortran-3.0.0          |                1        281 KB</span><br><span class="line">    openblas-0.2.19            |                0        3.0 MB</span><br><span class="line">    ------------------------------------------------------------</span><br><span class="line">                       Total:         5.4 MB</span><br><span class="line"></span><br><span class="line">The following NEW packages will be INSTALLED:</span><br><span class="line"></span><br><span class="line">  libgfortran        pkgs/free/linux-64::libgfortran-3.0.0-1</span><br><span class="line">  openblas           pkgs/free/linux-64::openblas-0.2.19-0</span><br><span class="line"></span><br><span class="line">The following packages will be UPDATED:</span><br><span class="line"></span><br><span class="line">  c</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">(base) yirufeng@ubuntu:~/Anaconda$ conda install faiss-cpu -c pytorch</span><br><span class="line">Collecting package metadata: done</span><br><span class="line">Solving environment: done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># Package Plan ##</span><br><span class="line"></span><br><span class="line">  environment location: /home/yirufeng/anaconda3</span><br><span class="line"></span><br><span class="line">  added / updated specs:</span><br><span class="line">    - faiss-cpu</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The following packages will be downloaded:</span><br><span class="line"></span><br><span class="line">    package                    |            build</span><br><span class="line">    ---------------------------|-----------------</span><br><span class="line">    faiss-cpu-1.5.1            |   py37h6bb024c_1        879 KB  pytorch</span><br><span class="line">    ------------------------------------------------------------</span><br><span class="line">                                    Total:         879 KB</span><br><span class="line"></span><br><span class="line">The following NEW packages will be INSTALLED:</span><br><span class="line"></span><br><span class="line">  faiss-cpu          pytorch/linux-64::faiss-cpu-1.5.1-py37h6bb024c_1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Proceed ([y]/n)? y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading and Extracting Packages</span><br><span class="line">faiss-cpu-1.5.1      | 879 KB    | ############################################## | 100% </span><br><span class="line">Preparing transaction: done</span><br><span class="line">Verifying transaction: done</span><br><span class="line">Executing transaction: done</span><br><span class="line">(base) yirufeng@ubuntu:~/Anaconda$</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/2645510a39de" target="_blank" rel="noopener">参考</a></p>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> 本科毕业设计 </category>
            
            <category> 环境 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> 毕业设计 </tag>
            
            <tag> 毕业设计环境 </tag>
            
            <tag> FAISS </tag>
            
            <tag> FAISS安装 </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[毕业设计问题解决方案记录]]></title>
      <url>/2019/04/25/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="gensim模块遇到的问题"><a href="#gensim模块遇到的问题" class="headerlink" title="gensim模块遇到的问题"></a>gensim模块遇到的问题</h2><h3 id="使用gensim模块加载word2vec预先训练好的词向量"><a href="#使用gensim模块加载word2vec预先训练好的词向量" class="headerlink" title="使用gensim模块加载word2vec预先训练好的词向量"></a>使用gensim模块加载word2vec预先训练好的词向量</h3><p>加载google news的模型需要注意 <strong>binary=True</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gensim</span><br><span class="line">print(<span class="string">'gensim version: %s'</span> % gensim.__version__)</span><br><span class="line">glove_model = gensim.models.KeyedVectors.load_word2vec_format(<span class="string">'D:\GoogleNews-vectors-negative300.bin'</span>, binary=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><a href="https://www.jianshu.com/p/ecd06ca2ff46" target="_blank" rel="noopener">参考</a></p>
<h3 id="使用gensim模块加载glove预先训练好的词向量"><a href="#使用gensim模块加载glove预先训练好的词向量" class="headerlink" title="使用gensim模块加载glove预先训练好的词向量"></a>使用gensim模块加载glove预先训练好的词向量</h3><p>加载glove预先训练好的词向量</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gensim</span><br><span class="line">print(<span class="string">'gensim version: %s'</span> % gensim.__version__)</span><br><span class="line">glove_model = gensim.models.KeyedVectors(<span class="string">'../model/text/stanford/glove/glove.6B.50d.vec'</span>)</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/makcedward/nlp/blob/master/sample/nlp-word_mover_distance.ipynb" target="_blank" rel="noopener">参考</a></p>
<hr>
<h2 id="spacy模块遇到的问题"><a href="#spacy模块遇到的问题" class="headerlink" title="spacy模块遇到的问题"></a>spacy模块遇到的问题</h2><blockquote>
<p>OSError: [E050] Can’t find model ‘en’. It doesn’t seem to be a shortcut link, a Python package or a valid path to a data directory.</p>
</blockquote>
<p>出错代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spacy</span><br><span class="line">spacy_nlp = spacy.load(<span class="string">'en'</span>)   <span class="comment"># 在本行出错</span></span><br></pre></td></tr></table></figure></p>
<p>解决方案：</p>
<ol>
<li>python -m spacy download en</li>
</ol>
<p><a href="https://blog.csdn.net/qq_27009517/article/details/83825523" target="_blank" rel="noopener">参考</a></p>
<h2 id="No-module-named-‘pyemd’"><a href="#No-module-named-‘pyemd’" class="headerlink" title="No module named ‘pyemd’"></a>No module named ‘pyemd’</h2><p>出错代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> token, headline <span class="keyword">in</span> zip(headline_tokens, news_headlines):</span><br><span class="line">    print(<span class="string">'-'</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">'Comparing to:'</span>, headline)</span><br><span class="line">    distance = glove_model.wmdistance(subject_token, token)		<span class="comment"># 本行代码报错</span></span><br><span class="line">    print(<span class="string">'distance = %.4f'</span> % distance)</span><br></pre></td></tr></table></figure></p>
<h3 id="安装Pyemd-报错"><a href="#安装Pyemd-报错" class="headerlink" title="安装Pyemd 报错"></a>安装Pyemd 报错</h3><blockquote>
<p>安装pyemd 报错【环境配置】出现：Microsoft Visual C++ 14.0 is required 的解决方案</p>
</blockquote>
<p>解决办法：<a href="https://blog.csdn.net/weixin_42057852/article/details/80857948" target="_blank" rel="noopener">参考</a></p>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> 本科毕业设计 </category>
            
            <category> 问题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 毕业设计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[转]如何在论文中优雅的插入伪代码]]></title>
      <url>/2019/04/24/%E8%BD%AC-%E5%A6%82%E4%BD%95%E5%9C%A8%E8%AE%BA%E6%96%87%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E6%8F%92%E5%85%A5%E4%BC%AA%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p><a href="https://www.neusncp.com/user/blog?id=151" target="_blank" rel="noopener">参考</a></p>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> 论文 </category>
            
            <category> 伪代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 伪代码 </tag>
            
            <tag> 论文 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[了解WMD算法]]></title>
      <url>/2019/04/22/%E4%BA%86%E8%A7%A3WMD%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://zhuanlan.zhihu.com/p/60623256" target="_blank" rel="noopener">参考1</a></p>
<p><a href="https://towardsdatascience.com/word-distance-between-word-embeddings-cc3e9cf1d632" target="_blank" rel="noopener">参考2</a></p>
<p><a href="https://markroxor.github.io/gensim/static/notebooks/WMD_tutorial.html" target="_blank" rel="noopener">参考3</a></p>
<p><a href="https://medium.com/@adriensieg/text-similarities-da019229c894" target="_blank" rel="noopener">参考4</a></p>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> 自然语言处理 </category>
            
            <category> 相似度 </category>
            
            <category> 句子相似度 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WMD </tag>
            
            <tag> NLP </tag>
            
            <tag> 自然语言处理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[考研经历分享]]></title>
      <url>/2019/04/17/%E8%80%83%E7%A0%94%E5%8E%86%E7%A8%8B%E5%88%86%E4%BA%AB/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天在群里问了一下考研录取通知书什么时候发放以及邮寄地址，只看到了很多羡慕，最后问题还是没有解决，但是看到了部分学弟学妹希望我分享经验，所以借此机会分享一下自己的考研经验。</p>
<p><a href="http://www.sivan.tech/2019/03/30/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E8%AF%95/">复试环节移步</a></p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>本科双非，平均分80~85之间(不会算)，物联网工程专业，<strong>代码能力稍强</strong>，当时报的是教育大数据国家工程实验室，下面是初试的成绩</p>
<table class="table" align="center" text-align="center"><tr><th></th><th>自己的成绩</th><th>国家线</th></tr><tr><td>政治</td><td>57</td><td>39</td></tr><tr><td>英语一</td><td>43</td><td>39</td></tr><tr><td>数学一</td><td>66</td><td>59</td></tr><tr><td>专业课</td><td>136(学硕里面初试第一)</td><td>59</td></tr></table>



<p>复试总成绩=初试成绩 / 5 <em> 0.6 + 复试成绩 </em> 0.4</p>
<p><strong>复试最后也逆袭了一下，虽然是第一名，但是真的不得不说，调剂过来的还是很厉害的，有川大的，有中南的，河海的，华中农大，川农的</strong></p>
<p>总结：<strong>选择很重要</strong>，就好比我，选择教育大数据国家工程实验室，当时心里就是想捡漏，事实也是如此，而且自己的运气也很好，基础课数学(只做了最近几年的真题)和英语(没做过一套真题，考前两个月背过几天单词)都是没怎么复习的，竟然都过了线！本以为要二战的！</p>
<a id="more"></a>
<h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><p>大概9月开学的时候，自己就匆匆从家里来学校复习考研，一切都是从头开始</p>
<h3 id="基础阶段-09-初-10-15左右"><a href="#基础阶段-09-初-10-15左右" class="headerlink" title="基础阶段(09.初-10.15左右)"></a>基础阶段(09.初-10.15左右)</h3><p>时间大都集中在数学上，每天都是看高数视频，几乎没有时间做练习</p>
<p>高数视频：汤家凤老师的同步(看了20多个，太多了，如果看下去的话看不完)， 接着继续看汤老师的基础视频(边听边整理笔记)，</p>
<p>线性代数：看的是汤家凤老师的线性代数基础</p>
<p>题目：接力题典1800(最后看下来只做了不到20页)</p>
<p><strong>从10月开始我开始看874专业课，首先就是王敬华老师的C语言教材，除了指针和结构体这几章比较多，其他章都是每天1章，然后做练习题，黑底答案，写到错题本上，归纳知识点</strong></p>
<h3 id="强化阶段-10-15-11底"><a href="#强化阶段-10-15-11底" class="headerlink" title="强化阶段(10.15-11底)"></a>强化阶段(10.15-11底)</h3><p>这段时间火力集中在数学的小两门以及专业课的重难点数据结构上(个人认为是重难点，因为代码比较多)</p>
<p>线性代数：汤家凤老师的线性代数强化</p>
<p>概率论：王式安老师的概率论基础和强化</p>
<p><strong>数据结构</strong>：只看了王道的数据结构书和《天勤以及王道的数据结构视频》，边看视频边在笔记本上和书上做笔记</p>
<h3 id="冲刺阶段-12-初-考前"><a href="#冲刺阶段-12-初-考前" class="headerlink" title="冲刺阶段(12.初-考前)"></a>冲刺阶段(12.初-考前)</h3><p>方丈学长买的资料(带的串讲的教学视频没看)只看了C语言和数据结构的笔记</p>
<p>数学真题(近10年)</p>
<p>英语(看王江涛老师的作文模板)</p>
<p>政治(肖8的选择做了，肖4的选择做了，大题全背<strong>考试考了很多很相似的内容，考试很喜欢把你背的答案放到材料里面，但所幸自己背了很多，考试全乱套了，最后自己就全都写上去</strong>)</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>其实回忆一下，自己今年选择+运气&gt;&gt;&gt;&gt;自己的努力(虽然自己都不敢放弃)， 不过也很感激自己能够坚持下来，从去年7月份到今年的3月份，自己瘦了接近50斤，虽然一路很孤独，但庆幸自己没有放弃。</p>
<p>Tips:</p>
<ol>
<li>学长的代码能力比较强(因为参加过创新实验室，帮助老师做过项目，自己搭建博客和GitHub，C语言和数据结构都是自己最擅长的科目，所以可以用很短的时间就迅速补起来，大家与我不同，所以还是要多花时间在上面，尤其是C语言的题目，很多都是课后原题)</li>
<li>千万不要放弃，不要放弃，不要放弃(尤其是公布初试成绩之后，我才看到有几个同学总分是98分，也就是第一天参加完，第二天没再去考试的，可是第一天我也没有和他们差太多)</li>
<li>数学很重要(虽然大学学的还普普通通，但是考研难度可不低)，英语(自己底子也还行，虽然几年没看了，但是之前几个月备战过雅思5.0)</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 考研 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解Numpy中np.meshgeid函数]]></title>
      <url>/2019/04/16/%E7%90%86%E8%A7%A3Numpy%E4%B8%ADnp-meshgeid%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在学习利用Python进行数据分析的时候，遇到介绍的np.meshgrid函数，书上给的解释是：接受两个一维数组，并产生两个二维矩阵(分别对应于两个数组中所有的(x,y)对)</p>
</blockquote>
<p>## </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 坐标向量</span></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 坐标向量</span></span><br><span class="line">b = np.array([<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line"><span class="comment"># 从坐标向量中返回坐标矩阵</span></span><br><span class="line"><span class="comment"># 返回list,有两个元素,第一个元素是X轴的取值,第二个元素是Y轴的取值</span></span><br><span class="line">res = np.meshgrid(a,b)</span><br><span class="line"><span class="comment">#返回结果: [array([ [1,2,3] [1,2,3] ]), array([ [7,7,7] [8,8,8] ])]</span></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/littlehaes/article/details/83543459" target="_blank" rel="noopener">参考</a></p>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 数据分析 </category>
            
            <category> Numpy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Numpy </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 数据挖掘 </tag>
            
            <tag> Data Analysis </tag>
            
            <tag> Data Mining </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 18.04 使用科学代理]]></title>
      <url>/2019/04/09/Ubuntu-18-04-%E4%BD%BF%E7%94%A8%E7%A7%91%E5%AD%A6%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于自己在使用Ubuntu安装FAISS的时候，总是遇到如下问题</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yirufeng@ubuntu:/etc/apt/sources.list.d$ conda install faiss-cpu</span><br><span class="line">conda: error: failed to fetch repodata from 'http://repo.continuum.io/pkgs/pro/linux-64/'</span><br></pre></td></tr></table></figure>
<p>通过Google和百度都没有找到解决方案，最后想尝试一下科学代理，但是网上关于Ubuntu18 搭建科学代理的回答很少，大都是基于Ubuntu 14或者Ubuntu 16</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><blockquote>
<p>说明：shadowsocks-qt5是ubuntu上一个可视化的版本</p>
</blockquote>
<h3 id="安装shadowsocks-qt5"><a href="#安装shadowsocks-qt5" class="headerlink" title="安装shadowsocks-qt5"></a>安装shadowsocks-qt5</h3><ul>
<li>sudo add-apt-repository ppa:hzwhuang/ss-qt5</li>
<li>sudo apt-get update<br>出现如下问题：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yirufeng@ubuntu:~$ sudo apt-get update</span><br><span class="line">命中:1 http://security.ubuntu.com/ubuntu bionic-security InRelease                      </span><br><span class="line">命中:2 http://us.archive.ubuntu.com/ubuntu bionic InRelease                              </span><br><span class="line">忽略:3 http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu bionic InRelease</span><br><span class="line">命中:4 http://us.archive.ubuntu.com/ubuntu bionic-updates InRelease    </span><br><span class="line">命中:5 http://us.archive.ubuntu.com/ubuntu bionic-backports InRelease                  </span><br><span class="line">错误:6 http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu bionic Release</span><br><span class="line">404  Not Found [IP: 91.189.95.83 80]</span><br><span class="line">正在读取软件包列表... 完成</span><br><span class="line">E: 仓库 “http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu bionic Release” 没有 Release 文件。 </span><br><span class="line">N: 无法安全地用该源进行更新，所以默认禁用该源。</span><br><span class="line">N: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节。</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>解决方案</strong>：<br>$ cd /etc/apt/sources.list.d/hzwhuang-ubuntu-ss-qt5-bionic.list<br>修改 hzwhuang-ubuntu-ss-qt5-bionic.list 文件内容为如下：(bionic 是18.04版本代号, xenial 是16.04的版本代号)<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> deb http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu bionic main</span><br><span class="line"><span class="meta">#</span> deb-src http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu bionic main</span><br><span class="line">deb http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu xenial main</span><br><span class="line"><span class="meta">#</span> deb-src http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu bionic main</span><br></pre></td></tr></table></figure></p>
<ul>
<li>执行下面两个命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get update</span><br><span class="line"><span class="meta">$</span> sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> Ubuntu </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> 软件安装 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一次险象迭生的git误操作 回退和回滚]]></title>
      <url>/2019/04/09/%E4%B8%80%E6%AC%A1%E9%99%A9%E8%B1%A1%E8%BF%AD%E7%94%9F%E7%9A%84git%E8%AF%AF%E6%93%8D%E4%BD%9C-%E5%9B%9E%E9%80%80%E5%92%8C%E5%9B%9E%E6%BB%9A/</url>
      <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_39200308/article/details/80691055" target="_blank" rel="noopener">git回退版本</a></p>
<p><a href="https://blog.csdn.net/mynamepg/article/details/79127550" target="_blank" rel="noopener">git回滚(撤销回退)</a></p>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[转]解析Python中的yield关键字]]></title>
      <url>/2019/04/06/%E8%BD%AC-%E8%A7%A3%E6%9E%90Python%E4%B8%AD%E7%9A%84yield%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/mieleizhi0522/article/details/82142856" target="_blank" rel="noopener">参考</a></p>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> 生成器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 生成器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[研究生复试]]></title>
      <url>/2019/03/30/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E8%AF%95/</url>
      <content type="html"><![CDATA[<h1 id="研究生复试"><a href="#研究生复试" class="headerlink" title="研究生复试"></a>研究生复试</h1><h2 id="综合面试"><a href="#综合面试" class="headerlink" title="综合面试"></a>综合面试</h2><p>因为面试占比复试成绩的50%，所以自己比较注重面试前的准备，并且对准备的PPT进行了几次讲解的演练</p>
<ol>
<li>材料给每个老师都准备1份：4/6级成绩单，简历，荣誉证书</li>
<li>PPT避免太多文字性描述，多用图表形象说明一切</li>
<li>简历和PPT上写的东西，自己尽量要熟悉，尤其是当老师问到问题的时候</li>
</ol>
<h4 id="老师问到的两个问题"><a href="#老师问到的两个问题" class="headerlink" title="老师问到的两个问题"></a>老师问到的两个问题</h4><ol>
<li><p>你说你项目中用到了数据库，数据库分为关系型数据库和非关系型数据库，你知道关系数据库的三大范式么</p>
<p><strong> 之前学习过数据库这门课，但是忘记数据库的三大范式了，然后老师追问是你们专业课么，我说是，然后自己根据项目中的数据库设计规范来回答了这个问题，自己当时回答是：自己没有深入原理理解，所以项目中主要是主键，外键约束，还有索引  </strong></p>
</li>
<li><p>你说你了解机器学习的算法，你可以列举机器学习的一个算法么</p>
<p><strong>自己对这个不是很理解，但是之前有学习过一节课，就是讲解感知器设置权重判定是否给申请信用卡的人发信用卡(林轩田机器学习基石的第2章) </strong></p>
</li>
</ol>
<blockquote>
<blockquote>
<a id="more"></a>
</blockquote>
</blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=506196018&auto=1&height=32"></iframe>



<h4 id="老师问其他几个学生的问题"><a href="#老师问其他几个学生的问题" class="headerlink" title="老师问其他几个学生的问题"></a>老师问其他几个学生的问题</h4><p>后来咨询了一下老师，老师不喜欢问专业性强的，因为大家都没老师专业性强，问到底还是不会的</p>
<ol>
<li><p>为什么淘宝上推荐的商品有时候不准</p>
</li>
<li><p>商城的购物车是如何实现的(类似问题，记不太清楚了)，这个是问在一个自我介绍时说自己做过电商项目的同学</p>
</li>
</ol>
<p>如果你的复试参考教材是《算法分析与设计教程》 秦明 课后习题代码请参考<a href="https://github.com/algorithm-skill/AlgorithmAnalysisAndDesignTutorial" target="_blank" rel="noopener">https://github.com/algorithm-skill/AlgorithmAnalysisAndDesignTutorial</a>]()</p>
]]></content>
      
        <categories>
            
            <category> 考研 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 复试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最大团问题-回溯算法]]></title>
      <url>/2019/03/16/%E6%9C%80%E5%A4%A7%E5%9B%A2%E9%97%AE%E9%A2%98-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="引言-一些概念"><a href="#引言-一些概念" class="headerlink" title="引言(一些概念)"></a>引言(一些概念)</h2><p>子图：给定无向图G=(V,E) ，存在图U=($$V_0$$, $$E_0$$)使得$$V_0 \in V$$, 并且$$E_0 \in E$$G=(V,E) ，则称图U是图G的一个子图</p>
<p>完全子图：<strong>也叫团</strong>，完全子图首先是子图，而且该图所有顶点两两都有边相连</p>
<p>最大团：使得顶点数最多的一个团称为最大团</p>
<h2 id="最大团问题"><a href="#最大团问题" class="headerlink" title="最大团问题"></a>最大团问题</h2><h2 id="解题策略"><a href="#解题策略" class="headerlink" title="解题策略"></a>解题策略</h2><p>判断顶点是否可以加入团：当前要加入的顶点与之前已经加入的所有顶点都要有边相连！</p>
<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>一定要格外注意这个限界函数的条件：</strong></p>
<blockquote>
<p>书上的代码(正确的)：if (x[i] &amp;&amp; a[t][i] == 0) {                 //先找已经加入集合的顶点，并且判断边是否存在</p>
<p>自己按照理解写的(错误的)：if (x[i] != 1 || a[i][t] != 1) {         //这个限界函数自己写的，是错误的</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">int</span> a[N][N], n, e;            <span class="comment">//将图用邻接矩阵表示出来， 顶点数，边数</span></span><br><span class="line"><span class="keyword">int</span> x[N], sum;                <span class="comment">//解向量，总人数</span></span><br><span class="line"><span class="keyword">int</span> bestn;                    <span class="comment">//最优总人数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//约束函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Constr</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x[i] &amp;&amp; a[t][i] == <span class="number">0</span>) &#123;                 <span class="comment">//先找已经加入集合的顶点，并且判断边是否存在</span></span><br><span class="line">        <span class="comment">// if (x[i] != 1 || a[i][t] != 1) &#123;         //这个限界函数自己写的，是错误的</span></span><br><span class="line">            tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Constr: %d\n"</span>, tmp);</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Backtrack</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; n) &#123;</span><br><span class="line">        bestn = sum;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Constr(i)) &#123;            <span class="comment">// 满足约束条件</span></span><br><span class="line">        sum += <span class="number">1</span>;</span><br><span class="line">        x[i] = <span class="number">1</span>;</span><br><span class="line">        Backtrack(i+<span class="number">1</span>);</span><br><span class="line">        sum -= <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// x[i] = 0;            //不能放在这里，因为这里是遍历该节点的左子树，并且包括该节点，此时该节点还是可选的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n - i + sum) &gt; bestn)   <span class="comment">//如果满足限界条件，扩展右子树，那么此时该节点就没用了</span></span><br><span class="line">    &#123;</span><br><span class="line">        x[i] = <span class="number">0</span>;</span><br><span class="line">        Backtrack(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入结点个数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入边数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;e);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> u, v;                   <span class="comment">//临时建立图中两个结点的对应关系</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    sum = <span class="number">0</span>, bestn = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="number">100</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="number">100</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= e; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第%d条边的两个端点："</span>, i);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">        a[u][v] = <span class="number">1</span>, a[v][u] = <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"邻接矩阵为：\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, x[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    Backtrack(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, x[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"国王护卫队的总人数为：%d\n"</span>, bestn);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"成员为：\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (x[i] == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n%d\t"</span>, x[i]);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
            <category> 贪心算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 算法设计与分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[背包问题-贪心算法]]></title>
      <url>/2019/03/16/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>假设山洞中有n种宝物，每种宝物都有一定重量w和相应的价值v，老驴运载能力有限，只能运走m重量的宝物，一种宝物只能拿一样，宝物可以分割，那么怎么才能使毛驴运走宝物的价值最大？</p>
<h2 id="解题策略"><a href="#解题策略" class="headerlink" title="解题策略"></a>解题策略</h2><p>策略1：根据物品的重量从小到大排序，依次选择物品进入背包，使得剩余质量消耗慢</p>
<p>策略2：根据物品的价值从大到小排序，优先选择价值大的物品进入背包，使得总价值达到最大</p>
<p>策略3：根据物品的价值与质量的比，即效益比，按照效益比的从大到小优先选入背包</p>
<p><strong>通过列举反例，我们可以推翻策略1,2，   策略3就是我们可以利用求得最优解的策略</strong></p>
<a id="more"></a>
<ol>
<li>初始化数据(<strong>注意记录物品的原始序号，因为按照效益比排列之后，物品的顺序会打乱，最终虽然效益一样，但是物品的编号会不同</strong>)</li>
<li>对物品的效益比进行排序</li>
<li>按照质量剩余多少选择物品</li>
<li>输出效益</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>实例：背包的承重M=20，物品的个数n=3，质量分别为18,15,10。相对应的价值分别为25，24，15</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义装入背包的物品</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> v, m;            <span class="comment">//物品的价值，质量</span></span><br><span class="line">    <span class="keyword">double</span> vm;              <span class="comment">//物品的效益质量比</span></span><br><span class="line">    <span class="keyword">int</span> id;                 <span class="comment">//物品的编号</span></span><br><span class="line">&#125; Goods;</span><br><span class="line"></span><br><span class="line">Goods goods[<span class="number">1000</span>];          <span class="comment">//物品集合</span></span><br><span class="line"><span class="keyword">double</span> numberGoods[<span class="number">1000</span>];    <span class="comment">//物品的份额对应的向量解</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Goods goods[], <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Goods tempGoods = goods[index1];</span><br><span class="line">    goods[index1] = goods[index2];</span><br><span class="line">    goods[index2] = tempGoods;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(Goods goods[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Goods pivot = goods[low];</span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">        <span class="keyword">while</span>((low &lt; high) &amp;&amp; (pivot.vm &lt;= goods[high].vm))</span><br><span class="line">            high--;</span><br><span class="line">        swap(goods, low, high);</span><br><span class="line">        <span class="keyword">while</span>((low &lt; high) &amp;&amp; (pivot.vm &gt;= goods[low].vm))</span><br><span class="line">            low++;</span><br><span class="line">        swap(goods, low, high);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(Goods goods[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">int</span> part = partition(goods, low, high);</span><br><span class="line">        quickSort(goods, low, part<span class="number">-1</span>);</span><br><span class="line">        quickSort(goods, part+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> M;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入背包的承重："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;M);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入物品的数量："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入物品%d的重量和价值："</span>, i);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf %lf"</span>, &amp;goods[i].m, &amp;goods[i].v);</span><br><span class="line">        goods[i].vm = goods[i].v / goods[i].m;</span><br><span class="line">        goods[i].id = i;                            <span class="comment">//记录编号</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    quickSort(goods, <span class="number">1</span>, n);</span><br><span class="line">    <span class="comment">// for(int i = 1; i &lt;= n; i++)</span></span><br><span class="line">    <span class="comment">//     printf("%lf\t", goods[i].vm);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> cm = M;     <span class="comment">//记录背包当前剩余承重</span></span><br><span class="line">    <span class="keyword">double</span> cv = <span class="number">0</span>;  <span class="comment">//记录背包当前价值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span> &amp;&amp; cm &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cm &gt; goods[i].m)</span><br><span class="line">        &#123;</span><br><span class="line">            numberGoods[i] = <span class="number">1</span>;</span><br><span class="line">            cm -= goods[i].m;</span><br><span class="line">            cv += goods[i].v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            numberGoods[i] = (cm / goods[i].m);</span><br><span class="line">            cv += numberGoods[i] * goods[i].v;</span><br><span class="line">            cm = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (numberGoods[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"物品%d的份额为：%lf\n"</span>, goods[i].id, numberGoods[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
            <category> 贪心算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 算法设计与分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[活动选择问题-贪心算法]]></title>
      <url>/2019/03/16/%E6%B4%BB%E5%8A%A8%E9%80%89%E6%8B%A9%E9%97%AE%E9%A2%98-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>设有n个活动的集合E = {1, 2, 3, … n}，其中每个活动都要求用同一资源，例如，演讲会场等。而在同一时间内只能有一个活动能够使用这个资源。每个活动资源i都有一个要求使用这一资源的起始时刻$$s_i和一个结束时刻 f_i $$，并且设定​$$ s_i  &lt;  f_i $$。如果选择了活动i，那么它在半开区间[​$$ s_i ,  f_i $$)内占用资源，如果区间[​$$ s_i ,  f_i $$) 与 区间 [​$$ s_j    f_j $$)不相交，则称活动i与活动j是相容的。也就是说，当​$$ s_i  &gt;= f_j $$ 或者 ​$$ s_j  &gt;= ​$$ f_i ​$$时，活动i与活动j是相容大的。活动安排问题就是要在所给的活动集合中选出最大的相容活动子集合。试设计一算法实现之。</p>
<h2 id="解题策略"><a href="#解题策略" class="headerlink" title="解题策略"></a>解题策略</h2><p>策略1：活动开始早的优先</p>
<p>策略2：活动结束早的优先</p>
<p>策略3：活动持续时间短的优先</p>
<blockquote>
<p>通过列举反例，我们不难发现，策略1和策略3都不是最优策略，因此我们按照策略2进行题解</p>
</blockquote>
<ol>
<li>初始化活动集合，并按照活动结束早的顺序对活动集里的活动进行排序</li>
<li>默认选择第1个活动，然后遍历每个活动，观察当前待选择的这个活动的开始时间是否 大于等于 前面刚刚选择活动的结束时间，如果满足，将该活动对应的下标的解向量置为1</li>
<li>遍历解向量，输出解向量为1的活动，就是我们要求的最大相容活动集合</li>
</ol>
<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> s, f;                <span class="comment">//活动的开始时间和结束时间</span></span><br><span class="line">&#125; Activity;</span><br><span class="line"></span><br><span class="line">Activity activity[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">10000</span>];                   <span class="comment">//解向量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Activity activity[], <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Activity act = activity[index1];</span><br><span class="line">    activity[index1] = activity[index2];</span><br><span class="line">    activity[index2] = act;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(Activity activity[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Activity pivot = activity[low];</span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">        <span class="keyword">while</span>((low &lt; high) &amp;&amp; (pivot.f &lt;= activity[high].f))</span><br><span class="line">            high--;</span><br><span class="line">        swap(activity, low, high);</span><br><span class="line">        <span class="keyword">while</span>((low &lt; high) &amp;&amp; (pivot.f &gt;= activity[low].f))</span><br><span class="line">            low++;</span><br><span class="line">        swap(activity, low, high);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(Activity activity[], <span class="keyword">int</span> low , <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">int</span> actNum = partition(activity, low, high);</span><br><span class="line">        quickSort(activity, low, actNum<span class="number">-1</span>);</span><br><span class="line">        quickSort(activity, actNum+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入活动的个数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入活动%d的开始时间和结束时间："</span>, i);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf %lf"</span>, &amp;activity[i].s,  &amp;activity[i].f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照活动结束时间对活动进行排序</span></span><br><span class="line">    quickSort(activity, <span class="number">1</span>, n);</span><br><span class="line">    x[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = activity[<span class="number">1</span>].f;           <span class="comment">//存储上一个选入活动的完成时间</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (activity[i].s &gt;= temp) &#123;</span><br><span class="line">            x[i] = <span class="number">1</span>;</span><br><span class="line">            temp = activity[i].f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"选择的活动集合有："</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x[i] == <span class="number">1</span>) </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/algorithm-skill/AlgorithmAnalysisAndDesignTutorial/blob/master/%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98/%E7%AC%AC3%E7%AB%A0/3%E6%B4%BB%E5%8A%A8%E5%AE%89%E6%8E%92.java" target="_blank" rel="noopener">活动安排问题</a></p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
            <category> 贪心算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 算法设计与分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[区间覆盖问题-贪心算法]]></title>
      <url>/2019/03/16/%E5%8C%BA%E9%97%B4%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个数轴上有若干个区间(区间端点均为整数)，每个区间的长度均为1，现用整数集M表示区间，且M中的数仅表示各区间的右端点，假设M中有m个元素，现有n条线段(m &gt; n)，试设计一个算法求出用这些线段将所有区间覆盖后的最短距离之和d。例：M = {1, 3, 4, 8, 11, 14}，n = 3</p>
<h2 id="解题策略"><a href="#解题策略" class="headerlink" title="解题策略"></a>解题策略</h2><blockquote>
<p>首先要读懂题意，要用n条线段覆盖所有区间，求n条线段的最短距离和，<strong>自己当时看了半天，最后理解错了，每条线段可以任意长哦，而不是固定的</strong></p>
</blockquote>
<ol>
<li>先假定一条线段覆盖所有区间，求出此时线段的最大长度</li>
<li>然后采用贪心策略，因为是n条线段，所以可以有n-1个间距</li>
<li>将题目中给定的区间进行排序，并且算出相邻的区间的间距(<strong>公式：后一个区间的右端点 - 前一个区间的左端点</strong>)，将间距从小到大排序</li>
<li>用上面一条线段覆盖时的最大长度 <strong>依次 减去间距中的最大值</strong>，一共减去n-1个间距(<strong>因为要n-1条线段</strong>)</li>
<li>剩下的距离就是我们题目要求的最短距离之和d</li>
</ol>
<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> M[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">int</span> dist[<span class="number">10000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[index1];</span><br><span class="line">    arr[index1] = arr[index2];</span><br><span class="line">    arr[index2] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = arr[low];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">        <span class="keyword">while</span>((low &lt; high) &amp;&amp; (pivot &lt;= arr[high]))</span><br><span class="line">            high--;</span><br><span class="line">        swap(arr, low, high);</span><br><span class="line">        <span class="keyword">while</span>((low &lt; high) &amp;&amp; (pivot &gt;= arr[low]))</span><br><span class="line">            low++;</span><br><span class="line">        swap(arr, low, high);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从小到大的快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">int</span> part = partition(arr, low, high);</span><br><span class="line">        quickSort(arr, low, part<span class="number">-1</span>);</span><br><span class="line">        quickSort(arr, part+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入区间个数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入线段条数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入区间%d的右端点："</span>, i);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;M[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对区间右端点进行排序,从小到大</span></span><br><span class="line">    quickSort(M, <span class="number">1</span>, m);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算间距</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m<span class="number">-1</span>; i++)</span><br><span class="line">        <span class="comment">//第i个区间到第i+1个区间的距离</span></span><br><span class="line">        dist[i] = M[i+<span class="number">1</span>] - <span class="number">1</span> - M[i]; </span><br><span class="line"></span><br><span class="line">    quickSort(dist, <span class="number">1</span>, m<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sum =  M[m] - M[<span class="number">1</span>] + <span class="number">1</span>;        <span class="comment">//用来计算覆盖后的最短距离和</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m; i &gt; m-n+<span class="number">1</span>; i--)</span><br><span class="line">        sum -= dist[i<span class="number">-1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最小长度和为：%d\n"</span>, sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/chenguolinblog/article/details/7882316" target="_blank" rel="noopener">区间覆盖问题(思路)</a></p>
<p><a href="https://www.cnblogs.com/Draymonder/p/7215230.html" target="_blank" rel="noopener">区间覆盖问题(思路)</a></p>
<p><a href="https://wenku.baidu.com/view/2717698379563c1ec4da7133.html" target="_blank" rel="noopener">区间覆盖问题(思路 PPT 10页)</a></p>
<p><a href="https://blog.csdn.net/weixin_37605770/article/details/70160342" target="_blank" rel="noopener">区间覆盖问题(代码)</a></p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
            <category> 贪心算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 算法设计与分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[雷达安装问题(贪心算法)]]></title>
      <url>/2019/03/16/%E9%9B%B7%E8%BE%BE%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>假定海岸线是无限长的直线，陆地在海岸线的另一侧，海在海岸线的另外一侧，海上有若干个岛屿，每一个岛屿用海这一侧的一个点表示。现在如果要在海岸线上放置若干个雷达，以便于对岛屿进行侦查，每个雷达观测范围是一个圆，并且每个雷达的观测距离都是dist(即圆的半径为dist)，现使用笛卡尔坐标系，给定海中每个岛屿的位置，以及雷达的观测范围(距离)，试设计一个算法求解出最小的雷达数目，使其能够覆盖海上的全部岛屿</p>
<h2 id="解题策略"><a href="#解题策略" class="headerlink" title="解题策略"></a>解题策略</h2><p>解题思路：采用贪心算法进行解题，</p>
<p>贪心策略：假设每个岛屿都正好处于雷达的范围边缘上</p>
<ol>
<li><p>初始化岛屿个数，雷达范围，每个岛屿的横纵坐标，</p>
</li>
<li><p>根据贪心策略计算出与x轴的交点，也就是这个雷达的坐标(纵坐标为0)</p>
<p>计算公式：sqrt(pow(scan, 2) - pow(island[i].y, 2)) + island[i].x</p>
</li>
</ol>
<blockquote>
<p> 疑问：与x轴可能有两个交点，我们取最右边的那个交点，这样对所有的岛屿都进行了统一</p>
</blockquote>
<ol start="3">
<li><p>依据岛屿的横坐标从小到大，对岛屿进行排序</p>
</li>
<li><p>假设temp为第1个雷达的横坐标，那么计算temp对应的雷达与第2个岛屿的距离 与 扫描范围比较</p>
<blockquote>
<p>如果大于扫描范围，则多放置一个雷达，并且temp置换成下一个岛屿对应雷达的横坐标，继续按照上面方法比较</p>
<p>如果小于扫描范围，temp值不变，直接进入下一个岛屿，比较temp对应的雷达与下一岛屿的距离，继续按照上面方法</p>
</blockquote>
</li>
<li><p>最后输出岛屿个数</p>
</li>
</ol>
<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="采用快速排序的解决方案"><a href="#采用快速排序的解决方案" class="headerlink" title="采用快速排序的解决方案"></a>采用快速排序的解决方案</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  雷达安装问题</span></span><br><span class="line"><span class="comment"> *  解题思路：采用贪心算法进行解题，</span></span><br><span class="line"><span class="comment"> *  贪心策略：假设每个岛屿都正好处于雷达的范围边缘上</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  1. 初始化岛屿个数，雷达范围，每个岛屿的横纵坐标，</span></span><br><span class="line"><span class="comment"> *  2. 根据贪心策略计算出与x轴的交点，也就是这个雷达的坐标(纵坐标为0)</span></span><br><span class="line"><span class="comment"> *     计算公式：sqrt(pow(scan, 2) - pow(island[i].y, 2)) + island[i].x</span></span><br><span class="line"><span class="comment"> *  疑问：与x轴可能有两个交点，我们取最右边的那个交点</span></span><br><span class="line"><span class="comment"> *  3. 依据岛屿的横坐标从小到大，对岛屿进行排序</span></span><br><span class="line"><span class="comment"> *  4. 假设temp为第1个雷达的横坐标，那么计算temp对应的雷达与第2个岛屿的距离 与 扫描范围比较</span></span><br><span class="line"><span class="comment"> *     如果大于扫描范围，则多放置一个雷达，并且temp置换成下一个岛屿对应雷达的横坐标，继续按照上面方法比较</span></span><br><span class="line"><span class="comment"> *     如果小于扫描范围，temp值不变，直接进入下一个岛屿，比较temp对应的雷达与下一岛屿的距离，继续按照上面方法</span></span><br><span class="line"><span class="comment"> *  5. 最后输出岛屿个数</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">//定义每个岛屿的横纵坐标，以及以其为圆心，半径为扫描范围的圆与x轴交点横坐标</span></span><br><span class="line">    <span class="keyword">double</span> x, y, o;</span><br><span class="line">&#125; Island;</span><br><span class="line">Island island[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*对岛屿按照横坐标进行排序*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(Island island[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    Island temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= (n - i + <span class="number">1</span>); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (island[j].x &gt; island[j+<span class="number">1</span>].x) &#123;</span><br><span class="line">                temp = island[j];</span><br><span class="line">                island[j] = island[j+<span class="number">1</span>];</span><br><span class="line">                island[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换两个岛屿</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Island island[], <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Island temp = island[x];</span><br><span class="line">    island[x] = island[y];</span><br><span class="line">    island[y] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(Island island[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Island pivot = island[low];</span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">        <span class="keyword">while</span>((low &lt; high) &amp;&amp; (pivot.x &lt; island[high].x))</span><br><span class="line">            high--;</span><br><span class="line">        swap(island, low, high);</span><br><span class="line">        <span class="keyword">while</span>((low &lt; high) &amp;&amp; (pivot.x &gt; island[low].x))</span><br><span class="line">            low++;</span><br><span class="line">        swap(island, low, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(Island island[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k = partition(island, low, high);</span><br><span class="line">        quickSort(island, low, k<span class="number">-1</span>);</span><br><span class="line">        quickSort(island, k+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> scan;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入雷达的扫描半径："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;scan);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入岛屿的个数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入岛屿%d的横纵坐标："</span>, i);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf %lf"</span>, &amp;island[i].x, &amp;island[i].y);</span><br><span class="line">        island[i].o = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(scan, <span class="number">2</span>) - <span class="built_in">pow</span>(island[i].y, <span class="number">2</span>)) + island[i].x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    quickSort(island, <span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;      <span class="comment">//最开始需要岛屿的个数</span></span><br><span class="line">    <span class="comment">//从第2个岛屿开始判断前面那个岛屿与x轴的交点为圆心的圆，能否覆盖后面这个相邻的这个岛屿</span></span><br><span class="line">    <span class="keyword">double</span> temp = island[<span class="number">1</span>].o;      <span class="comment">//临时存储第1个岛屿的横轴交点，如果后面的岛屿距离大于扫描范围，则以后面那个岛屿的横轴交点为基准，开始判断后面的下一个岛屿</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">pow</span>(temp - island[i].x, <span class="number">2</span>) + <span class="built_in">pow</span>(island[i].y, <span class="number">2</span>)) &gt; (scan * scan)) </span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            temp = island[i].o;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"所需雷达的最小个数为：%d\n"</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="采用选择排序的解决方案"><a href="#采用选择排序的解决方案" class="headerlink" title="采用选择排序的解决方案"></a>采用选择排序的解决方案</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">//定义每个岛屿的横纵坐标，以及以其为圆心，半径为扫描范围的圆与x轴交点横坐标</span></span><br><span class="line">    <span class="keyword">double</span> x, y, o;</span><br><span class="line">&#125; Island;</span><br><span class="line">Island island[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*对岛屿按照横坐标进行排序*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(Island island[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    Island temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= (n - i + <span class="number">1</span>); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (island[j].x &gt; island[j+<span class="number">1</span>].x) &#123;</span><br><span class="line">                temp = island[j];</span><br><span class="line">                island[j] = island[j+<span class="number">1</span>];</span><br><span class="line">                island[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> scan;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入雷达的扫描半径："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;scan);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入岛屿的个数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入岛屿%d的横纵坐标："</span>, i);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf %lf"</span>, &amp;island[i].x, &amp;island[i].y);</span><br><span class="line">        island[i].o = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(scan, <span class="number">2</span>) - <span class="built_in">pow</span>(island[i].y, <span class="number">2</span>)) + island[i].x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    sort(island, n);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;      <span class="comment">//最开始需要岛屿的个数</span></span><br><span class="line">    <span class="comment">//从第2个岛屿开始判断前面那个岛屿与x轴的交点为圆心的圆，能否覆盖后面这个相邻的这个岛屿</span></span><br><span class="line">    <span class="keyword">double</span> temp = island[<span class="number">1</span>].o;      <span class="comment">//临时存储第1个岛屿的横轴交点，如果后面的岛屿距离大于扫描范围，则以后面那个岛屿的横轴交点为基准，开始判断后面的下一个岛屿</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">pow</span>(temp - island[i].x, <span class="number">2</span>) + <span class="built_in">pow</span>(island[i].y, <span class="number">2</span>)) &gt; (scan * scan)) </span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            temp = island[i].o;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"所需雷达的最小个数为：%d\n"</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/cax1165/article/details/52563947" target="_blank" rel="noopener">雷达安装问题</a></p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
            <category> 贪心算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 算法设计与分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[二部图的最大匹配(算法分析与设计教程系列)]]></title>
      <url>/2019/03/04/%E4%BA%8C%E9%83%A8%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D-%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>如果有4个申请读研的学生($s_i$)与4位导师($t_i$)；假设每个导师最多只能招收一名学生，下图表示学生与所申请导师之间的关系；如何分配学生导师以尽可能满足学生的志愿</p>
<figure class="image-box">
                <img src="https://github.com/algorithm-skill/AlgorithmAnalysisAndDesignTutorial/blob/master/%E7%AC%AC7%E7%AB%A0/7.3%E4%BA%8C%E9%83%A8%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/%E4%BA%8C%E9%83%A8%E5%9B%BE%E4%BE%8B%E5%AD%90.png?raw=true" alt="Demo" title class>
                <p>Demo</p>
            </figure>
<p>与此类问题类似的就是求二部图的最大匹配的问题</p>
<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="匹配与最大匹配"><a href="#匹配与最大匹配" class="headerlink" title="匹配与最大匹配"></a>匹配与最大匹配</h3><p>设图G=&lt;V,E&gt;是一个无向图，如果存在边集M为E的子集，并且使得边集M中的所有边都没有公共结点，那么称边集M是无向图G的一个<strong>匹配</strong>；在一个无向图G中边数最多的匹配称为无向图的<strong>最大匹配</strong></p>
<p>已经匹配过的边称为<strong>匹配边</strong>，未匹配的边叫<strong>自由边</strong>，匹配边的两个顶点叫<strong>饱和点</strong>，其他的点叫做<strong>自由点</strong>，如果V中所有的顶点都是饱和点，则称边集M是无向图的<strong>完美匹配</strong></p>
<h3 id="交错轨道，交错回路，增广路径"><a href="#交错轨道，交错回路，增广路径" class="headerlink" title="交错轨道，交错回路，增广路径"></a>交错轨道，交错回路，增广路径</h3><p>交错轨道：一条已匹配过的边和自由边组成的简单路径叫做交错轨道</p>
<p>交错回路：起点和终点相同的交错轨道</p>
<p>增广路径：起点和终点均自由的交错轨道</p>
<p>交错回路的边数一定为偶数</p>
<p>如果交错轨道p是边集M的增广路径，则p的边数一定为奇数，一定不会成为交错回路(因为起点和终点都要自由)</p>
<p>注意：如果边集M是无向图G的一个匹配，那么交错轨道p是边集M的一条增广路径，操作$M⊕p = (M \cup p)-(M \cap p)=(M-p) \cup (p-M)​$，(<strong>异或运算：相同的去掉，不同的加上；通过异或扩大匹配</strong>)说明$M⊕p​$是无向图的一个新匹配</p>
<h3 id="两个定理"><a href="#两个定理" class="headerlink" title="两个定理"></a>两个定理</h3><ol>
<li>无向图G的匹配M是无向图G的最大匹配，当且仅当在G中不包含匹配M的增广路径</li>
<li>设M是无向图G的一个匹配，并且交错轨道p是匹配M的一条增广路径，那么$M⊕p$即是该无向图G的一个大小为$|M⊕p| = |M| + 1$的匹配</li>
</ol>
<h3 id="二部图"><a href="#二部图" class="headerlink" title="二部图"></a>二部图</h3><p>如果无向图G=&lt;V,E&gt;的结点集V可以分为两个子集X和Y，并且满足子集X与子集Y的交集为空集，子集X与子集Y的并集为结点集V，并且无向图G中任意一条边的两个端点，一个在X中，一个在Y中，那么就称图G是一个二部图或者偶图！</p>
<h4 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h4><p><strong>(判定是否是二部图)</strong>无向图G是一个二部图，当且仅当该图没有长度为奇数的回路</p>
<p>注意：如果是二部图才可以利用下面所讲的匈牙利树算法来寻找这个二部图的最大匹配！</p>
<h2 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h2><h3 id="最大匹配的匈牙利算法步骤"><a href="#最大匹配的匈牙利算法步骤" class="headerlink" title="最大匹配的匈牙利算法步骤"></a>最大匹配的匈牙利算法步骤</h3><ol>
<li>从一个初始匹配M开始</li>
<li>每次找一条增广交错路径p</li>
<li>令M &lt;- M⊕E(P)，其中E(P)是p的边集</li>
<li>直到不存在增广交错路径为止</li>
</ol>
<p>书上的描述：首先从一个空匹配M开始，在无向图G中寻找匹配M的一条增广路径p，然后执行M⊕p的操作，这实际上是反转增光路径p中边的作用，即将增广路径p中已经匹配过的边变成自由的边，同时将自由的边变成已经匹配过的边，从而可以得到一个新的匹配M，通过这样一种操作，可以使得这个新的匹配M比旧的匹配边数多1，重复以上操作，直到二部图G不包含匹配M的增广路径为止，此时宾士二部图G的最大匹配。</p>
<p><strong>结论：如果在检索增广路径的过程中，检索到一颗匈牙利树，就可以永久地将其从二部图G中删去，而不会影响检索！</strong></p>
<a id="more"></a>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*下面是构造二部图的最大匹配算法用到的数据类型和数据结构*/</span></span><br><span class="line">NODE node[n];               <span class="comment">/*结点的邻接表*/</span></span><br><span class="line"><span class="keyword">int</span> match[n];               <span class="comment">/*与该元素对应结点匹配的结点编号*/</span></span><br><span class="line"><span class="keyword">int</span> path[n];                <span class="comment">/*与该元素对应结点在交错轨道树上的父结点的编号*/</span></span><br><span class="line">BOOL block[n];              <span class="comment">/*该元素对应结点在交错轨道树上的阻塞标志*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">qnode</span> &#123;</span>      <span class="comment">/*广度优先搜索队列元素*/</span></span><br><span class="line">    <span class="keyword">int</span> v;                  <span class="comment">/*结点的编号*/</span></span><br><span class="line">    <span class="keyword">int</span> tag;                <span class="comment">/*结点在交错轨道树上的作用标记*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">qnode</span> *<span class="title">next</span>;</span>     <span class="comment">/*下一个待搜索的元素*/</span></span><br><span class="line">&#125; QNODE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>            <span class="comment">/*搜索队列*/</span></span><br><span class="line">    QNODE *head;            <span class="comment">/*队列的头指针*/</span></span><br><span class="line">    QNODE *tair;            <span class="comment">/*队列的尾指针*/</span></span><br><span class="line">&#125; QNODE;</span><br><span class="line"></span><br><span class="line">bipartite_match(NODE node[], <span class="keyword">int</span> match[], <span class="keyword">int</span> n1, <span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">int</span> path[n];</span><br><span class="line">    BOOL block[n], flag = TRUE;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)                      <span class="comment">/*匹配M初始化为空集*/</span></span><br><span class="line">        match[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(root = <span class="number">0</span>; root &lt; n1; root++)        <span class="comment">/*检索自由的xvertex结点*/</span></span><br><span class="line">            <span class="keyword">if</span>(match[r] == <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(r &gt;= n1)</span><br><span class="line">            <span class="keyword">break</span>;                              <span class="comment">/*如果不存在自由的xvertex结点，就退出循环*/</span></span><br><span class="line">        <span class="keyword">for</span>(i = n1; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span>(match[r] == <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(r &gt;= n)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(!(hungbfs(r, t, node, match, path, block, n)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)              <span class="comment">/*删除匈牙利树*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(block[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    v = i;</span><br><span class="line">                    delete_edge(v, path[v]);</span><br><span class="line">                    <span class="keyword">while</span>(path[v] != <span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        v = path[v];</span><br><span class="line">                        delete_edge(v, path[v]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;                                   <span class="comment">/*反转增广路径边的作用*/</span></span><br><span class="line">            <span class="keyword">while</span>((t != <span class="number">1</span>) &amp;&amp; (path[t] != <span class="number">-1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                match[t] = path[t];</span><br><span class="line">                match[path[t]] = t;</span><br><span class="line">                t = path[path[t]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">hungbfs</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> &amp;t, NODE node[], <span class="keyword">int</span> match[], <span class="keyword">int</span> path[], BOOL block[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">int</span> tag;</span><br><span class="line">    BOOL flag1;</span><br><span class="line">    BOOL flag = FALSE, *a = <span class="keyword">new</span> BOOL[n];</span><br><span class="line">    NODE *p = node[r].next;</span><br><span class="line">    QNODE *p1;</span><br><span class="line">    QUEUE <span class="built_in">queue</span>;</span><br><span class="line">    initial_Q(<span class="built_in">queue</span>);                       <span class="comment">/*初始化广度优先搜索队列*/</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)                  <span class="comment">/*初始化*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">        a[i] = FALSE;</span><br><span class="line">        block[i] = FALSE;</span><br><span class="line">        path[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[root] = TRUE;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)                        <span class="comment">/*生成树的第一层结点*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        p1 = <span class="keyword">new</span> NODE;</span><br><span class="line">        p1-&gt;v = p-&gt;v;</span><br><span class="line">        p1-&gt;tag = <span class="number">0</span>;</span><br><span class="line">        path[p-&gt;v] = root;</span><br><span class="line">        a[p-&gt;v] = TRUE;</span><br><span class="line">        append_Q[<span class="built_in">queue</span>, p1];</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!empty(<span class="built_in">queue</span>))&#123;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">        p1 = delete_Q(<span class="built_in">queue</span>;                <span class="comment">/*取下搜索队列中的队首元素*/</span></span><br><span class="line">        w = p1-&gt;v;                          <span class="comment">/*此元素的结点编号保存在变量w中*/</span></span><br><span class="line">        tag = p1-&gt;tag;                      <span class="comment">/*此元素的结点标志保存在变量tag中*/</span></span><br><span class="line">        <span class="keyword">delete</span> p1;</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tag == <span class="number">0</span>)                    <span class="comment">/*tag等于0时的处理*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(match[w] == <span class="number">-1</span>)          <span class="comment">/*如果结点w是自由的结点，那么存在着增广路径*/</span></span><br><span class="line">                &#123;</span><br><span class="line">                    flag = TRUE;</span><br><span class="line">                    t = w;                  <span class="comment">/*结点t为增广路径的端点*/</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    v = match[w];</span><br><span class="line">                    p1 = <span class="keyword">new</span> NODE;</span><br><span class="line">                    p1-&gt;v = v;</span><br><span class="line">                    p1-&gt;tag = <span class="number">1</span>;</span><br><span class="line">                    a[v] = TRUE;</span><br><span class="line">                    append_Q[<span class="built_in">queue</span>, p1];</span><br><span class="line">                    path[v] = w;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>                            <span class="comment">/*tag等于1时的处理*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                p = node[w].next;</span><br><span class="line">                flag1 = FALSE;</span><br><span class="line">                <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">                    v = p-&gt;v;</span><br><span class="line">                    <span class="keyword">if</span>(!a[v])</span><br><span class="line">                    &#123;</span><br><span class="line">                        p1 = <span class="keyword">new</span> NODE;</span><br><span class="line">                        P1-&gt;v = v;</span><br><span class="line">                        a[v] = TRUE;</span><br><span class="line">                        p1-&gt;tag = <span class="number">0</span>;</span><br><span class="line">                        path[v] = w;</span><br><span class="line">                        append_Q[<span class="built_in">queue</span>, p1];</span><br><span class="line">                        flag1 = TRUE;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = p-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!flag1)</span><br><span class="line">                    block[w] = TRUE; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 算法分析与设计教程 </category>
            
            <category> Chapter 7 </category>
            
            <category> 7.3 二部图的最大匹配问题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 匈牙利树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[贪心算法的思想以及概念]]></title>
      <url>/2019/03/02/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-1(%E4%BA%8C%E9%83%A8%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D(%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97)/</url>
      <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol>
<li>理解贪心算法的基本概念以及实现机制</li>
<li>掌握贪心算法设计的基本思想，理解贪心算法的基本设计原理</li>
<li>掌握使用贪心策略来解决背包问题、单源点最短路径问题以及最小成本生成树问题等各类问题</li>
<li>掌握如何分析使用贪心算法求解的最优化问题的时间复杂度与空间复杂度</li>
<li>如何运用数学归纳法证明求解此问题所使用的贪心算法得出的解就是最优解(难点)</li>
</ol>
<h2 id="学习指南"><a href="#学习指南" class="headerlink" title="学习指南"></a>学习指南</h2><blockquote>
<p>在我们设计算法解决一个实际问题之前，</p>
<ol>
<li>必须首先分析这个实际问题具有哪些特质</li>
<li>然后依据这些特征选择相应的算法进行求解，往往会获得事半功倍的效果</li>
</ol>
</blockquote>
<p>针对每个可以使用贪心算法进行求解的问题</p>
<ol>
<li>首先熟练掌握贪心策略的设计思路</li>
<li>将其转化为贪心算法</li>
<li>最后用数学归纳法证明按照贪心算法求出的贪心解就是这个最优解</li>
</ol>
<p>注意：这个证明过程是必要的，如果不对贪心算法求解的过程进行证明，只能说明根据这个贪心策略设计的贪心算法得到的解仅仅只是贪心解，并不能说明是最优解！</p>
<h3 id="贪心法证明最优解"><a href="#贪心法证明最优解" class="headerlink" title="贪心法证明最优解"></a>贪心法证明最优解</h3><ol>
<li>按步骤归纳：例如活动选择问题</li>
<li>按规模归纳：例如装载问题</li>
<li>交换论证：例如最小延迟调度</li>
</ol>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><blockquote>
<p>当有这样一类问题，有n个输入，而它的解就是由这n个输入的某个子集组成，只是这个子集必须满足某些实现给定的条件。</p>
</blockquote>
<p>这些必须满足的条件称为<strong>约束条件</strong></p>
<p>将满足这些约束条件的子集称为该问题的<strong>可行解</strong></p>
<p>由于可行解不止一个，为了衡量可行解的优劣，通常会预先给定一些标准，一般以函数形式给出，称为<strong>目标函数</strong></p>
<p>使得目标函数取得极值得可行解称为<strong>最优解</strong></p>
<p>注意：根据约束条件与目标函数的数学模型的特性或求解问题方法的不同，可以细划分为如下类：</p>
<ol>
<li>整数规划问题</li>
<li>线性规划问题</li>
<li>非线性规划问题</li>
<li>动态规划问题</li>
</ol>
<p>尽管各类规划问题都有一些相应的求解方法，但是对于其中某些问题，我们仍然可以使用一种更为直接的方法进行求解，就是<strong>贪心算法</strong></p>
<h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><blockquote>
<p>贪心算法是一种改进了的分级处理方法</p>
</blockquote>
<p>首先根据优化问题的要求，选取一种度量标准，然后按照这种量度标准对这n个输入进行排序，并且按照排好的顺序依次输入每一个量。如果这个输入与当前已经构成的在这种量度意义下的部分最优解组成在一起不可能产生一个可行解，那么我们就不把该输入纳入到这一部分最优解中，这种能够得到某种量度意义下的最优解分级处理方法叫做贪心算法。</p>
<p>注意：将目标函数作为量度标准产生的贪心解也并不一定就是原问题的最优解！</p>
<p><strong>采用贪心算法设计求解原优化问题的最优解的核心问题就是选择能够产生优化问题最优解的最优量度标准</strong>，如果我们可以选择出最优量度标准，那么用贪心算法解决这个问题就会特别有效！</p>
<a id="more"></a>
<h2 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h2><p>贪心算法总是做出在当前看来是最好的选择(局部最优)，也就是说贪心算法并不是从整体最优上加以考虑。当然，我们希望贪心算法求得的最终结果也是整体最优的！</p>
<h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><blockquote>
<p>贪心算法通常用于解决具有最大值或者最小值的最优化问题</p>
</blockquote>
<p>从某一个初始状态开始，依据当前局部的但却不一定是全局的最优策略，并且需要满足问题给出的约束条件，从而能够确保目标函数的值增加最快或者最慢，选择一个可以最快达到问题要求的输入元素，以便尽可能的构成问题的局部最优解！</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">greedy(S,n)</span><br><span class="line">&#123;</span><br><span class="line">    solution = Ø;				<span class="comment">//将初始可行解集设置为空集</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)		</span><br><span class="line">    &#123;</span><br><span class="line">        x = select(S);</span><br><span class="line">        <span class="keyword">if</span>(feasible(solution, x))</span><br><span class="line">            solution = <span class="keyword">union</span>(solution, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> solution;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    开始时，我们将初始可行解集设置为空集，然后采用select按照某种量度标准，从集合S中选择一个输入元素x,并且使用feasible进行判断，在可行解集中添加一个新元素x以后，是否可以组成新的可行解，如果可以，就把x加入到可行解集solution中，同时将其从原来的集合S中删去，如果不行，舍弃元素x,重新从原集合S中选择另一个元素y作为新的输入元素，重复前面的步骤，直到找出一个满足原优化问题的可行解为止！</p>
<p><strong>在设计贪心算法时，其困难在于证明所设计的算法就是真正解决这个问题的最优算法！</strong></p>
<h3 id="适用于贪心法求解的问题具有的两个重要性质"><a href="#适用于贪心法求解的问题具有的两个重要性质" class="headerlink" title="适用于贪心法求解的问题具有的两个重要性质"></a>适用于贪心法求解的问题具有的两个重要性质</h3><ol>
<li>贪心选择性质：待求解最优化问题的全局最优解，可以通过一连串的局部最优选择来实现</li>
<li>最优子结构性质：一个待求解的最优化问题的最优解中包含子问题的最优解</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 算法分析与设计教程 </category>
            
            <category> Chapter 3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows 7 Service Pack 1 and all applicable updates are required to install Python 3.6.4(64-bit)]]></title>
      <url>/2019/03/01/Windows-7-Service-Pack-1-and-all-applicable-updates-are-required-to-install-Python-3-6-4-64-bit/</url>
      <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/c2366994582/article/details/79118549" target="_blank" rel="noopener">参考</a></p>
]]></content>
      
        <categories>
            
            <category> 编程环境 </category>
            
            <category> Windows 7 </category>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Windows 7 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法引论]]></title>
      <url>/2019/02/28/%E7%AE%97%E6%B3%95%E5%BC%95%E8%AE%BA(%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97)/</url>
      <content type="html"><![CDATA[<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ol>
<li>掌握与计算机算法相关的各个名词、术语的含义</li>
<li>了解时间复杂度和空间复杂度的基本概念</li>
<li>理解计算机算法的5个重要特征</li>
<li>了解计算机算法涉及的5个基本内容</li>
<li>掌握计算机频率计数和估算算法时间复杂度的基本方法</li>
</ol>
<hr>
<h2 id="算法的基本概念"><a href="#算法的基本概念" class="headerlink" title="算法的基本概念"></a>算法的基本概念</h2><blockquote>
<p>只能笼统的将算法定义为解决某个确定问题的一种特殊的方法。若对算法做稍许详细一些的非形式化描述，那么算法就是一组有穷的规则，它规定了解决某一特定类型问题的一系列计算方法！</p>
</blockquote>
<h3 id="算法的重要特性"><a href="#算法的重要特性" class="headerlink" title="算法的重要特性"></a>算法的重要特性</h3><blockquote>
<ol>
<li><p>确定性</p>
<p>算法的每一种运算都必须要有明确的定义，每一种运算应该执行怎样的动作必须是清楚地，即没有二义性的！</p>
<p>例如算法中不允许有”将1或2与某个确定的数相加”之类的运算</p>
</li>
<li><p>能行性</p>
<p>一个算法能行指的是算法中有待实现的运算都是基本的运算，即每种运算至少原理上可以由人用纸和笔在有限时间内完成。</p>
<p>整数运算时能行性的一个例子，而实数运算不行，因为实数可能有无限长！</p>
</li>
<li><p>输入</p>
<p>每个算法有0个或多个输入，是在算法开始之前给定的，取自特定的对象集合！</p>
</li>
<li><p>输出</p>
<p>每个算法产生一个或多个输出，这些输出是同输入有某种特定关系的量！</p>
</li>
<li><p>有限性</p>
<p>任何一个算法总在执行有限步的运算之后就停止执行，仅仅满足前面4条特性的一组规则称之为计算过程，不能称之为算法，例如操作操作系统！</p>
<p><strong>不能把任何在有限步内就停机的算法投入计算机中运行，而只能把那些在相当有限步内停机的算法投入计算机中运行。总而言之，应尽可能避免无益耗费计算机的宝贵资源</strong></p>
</li>
</ol>
</blockquote>
<h3 id="算法的基本内容"><a href="#算法的基本内容" class="headerlink" title="算法的基本内容"></a>算法的基本内容</h3><blockquote>
<p>为了制定一个算法，一般需要经过设计、确认、分析、编码、检查、调试、计时等阶段</p>
</blockquote>
<ol>
<li><p>设计算法：使读者学会已经被实践证明的有用的一些基本设计策略</p>
</li>
<li><p>表示算法：基本采用结构程序设计的方式将设计的算法表示出来</p>
</li>
<li><p>确认算法(Algorithm Validation)(确认算法 = 设计正确 + 程序证明)</p>
<p>算法确认：设计出一个算法以后，就应证明它对于所有可能合法的输入都可以给出正确的答案。</p>
<p>确认的目的在于使我们确信这个算法将可以正确无误的工作，而与所采用的程序设计语言无关！</p>
<p>程序证明：在将程序投入到计算机上执行以前，实际上还应该证明该程序是正确的，也就是证明该程序对于所有可能的合法输入都能得到正确的结果。</p>
</li>
<li><p>分析算法(Algorithm Analysis)</p>
<p>算法分析：对于每个算法需要多少时间和存储空间作定量分析。</p>
<p>作用：可以预计所设计的算法可以在怎样的环境中有效的执行，可以知道在最好、最坏及平均情况下执行得怎样，还可以使读者对于解决同一问题的不同算法执行的有效性作出比较判断</p>
</li>
<li><p>测试程序(测试程序 = 调试程序 + 作时空分布图)</p>
<p>调试程序：在抽象数据集上执行程序，以确定是否会产生错误的结果，如果产生错误的结果，就修改源程序</p>
<p>局限性：调试只能指出有错误，而不能指出程序不存在错误。</p>
<p>作时空分布图：首先使用各种给定的数据执行调试认为是正确的程序，然后测定为计算出正确的结果所花的时间和空间，以印证以前所做的分析是否正确和支出实现最优化的有效逻辑位置。</p>
</li>
</ol>
<hr>
<a id="more"></a>
<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><h3 id="计算时间的渐进表示"><a href="#计算时间的渐进表示" class="headerlink" title="计算时间的渐进表示"></a>计算时间的渐进表示</h3><h3 id="常用的整数求和公式"><a href="#常用的整数求和公式" class="headerlink" title="常用的整数求和公式"></a>常用的整数求和公式</h3><blockquote>
<p>以下公式i的取值范围都是从1到n</p>
</blockquote>
<p>$$<br>\sum_{i=1}^n{i} = n(n + 1) / 2 = \theta(n^2)<br>$$</p>
<p>$$<br>\sum_{i=1}^n{(i^2)} = n(n + 1)(2n + 1) / 6 = \theta(n^3)<br>$$</p>
<p>$$<br>\sum_{i=1}^n{i^k} = n^{(k+1)}/(k+1) + n^k/2 + 低次项 = \theta(n^{(k+1)})<br>$$</p>
<h3 id="作时空性能分布图"><a href="#作时空性能分布图" class="headerlink" title="作时空性能分布图"></a>作时空性能分布图</h3><blockquote>
<p>事后测试是在对算法进行了设计、确认、事前分析、编码及调试以后所要做的工作，以确定程序所耗费的精确时间和空间，也就是作时空性能分布图。事后测试与所使用的数字计算机密切相关！</p>
</blockquote>
<h4 id="关于噪声"><a href="#关于噪声" class="headerlink" title="关于噪声"></a>关于噪声</h4><p>注意：如果在一台时钟精确度不高的计算机上运行耗时很小的程序，那么所得到的计时图只不过是一些”噪声”，这样，时间分布性能将会完全淹没在”噪声”中。</p>
<h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ol>
<li>增加输入规模，直至得到算法所需的可靠的时间总量</li>
<li>取足够大的r，将该算法重复执行r次，然后用总时间除以r次</li>
</ol>
<h4 id="如何作出时间性能分布图"><a href="#如何作出时间性能分布图" class="headerlink" title="如何作出时间性能分布图"></a>如何作出时间性能分布图</h4><ol>
<li><p>对于事前分析为θ(g(n))<strong>(意思就是有限个对n的不同取值带入g(n)求和之后， g(n)既是这个和的上界，也是这个和的下届)</strong>计算时间的算法，应该按照输入不断增大其规模的数据集，再利用这些数据集在数字计算机上运行程序，从而得到算法消耗的时间，进而画出这一数量级的时间曲线，倘若这条曲线和事前分析的曲线形状吻合，那么就印证了事前分析的结论！</p>
<p>注意：</p>
<ol>
<li>O是上界符号，存在正常量c和n0，使得对所有n≥n0，有0≤f(n)≤cg(n)</li>
<li>Ω是下界符号，存在正常量c和n0，使得对所有n≥n0，有0≤cg(n)≤f(n)</li>
<li>Θ是同阶记号，存在正常量c1、c2和n0，使得对所有n≥n0，有c1 <em> g(n)≤f(n)≤c2 </em> g(n)</li>
<li>o是低阶记号，对任意正常量c＞0，存在常量n0＞0，使得对所有n≥n0，有0≤f(n)&lt;cg(n)</li>
</ol>
</li>
<li><p>对于事前分析为O(g(n))<strong>(公式为g(n)的表达式)</strong>计算时间的算法，就应该首先在各种数据集规模的范围内分别按照最好情况，最坏情况以及平均情况的数据集独立运行程序，然后做出各种情况的时间曲线，进而根据这些曲线来分析最优的有效逻辑位置。</p>
</li>
</ol>
<p>注意：如果为了解决某一问题，分别设计了多种具有同一数量级的不同算法，或者为了加快某种算法的速度，在同一数量级情况下做了一些改进，那么，只要在输入相同数据集的情况下作出它们的时间分布图就可以比较出哪一个算法的运行效率高一些！</p>
<hr>
<h2 id="最优算法概述"><a href="#最优算法概述" class="headerlink" title="最优算法概述"></a>最优算法概述</h2><blockquote>
<p>在最优算法中，没有考虑空间复杂度，主要原因在于，只要是在一个合理的范围内使用空间，则对于时间的考虑应该比对于空间的考虑更加重要</p>
</blockquote>
<ol>
<li>对于同一个求解问题，存在两个不同算法，在上述意义下都是最优的，那么如果要确定这两个算法中哪一个是真正最优的，<strong>就必须进一步对这两个算法的时间复杂度表达式中的高阶项常数因子进行进一步的比较。</strong>一般说来，常数因子小的算法要优于常数因子大的算法！</li>
<li>另一方面要注意关于时间复杂度渐进阶的确定，与数据规模n及常数因子c的选取有关，<strong>当数据规模小时，时间复杂度阶低的算法不一定比时间复杂度阶高的算法更有效！</strong></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 算法分析与设计教程 </category>
            
            <category> Chapter 1 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Visual Studio Code 控制台无法输入 以及 乱码]]></title>
      <url>/2019/02/07/%E5%85%B3%E4%BA%8EVisual-Studio-Code-%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5-%E4%BB%A5%E5%8F%8A-%E4%B9%B1%E7%A0%81/</url>
      <content type="html"><![CDATA[<h1 id="搭建Visual-Studio-Code的C语言开发环境"><a href="#搭建Visual-Studio-Code的C语言开发环境" class="headerlink" title="搭建Visual Studio Code的C语言开发环境"></a>搭建Visual Studio Code的C语言开发环境</h1><p><a href="https://blog.csdn.net/qq_28581077/article/details/81380341" target="_blank" rel="noopener">参考</a><br><a href="https://pan.baidu.com/s/1h6J7VcFzW6C5qTNm3lWUkg" target="_blank" rel="noopener">资料下载</a></p>
<hr>
<h1 id="Visual-Studio-Code控制台无法输入"><a href="#Visual-Studio-Code控制台无法输入" class="headerlink" title="Visual Studio Code控制台无法输入"></a>Visual Studio Code控制台无法输入</h1><h2 id="问题：Cann’t-edit-in-read-only-editor"><a href="#问题：Cann’t-edit-in-read-only-editor" class="headerlink" title="问题：Cann’t edit in read-only editor!"></a>问题：Cann’t edit in read-only editor!</h2><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>方法一：点击File-&gt;Preferences-&gt;Extensions-&gt;安装run in terminal插件-&gt;重启Visual Studio Code<br>方法二：点击File-&gt;Preferences-&gt;Settings-&gt;搜索runinterminal-&gt;Code-runner下方的选项框点击√</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="https://blog.csdn.net/jingyu333/article/details/82589234" target="_blank" rel="noopener">参考</a></h2><h1 id="Visual-Studio-Code控制台乱码"><a href="#Visual-Studio-Code控制台乱码" class="headerlink" title="Visual Studio Code控制台乱码"></a>Visual Studio Code控制台乱码</h1><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>将项目或程序源代码文件使用GBK的编码格式重新打开</p>
<hr>
<a id="more"></a>
<hr>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Visual Studio Code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows chromedriver' executable needs to be in PATH]]></title>
      <url>/2019/02/04/windows-chromedriver-executable-needs-to-be-in-PATH/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用Python的selenium模拟控制chrome浏览器，报出如下错误</p>
<blockquote>
<p>windows chromedriver’ executable needs to be in PATH</p>
</blockquote>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>更新Chrome浏览器到最新(72.0.3626.81) 64位</li>
<li>下载ChromeDriver, 需下载与Chrome对应的版本<br><a href="https://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">Download</a></li>
<li>将下载后的ChromeDriver解压到Chrome的安装目录中的Application</li>
<li>将Chrome安装目录的Application添加到系统的PATH环境变量中</li>
</ol>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> selenium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> selenium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python异常处理机制]]></title>
      <url>/2019/01/25/Python%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>引言：</p>
</blockquote>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ol>
<li>AssertionError:    断言语句(assert)失败，当assert这个关键字后边的条件为假的时候，程序将会停止并抛出AssertionError异常</li>
<li>AttributeError:    尝试访问未知的对象属性</li>
<li>IndexError:    索引超出序列的范围</li>
<li>KeyError:    字典中查找一个不存在的关键字</li>
<li>NameError:    尝试访问一个不存在的变量</li>
<li>OSError:        操作系统产生的异常</li>
<li>SyntaxError:    Python的语法错误</li>
<li>TypeError:    不同类型间的无效操作</li>
<li>ZeroDivisionError:    除数为0</li>
</ol>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> Basic </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Basic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python中的闭包]]></title>
      <url>/2019/01/25/Python%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<h2 id="闭包-closure"><a href="#闭包-closure" class="headerlink" title="闭包(closure)"></a>闭包(closure)</h2><blockquote>
<p>引言：闭包是函数式编程的一个重要的语法结构，函数式编程是一种编程范式，不同编程语言实现闭包方式不同</p>
</blockquote>
<blockquote>
<p>Python中的闭包：从表现形式上定义为，如果一个内部函数里，对在外部作用域(但不是全局作用域)的变量进行引用，那么内部函数就被认为是闭包</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funX</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">funY</span><span class="params">(y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x * y</span><br><span class="line">    <span class="keyword">return</span> funY</span><br><span class="line">	</span><br><span class="line"><span class="comment"># 闭包函数的使用</span></span><br><span class="line">i = funX(<span class="number">8</span>)</span><br><span class="line">print(i(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以直接写 funX(8)(5)</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>例如上面的代码中，在内部函数funY()中引用了外部作用域的变量y，此时funY()就被认为是闭包</p>
</blockquote>
<blockquote>
<p>注意：</p>
<ol>
<li>不可以在外部函数以外的地方对内部函数进行调用，下面做法是错误的</li>
<li>在闭包中，外部函数的局部变量对应内部函数的局部变量，事实上相当于之前讲的全局变量跟局部变量的对应关系(如果要修改全局变量需要使用global关键字),在内部函数中，只能对外部函数的局部变量进行访问，如果需要进行修改，Python3中可以使用nonlocal关键字</li>
</ol>
</blockquote>
<blockquote>
<ul>
<li>适用于在某种情况下，我们并不方便使用全局变量，所以灵活的使用闭包可以实现替代全局变量。</li>
</ul>
</blockquote>
<a id="more"></a>
<blockquote>
<ul>
<li>例如以下的游戏开发中，我们需要将游戏中角色的移动位置保护起来，不希望被其他函数轻易可以修改到，所以我们选择使用闭包操作，参考代码及注释如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">origin = (<span class="number">0</span>, <span class="number">0</span>)         <span class="comment"># 原点</span></span><br><span class="line">legal_x = [<span class="number">-100</span>, <span class="number">100</span>]   <span class="comment"># x轴的移动范围</span></span><br><span class="line">legal_y = [<span class="number">-100</span>, <span class="number">100</span>]   <span class="comment"># y轴的移动范围</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(pos_x=<span class="number">0</span>, pos_y=<span class="number">0</span>)</span>:</span></span><br><span class="line"><span class="comment"># 初始化位于原点为主    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moving</span><span class="params">(direction, step)</span>:</span></span><br><span class="line">    <span class="comment"># direction参数设置方向，1为向右（向上），-1为向左（向下），0为不移动</span></span><br><span class="line">    <span class="comment"># step参数设置移动的距离</span></span><br><span class="line">        <span class="keyword">nonlocal</span> pos_x, pos_y</span><br><span class="line">        new_x = pos_x + direction[<span class="number">0</span>] * step</span><br><span class="line">        new_y = pos_y + direction[<span class="number">1</span>] * step</span><br><span class="line">        <span class="comment"># 检查移动后是否超出x轴边界</span></span><br><span class="line">        <span class="keyword">if</span> new_x &lt; legal_x[<span class="number">0</span>]:</span><br><span class="line">            pos_x = legal_x[<span class="number">0</span>] - (new_x - legal_x[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">elif</span> new_x &gt; legal_x[<span class="number">1</span>]:</span><br><span class="line">            pos_x = legal_x[<span class="number">1</span>] - (new_x - legal_x[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:            </span><br><span class="line">            pos_x = new_x</span><br><span class="line">        <span class="comment"># 检查移动后是否超出y轴边界</span></span><br><span class="line">        <span class="keyword">if</span> new_y &lt; legal_y[<span class="number">0</span>]:</span><br><span class="line">            pos_y = legal_y[<span class="number">0</span>] - (new_y - legal_y[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">elif</span> new_y &gt; legal_y[<span class="number">1</span>]:</span><br><span class="line">            pos_y = legal_y[<span class="number">1</span>] - (new_y - legal_y[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:            </span><br><span class="line">            pos_y = new_y</span><br><span class="line">        <span class="keyword">return</span> pos_x, pos_y</span><br><span class="line">    <span class="keyword">return</span> moving</span><br><span class="line">    </span><br><span class="line">move = create()</span><br><span class="line">print(<span class="string">'向右移动10步后，位置是：'</span>, move([<span class="number">1</span>, <span class="number">0</span>], <span class="number">10</span>))</span><br><span class="line">print(<span class="string">'向上移动130步后，位置是：'</span>, move([<span class="number">0</span>, <span class="number">1</span>], <span class="number">130</span>))</span><br><span class="line">print(<span class="string">'向左移动10步后，位置是：'</span>, move([<span class="number">-1</span>, <span class="number">0</span>], <span class="number">10</span>))</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p><a href="https://fishc.com.cn/thread-42656-1-1.html" target="_blank" rel="noopener">参考</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> Basic </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Basic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新起点 新开始]]></title>
      <url>/2019/01/04/2019%20%E6%96%B0%E8%B5%B7%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="笑看2018"><a href="#笑看2018" class="headerlink" title="笑看2018"></a>笑看2018</h2><blockquote>
<p>2018年眨眼间过去，这一年自己走来真的荆棘坎坷，还是感谢自己坚持到了最后，虽然没有取得很大的成绩，但还是感悟到了很多</p>
</blockquote>
<h3 id="完成的两件大事"><a href="#完成的两件大事" class="headerlink" title="完成的两件大事"></a>完成的两件大事</h3><ol>
<li>考了雅思，首战5.0</li>
<li>考研（9月份开始真正准备）</li>
</ol>
<h3 id="获得的奖项"><a href="#获得的奖项" class="headerlink" title="获得的奖项"></a>获得的奖项</h3><ol>
<li>全国大学生计算机技能应用大赛高级语言程序设计赛(C语言)三等奖</li>
<li>校级三等奖学金</li>
</ol>
<h3 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h3><ol>
<li>大学上了接近4年，英语都没怎么看过，雅思考试告诉自己英语还是很注重积累的，尤其是中国人的口语和听力，另外就是每个地方都会存在压分，之前一个老师说可以去越南，中国6.5越南可以到7</li>
<li>和自己同届的很多同学都找到了工作，虽然有的不是很好，但是还是可以勉强维持，应聘要有造人造卫星的能力，去了工作只需要拧螺丝就行，和他们相比，自己但是满脸自信自己可以找到好工作，现在愈发感到自己落了好多</li>
<li>这一年自己学到很多新的知识，关于风险投资，关于新能源电动车，关于社会一些变化，风险投资的红杉资本，新能源电动车的蔚来给自己很大的影响</li>
<li>找工作可以多看看那些著名风投投资的新企业，越是很多大风投投的新创业公司，你可以大胆投简历进去</li>
<li>知识很重要，但是学习能力更重要，知识很多值得学习，但是很多，学习能力强的人，更容易成功</li>
</ol>
<hr>
<h2 id="筹划2019"><a href="#筹划2019" class="headerlink" title="筹划2019"></a>筹划2019</h2><h3 id="计划中"><a href="#计划中" class="headerlink" title="计划中"></a>计划中</h3><ol>
<li>按照计划准备复试</li>
<li>如果没有达到自己心仪的院校，准备二战</li>
</ol>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ol>
<li>入门机器学习和数据分析</li>
<li>掌握Python</li>
<li>LeetCode刷题</li>
<li>参加几场知名算法比赛和天池的比赛</li>
<li>读50本书(不限制领域)</li>
<li>拿到驾本</li>
<li>出去走走看看外面的世界</li>
</ol>
<hr>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言遇到的一些问题]]></title>
      <url>/2018/10/28/C%E8%AF%AD%E8%A8%80%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="函数调用时候形参赋值"><a href="#函数调用时候形参赋值" class="headerlink" title="函数调用时候形参赋值"></a>函数调用时候形参赋值</h1><blockquote>
<p>函数调用时，实参复制给形参的时候是<strong><em>从右到左</em></strong>复制, 并不是从左到右</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">compare</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;     </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span> <span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">    compare ( i, i++ );           </span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"i = %d\n"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">compare</span> <span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span> </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"a = %d  b = %d\n"</span>, a, b);</span><br><span class="line">    <span class="keyword">if</span> ( a &gt; b)  </span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">"a &gt; b\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      <span class="keyword">if</span> (a == b)  </span><br><span class="line">          <span class="built_in">printf</span> (<span class="string">"a = b\n"</span>);</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">          <span class="built_in">printf</span> (<span class="string">"a &lt; b\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3</span>  b = <span class="number">2</span></span><br><span class="line">a &gt; b</span><br><span class="line">i = <span class="number">3</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="字符串转换为整型"><a href="#字符串转换为整型" class="headerlink" title="字符串转换为整型"></a>字符串转换为整型</h1><blockquote>
<p>在控制台执行C语言程序的时候有时候需要传递参数但是我们传递的是const char *类型的参数，我们需要获得参数并将其赋值给整型变量的时候就需要进行类型转换,可以使用atoi()函数</p>
</blockquote>
<h2 id="atoi函数介绍"><a href="#atoi函数介绍" class="headerlink" title="atoi函数介绍"></a>atoi函数介绍</h2><p>原型：int  atoi （const  char  *nptr）</p>
<p>用法：#include  &lt;stdlib.h&gt;</p>
<p>功能：将字符串转换成整型数；atoi()会扫描参数nptr字符串，跳过前面的空格字符，直到遇上数字或正负号才开始做转换，而再遇到非数字或字符串时（’\0’）才结束转化，并将结果返回。</p>
<p>说明：atoi()函数返回转换后的整型数。</p>
<p>举例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  编写文本文件显示程序，在命令行中指定文本文件显示的范围。如下所示</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * type filename m n</span></span><br><span class="line"><span class="comment"> * 其中type为执行文件，filename是要显示的文本文件名，</span></span><br><span class="line"><span class="comment"> * m和n指定了显示的范围，即显示从m行到n行的内容</span></span><br><span class="line"><span class="comment"> * 当m和n不指定的时候，显示文件全部内容</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    m = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    n = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, m, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>转载：<a href="https://blog.csdn.net/youbang321/article/details/7887990" target="_blank" rel="noopener">https://blog.csdn.net/youbang321/article/details/7887990</a> </p>
</blockquote>
<hr>
<h1 id="fgets-文件读取函数的一些注意点（变色的重点）"><a href="#fgets-文件读取函数的一些注意点（变色的重点）" class="headerlink" title="fgets()文件读取函数的一些注意点（变色的重点）"></a>fgets()文件读取函数的一些注意点（变色的重点）</h1><p>fgets函数读取文件的时候在一行结束的时候,也<strong><em>会把该行的末尾的’\n’读取进去</em></strong>，并随后加入’\0’，因此<strong>*在使用puts()输出的时候首先会输出字符串中的换行,然后puts()在自动输出的时候也会自动附加换行**</strong></p>
<hr>
<h1 id="strlen-与-sizeof-的区别"><a href="#strlen-与-sizeof-的区别" class="headerlink" title="strlen 与 sizeof 的区别"></a>strlen 与 sizeof 的区别</h1><p>参考: <a href="https://blog.csdn.net/SunnyYoona/article/details/39118465" target="_blank" rel="noopener">https://blog.csdn.net/SunnyYoona/article/details/39118465</a></p>
<hr>
<h1 id="return-与-exit-的区别"><a href="#return-与-exit-的区别" class="headerlink" title="return 与 exit 的区别"></a>return 与 exit 的区别</h1><p>参考: <a href="https://blog.csdn.net/ligeforrent/article/details/45362959" target="_blank" rel="noopener">https://blog.csdn.net/ligeforrent/article/details/45362959</a></p>
<hr>
<h1 id="getch-getche-以及-getchar-的区别"><a href="#getch-getche-以及-getchar-的区别" class="headerlink" title="getch getche 以及 getchar 的区别"></a>getch getche 以及 getchar 的区别</h1><p>参考: <a href="https://blog.csdn.net/cxyol/article/details/628324" target="_blank" rel="noopener">https://blog.csdn.net/cxyol/article/details/628324</a></p>
<hr>
<h1 id="C语言结构体数组中两个元素的值交换"><a href="#C语言结构体数组中两个元素的值交换" class="headerlink" title="C语言结构体数组中两个元素的值交换"></a>C语言结构体数组中两个元素的值交换</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 100</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Score_Tab</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> rank;</span><br><span class="line">    <span class="keyword">char</span> no[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">int</span> time;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Score_Tab</span> <span class="title">score</span>[100], <span class="title">temp</span>;</span></span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, n, s, t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((fp = fopen(<span class="string">"score_tab.txt"</span>, <span class="string">"r"</span>)) == <span class="literal">NULL</span>)              <span class="comment">//打开文件失败</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"can not open source file: score_tab.txt\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从文件中读取数据到结构体数组score中</span></span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp, <span class="string">"%s%s%d%d"</span>, score[n].no, score[n].name, &amp;score[n].score, &amp;score[n].time) != EOF)</span><br><span class="line">        n++;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对结构体数组score按分数降序排列,分数相同则按所用时间升序排列</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k = i;</span><br><span class="line">        <span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span>(score[j].score &gt; score[k].score || score[j].score==score[k].score &amp;&amp; score[j].time &lt; score[k].time)</span><br><span class="line">                k = j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(k != i)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = score[i];</span><br><span class="line">            score[i] = score[k];</span><br><span class="line">            score[k] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排名次</span></span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    s = <span class="number">0</span>;</span><br><span class="line">    t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(score[i].score != s || score[i].time != t)</span><br><span class="line">        &#123;</span><br><span class="line">            j++;</span><br><span class="line">            score[i].rank = j;</span><br><span class="line">            s = score[i].score;</span><br><span class="line">            t = score[i].time;</span><br><span class="line">        &#125;</span><br><span class="line">        score[i].rank = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示排名结果</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%4d %-10s %-20s %3d %3d\n"</span>, score[i].rank, score[i].no, score[i].name, score[i].score, score[i].time);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> CCNU </category>
            
            <category> C </category>
            
            <category> ApplyMaster </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C </tag>
            
            <tag> ApplyMaster </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[带头结点的单链表]]></title>
      <url>/2018/10/07/%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E7%9A%84%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h2 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h2><ol>
<li>void InitLinkList(LinkList *l);                                 //初始化链表</li>
<li>Status ListEmpty(LinkList *l)                                   //判断单链表是否为空</li>
<li>void CreatFormHead(LinkList PHead);                             //头插法建表</li>
<li>void CreatFormTail(LinkList PHead);                             //尾插法建表</li>
<li>LinkList <em>GetElem(LinkList </em>l, int i)                           //按序号查找</li>
<li>LinkList <em>LocateElem(LinkList </em>l, ElemType e)                   //按值查找表结点</li>
<li>void PrintLinkList(LinkList *l)                                 //打印链表</li>
<li>Status DestroyLinkList(LinkList *l)                             //销毁链表</li>
<li>Status DeleteNodeFromLinkList(LinkList *l, int i)               //删除操作</li>
<li>Status InsertNodeToLinkList(LinkList *l, int i, ElemType data)  //插入节点</li>
<li>int GetListLength(LinkList *l)                                  //求链表的长度</li>
</ol>
<hr>
<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void InitLinkList(LinkList *l);                                 //初始化链表</span></span><br><span class="line"><span class="comment">Status ListEmpty(LinkList *l)                                   //判断单链表是否为空</span></span><br><span class="line"><span class="comment">void CreatFormHead(LinkList PHead);                             //头插法建表</span></span><br><span class="line"><span class="comment">void CreatFormTail(LinkList PHead);                             //尾插法建表</span></span><br><span class="line"><span class="comment">LinkList *GetElem(LinkList *l, int i)                           //按序号查找</span></span><br><span class="line"><span class="comment">LinkList *LocateElem(LinkList *l, ElemType e)                   //按值查找表结点</span></span><br><span class="line"><span class="comment">void PrintLinkList(LinkList *l)                                 //打印链表</span></span><br><span class="line"><span class="comment">Status DestroyLinkList(LinkList *l)                             //销毁链表</span></span><br><span class="line"><span class="comment">Status DeleteNodeFromLinkList(LinkList *l, int i)               //删除操作</span></span><br><span class="line"><span class="comment">Status InsertNodeToLinkList(LinkList *l, int i, ElemType data)  //插入节点</span></span><br><span class="line"><span class="comment">int GetListLength(LinkList *l)                                  //求链表的长度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkList</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkList</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*单链表的初始化*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitLinkList</span><span class="params">(LinkList *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((l = (LinkList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkList))) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"初始化内存失败!\n"</span>);</span><br><span class="line">    l-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断单链表是否为空*/</span></span><br><span class="line"><span class="function">Status <span class="title">ListEmpty</span><span class="params">(LinkList *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> l-&gt;next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*头插法建表*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateFormHead</span><span class="params">(LinkList *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    LinkList *node;                                         <span class="comment">//要插入的结点指针</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input a number : "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, x);</span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">-1</span>)                                          <span class="comment">//要插入的数以-1为结束标志</span></span><br><span class="line">    &#123;</span><br><span class="line">        node = (LinkList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkList));</span><br><span class="line">        node-&gt;data = x;</span><br><span class="line">        node-&gt;next = l-&gt;next;</span><br><span class="line">        l-&gt;next = node;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"input a number : "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*尾插法建表*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateFormTail</span><span class="params">(LinkList *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l = (LinkList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkList));</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    LinkList *node, *tail = l;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input the number what you want to insert : "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="keyword">while</span>( x != <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        node = (LinkList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkList));</span><br><span class="line">        node-&gt;data = x;</span><br><span class="line">        tail-&gt;next = node;</span><br><span class="line">        tail = node;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"input the number what you want to insert : "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*按序号查找*/</span></span><br><span class="line"><span class="function">LinkList *<span class="title">GetElem</span><span class="params">(LinkList *l, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList *node = l;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    </span><br><span class="line">    node = node-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(i &gt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*按值查找表结点*/</span></span><br><span class="line"><span class="function">LinkList *<span class="title">LocateElem</span><span class="params">(LinkList *l, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList *node = l-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">NULL</span> &amp;&amp; node-&gt;data != e)              </span><br><span class="line">        node = node-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*求链表的长度*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetListLength</span><span class="params">(LinkList *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    LinkList *node = l-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>((node = node-&gt;next) != <span class="literal">NULL</span>)</span><br><span class="line">        i++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入节点*/</span></span><br><span class="line"><span class="function">Status <span class="title">InsertNodeToLinkList</span><span class="params">(LinkList *l, <span class="keyword">int</span> i, ElemType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断i是否合法</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt;= <span class="number">0</span> || i &gt; GetListLength(l))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    LinkList *node = (LinkList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkList));</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    LinkList *prevNode = GetElem(l, i<span class="number">-1</span>);</span><br><span class="line">    </span><br><span class="line">    node-&gt;next = prevNode-&gt;next;</span><br><span class="line">    prevNode-&gt;next = node;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除操作*/</span></span><br><span class="line"><span class="function">Status <span class="title">DeleteNodeFromLinkList</span><span class="params">(LinkList *l, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt;= <span class="number">0</span> || i &gt; GetListLength(l))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    LinkList *node = GetElem(l, i<span class="number">-1</span>);</span><br><span class="line">    node-&gt;next = node-&gt;next-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(node-&gt;next);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*销毁链表*/</span></span><br><span class="line"><span class="function">Status <span class="title">DestroyLinkList</span><span class="params">(LinkList *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        l = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LinkList *tmp = l-&gt;next, *node;</span><br><span class="line">    <span class="keyword">while</span>((node = tmp) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = node-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    l = <span class="literal">NULL</span>;           <span class="comment">//释放头结点</span></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印链表*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintLinkList</span><span class="params">(LinkList *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"空表!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    LinkList *node = l;</span><br><span class="line">    <span class="keyword">while</span>((node = node-&gt;next) != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, node-&gt;data);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote>
<p>LocateElem记得判断是否为空，再判断元素值是否相等</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 线性表 </category>
            
            <category> 链式表示-顺序表 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线性表 </tag>
            
            <tag> 单链表 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[线性表的顺序表示-顺序表]]></title>
      <url>/2018/10/06/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA-%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h2 id="线性表的基本操作"><a href="#线性表的基本操作" class="headerlink" title="线性表的基本操作"></a>线性表的基本操作</h2><ol>
<li>InitList(&amp;L)            初始化表，构造一个空的线性表</li>
<li>Length(L)               求表长，返回线性表L的长度，也就是L中数据元素的个数</li>
<li>LocateElem(L, e):       按值查找操作。在表L中查找具有给定关键字值的元素</li>
<li>GetElem(L, i);          按位查找操作，获取表L中第i个位置的元素的值</li>
<li>ListInsert(&amp;L, i, e):   插入操作，在表L中第i个位置上指定元素e</li>
<li>ListDelete(&amp;L, i, &amp;e):  删除操作，删除表L中第i个位置的元素，并用e返回删除元素的值</li>
<li>PrintList(L):           输出操作，按前后顺序输出线性表中L的所有元素的值</li>
<li>Empty(L):               判空操作，若L为空表，则返回true,否则返回false</li>
<li>DestroyList(&amp;L):        销毁操作，销毁线性表，并释放线性表L所占有的内存空间</li>
</ol>
<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Status int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElemType int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SeqList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SeqList *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    l-&gt;length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(SeqList *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> l-&gt;length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">LocateElem</span><span class="params">(SeqList *L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; L-&gt;length; i++)</span><br><span class="line">        <span class="keyword">if</span>(L-&gt;data[i] == e)</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">GetElem</span><span class="params">(SeqList *l, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l-&gt;length == <span class="number">0</span> || i &gt; l-&gt;length || i &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> l-&gt;data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SeqList *l, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l-&gt;length == MaxSize || i &lt; <span class="number">1</span> || i &gt; l-&gt;length + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span>(j = l-&gt;length - <span class="number">1</span>; j &gt;= i<span class="number">-1</span>; j--)</span><br><span class="line">        l-&gt;data[j+<span class="number">1</span>] = l-&gt;data[j];</span><br><span class="line">    l-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">    l-&gt;length++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(SeqList *l, <span class="keyword">int</span> i, ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l-&gt;length == <span class="number">0</span> || i &lt; <span class="number">1</span> || i &gt; l-&gt;length)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    *e = l-&gt;data[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(j = l-&gt;length - <span class="number">1</span>; j &gt; i - <span class="number">1</span>; j--)</span><br><span class="line">        l-&gt;data[j<span class="number">-1</span>] = l-&gt;data[j];</span><br><span class="line">    l-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(SeqList *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; l-&gt;length - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, l-&gt;data[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Empty</span><span class="params">(SeqList *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l-&gt;length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyList</span><span class="params">(SeqList *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        l-&gt;length = <span class="number">0</span>;</span><br><span class="line">        l = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SeqList *l;</span><br><span class="line">    InitList(l);</span><br><span class="line">    ListInsert(l, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">    PrintList(l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>参考：<a href="https://blog.csdn.net/liubo_01/article/details/80186552" target="_blank" rel="noopener">https://blog.csdn.net/liubo_01/article/details/80186552</a></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 线性表 </category>
            
            <category> 顺序表示-顺序表 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线性表 </tag>
            
            <tag> 顺序表 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[汉诺塔问题求解]]></title>
      <url>/2018/09/30/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>这里主要讲解汉诺塔问题的一些思路，自己之前了解过汉诺塔问题，虽然只是会做，但并没有整理出自己的思路，因此希望可以写下这篇博文来记录下自己学习汉诺塔问题求解的思路！</p>
</blockquote>
<h2 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h2><p>假设有3根柱子，分别用A、B、C表示，柱子A上套着n个半径大小不同的盘子(盘子中央有小空)，并且大盘子在下面，小盘子在上面。要求将柱子A上的盘子搬到柱子C上，在搬动过程中，可以使用柱子B暂时存放盘子，但无论何时都必须保证大盘子在下面，小盘子在上面，并且每次只能搬动一个盘子。</p>
<blockquote>
<p>以4个盘子为例说明</p>
</blockquote>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ol>
<li>首先找到目前4个最大的盘子也就是A柱子最下面的1号盘子，将1号盘子移动到C(这里只是讲解思路，中间的过程后面讲)</li>
<li>接着继续从现在3个盘子里面找到最大的移动到C</li>
<li>接着继续从现在2个盘子里面找到最大的移动到C</li>
<li>将剩下的最后一个直接移动到C</li>
</ol>
<p>思路如此，不难发现，每次当我们找到目前还没有归位的盘子中最大的放到C中，下次要找的没有归位的盘子中便少了1个盘子，并且也要放到C中，逐层递归，直到最后只剩1个盘子，直接放到C中</p>
<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ol>
<li>我们要将目前没有归位的盘子中最大的盘子从A移动到C，但是B又是一个空柱子，可以作为一个中介，我们可以借助B(其他盘子放到B或C，最终除最大的以外其他的都在B)，把最大的从A移动到C</li>
<li>再从剩下n-1个盘子中，借助A将最大的盘子从B移动到C，</li>
<li>逐层递归，直到最后只剩1个盘子，直接放到C中</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> A, <span class="keyword">char</span> B, <span class="keyword">char</span> C)</span></span>;		<span class="comment">//n为盘子的个数，A为盘子的起点，B为中介，C为盘子放的重点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> x, <span class="keyword">char</span> y)</span></span>;						<span class="comment">//直接将盘子从x移动到y</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"input the number of diskes: "</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"the step to moving %d diskes:\n"</span>, n);</span><br><span class="line">	hanoi(n, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> A, <span class="keyword">char</span> B, <span class="keyword">char</span> C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">		move(A, C);								<span class="comment">//如果只有一个盘子，直接从A移动到C</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		hanoi(n<span class="number">-1</span>, A, C, B);					<span class="comment">//要移动n个中最大的，需要将其他n-1个盘子移动到中介中</span></span><br><span class="line">		move(A, C);								<span class="comment">//最大的盘子从A移动到c</span></span><br><span class="line">		hanoi(n<span class="number">-1</span>, B, A, C);					<span class="comment">//现在只剩下n-1个盘子没有归位了，因此重新开始，n-1个盘子因为都在B上，所以我们需要修改起点，因为要放到C，所以这次中介为A，也要进行修改</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> x, <span class="keyword">char</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%c---------------------&gt; %c\n"</span>, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<p>总结：汉诺塔问题可以理解为递归问题，每次我们只需要找到当前最大的移动到目的地中，逐渐递归，直到最后只剩1个</p>
]]></content>
      
        <categories>
            
            <category> CCNU </category>
            
            <category> C </category>
            
            <category> ApplyMaster </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C </tag>
            
            <tag> ApplyMaster </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[结构体变量内存分配]]></title>
      <url>/2018/09/26/%E7%BB%93%E6%9E%84%E4%BD%93%E5%8F%98%E9%87%8F%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>之前只是最简单的认为结构体中内存的分配与变量和数组在内存中的分配如出一辙,在刚才看王敬华老师“C语言程序设计教程”这本书才知道TC,BC,VC下结构体在内存中分配的区别</p>
</blockquote>
<p>引言：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">double</span> x;</span><br><span class="line">	<span class="keyword">char</span> y;</span><br><span class="line">	<span class="keyword">int</span> z;</span><br><span class="line">&#125; a;</span><br></pre></td></tr></table></figure>
<p>在TC与BC中, int占2字节, 在VC中 int占4字节, double与char和在TC,BC中占的字节数一样分别是8、1字节</p>
<blockquote>
<p>那么，这个结构体在TC,BC与VC中占据的字节一样么？</p>
</blockquote>
<p>肯定是不一样的，一个是各个成员所占内存空间的大小之和，而VC则是根据规则计算出来，并不一定等于各个成员所占内存空间的大小</p>
<hr>
<h2 id="TC-BC环境下的结构体变量内存分配"><a href="#TC-BC环境下的结构体变量内存分配" class="headerlink" title="TC,BC环境下的结构体变量内存分配"></a>TC,BC环境下的结构体变量内存分配</h2><blockquote>
<p>在TC与BC编译环境下，结构体变量所占内存空间的大小等于它所包含的每个成员所占内存空间的大小</p>
</blockquote>
<hr>
<h2 id="VC环境下结构体变量内存分配"><a href="#VC环境下结构体变量内存分配" class="headerlink" title="VC环境下结构体变量内存分配"></a>VC环境下结构体变量内存分配</h2><h3 id="遵循两个规则"><a href="#遵循两个规则" class="headerlink" title="遵循两个规则"></a>遵循两个规则</h3><ol>
<li>默认情况下，VC环境下各成员变量存放的起始地址相对于结构的起始地址的偏移量必须为该成员变量类型所占用的字节数的倍数</li>
<li>为了确保结构体变量所占内存空间的大小为结构体的字节边界数(即该结构体中占用最大空间的类型所占用的字节数)的倍数，所以在为最后一个成员变量申请空间后，还会根据需要自动填充空缺的字节。</li>
</ol>
<table align="center"><thead><tr align="center"><td>类型</td><td>对齐方式(变量存放的起始地址相对于结构的起始地址的偏移量)</td></tr></thead><tbody><tr align="center"><td>char</td><td>偏移量必须为sizeof(char)即1的倍数</td></tr><tr align="center"><td>short</td><td>偏移量必须为sizeof(short)即2的倍数</td></tr><tr align="center"><td>int</td><td>偏移量必须为sizeof(int)即4的倍数</td></tr><tr align="center"><td>long</td><td>偏移量必须为sizeof(long)即4的倍数</td></tr><tr align="center"><td>float</td><td>偏移量必须为sizeof(float)即4的倍数</td></tr><tr align="center"><td>double</td><td>偏移量必须为sizeof(double)即8的倍数</td></tr></tbody></table>



<a id="more"></a>
<hr>
<h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">double</span> x;</span><br><span class="line">	<span class="keyword">char</span> y;</span><br><span class="line">	<span class="keyword">int</span> z;</span><br><span class="line">&#125; a;</span><br></pre></td></tr></table></figure>
<ol>
<li>TC与BC环境中：8 + 1 + 2 = 11字节</li>
<li>VC环境中：8 + 1 + 3(为构成12，也就是为int整数倍而填充) + 4(最后发现是16字节，是占最大字节数double的2倍，故不用填充) = 16字节</li>
</ol>
<h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student_Info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> no[<span class="number">9</span>];			<span class="comment">//学号</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];		<span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">char</span> sex;			<span class="comment">//性别</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> age;	<span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> classno;<span class="comment">//班级</span></span><br><span class="line">	<span class="keyword">float</span> grade;		<span class="comment">//成绩</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ol>
<li>TC与BC环境中：9 + 20 + 1 + 2 + 2 + 4 = 38字节</li>
<li>VC环境中：9 + 20(检查发现9是1的整数倍) + 1 + 2（填充2字节，构成int的4字节的整数倍） + 4 + 4 + 4（最后检查发现是所占用字节数最大int与float类型的整数倍，故不用填充） = 44字节;</li>
</ol>
]]></content>
      
        <categories>
            
            <category> CCNU </category>
            
            <category> C </category>
            
            <category> ApplyMaster </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C </tag>
            
            <tag> ApplyMaster </tag>
            
            <tag> 结构体 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C-字符串]]></title>
      <url>/2018/07/02/C-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>C/C++中，字符串有两种形式：</p>
<ol>
<li>字符串常量    “Hello World”</li>
<li>字符串变量    存放于字符数组中，该字符数组中包含一个’\0’字符，代表字符串的结尾，将用来存放字符串数组的变量称为字符串变量。</li>
</ol>
<h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><p>注意事项：</p>
<ol>
<li>字符串常量内存中所占的字节数等于字符数目+1，因为末尾要存放一个’\0’字符，是二进制数0的ASCII码。C/C++中的字符串都是以’\0’结尾的</li>
<li>“”是合法的字符串常量，该字符串里面是一个空字符串，称为“空串”，但是仍会占用1个字节的存储空间用来存放代表结束为止的’\0’</li>
<li>字符串常量中包括双引号时，双引号应该写为“\””，而“\”字符在字符串出现时，应该写为“\”，“*”和“\”仍只占用1个字节</li>
</ol>
<h2 id="字符串变量"><a href="#字符串变量" class="headerlink" title="字符串变量"></a>字符串变量</h2><ol>
<li>在使用scanf输入字符串时，输入的字符串不可以有空格，例如输入”Fox River”则为”Fox”，也就是将会读取空格前面的那部分。</li>
<li>当我们想要将用户输入的一个或者包含多个空格的一整行当做一个字符串读入时，那么应该用gets(字符串变量)</li>
<li>在C/C++对字符或者字符串进行处理时，碰到’\0’就认为字符串结束了。</li>
</ol>
<h3 id="函数gets"><a href="#函数gets" class="headerlink" title="函数gets"></a>函数gets</h3><p>原型：char <em>gets(char </em>s)<br>功能：将用户输入的一整行，当做一个字符串读入到s中，并在后面自动加上’\0’</p>
<h3 id="函数strcmp"><a href="#函数strcmp" class="headerlink" title="函数strcmp"></a>函数strcmp</h3><p>功能：比较两个字符串是否一致，如果一致，返回0</p>
<h3 id="函数strcpy"><a href="#函数strcpy" class="headerlink" title="函数strcpy"></a>函数strcpy</h3><p>功能：将后面的字符串拷贝到前面那个字符串变量，要注意字符串变量一定要可以装得下后面的字符串。同时要特别注意，拷贝函数会在最后加上一个’\0’</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*书上示例程序*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> szTitle[] = <span class="string">"Prison Break"</span>;</span><br><span class="line">	<span class="keyword">char</span> szHero[<span class="number">100</span>] = <span class="string">"Michael scofield"</span>;</span><br><span class="line">	<span class="keyword">char</span> szPrisonName[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">char</span> szResponse[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"What's the name of the prison in %s?\n"</span>, szTitle);</span><br><span class="line">	<span class="built_in">scanf</span>( <span class="string">"%s"</span>, szPrisonName);</span><br><span class="line">	<span class="keyword">if</span>( <span class="built_in">strcmp</span>( szPrisonName, <span class="string">"Fox-River"</span>) == <span class="number">0</span> ) &#123;		<span class="comment">//如果返回结果为0，则说明比较结果一致 </span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Yeah! Do you love %s?\n"</span>, szHero);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">strcpy</span>( szResponse, <span class="string">"It seems you haven't watched it!\n"</span>);	<span class="comment">//将后面的内容拷贝到前面的数组中。 </span></span><br><span class="line">		<span class="built_in">printf</span>( szResponse);</span><br><span class="line">	&#125;</span><br><span class="line">	szTitle [<span class="number">0</span>] = <span class="string">'t'</span>;</span><br><span class="line">	szTitle [<span class="number">3</span>] = <span class="number">0</span>; <span class="comment">//等效于 szTitle [3] = ‘\0’; 因为C/C++在处理字符串时认为遇到\0就会就认为字符串结束了，因此将会输出tri </span></span><br><span class="line">	<span class="built_in">printf</span>(szTitle);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
 <a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/*编写一个函数，</span><br><span class="line"></span><br><span class="line">	int MyItoa(char *s)</span><br><span class="line">	其功能是将 s 中以字符串形式存放的非负整数，转换成相应整数返回。例如，如果 s</span><br><span class="line">	中存放字符串 “1234”，则该函数的返回值就是 1234。假设 s 中的字符全是数字，且不考虑 s 是空串或 s 太长的情况</span><br><span class="line">*/</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int MyItoa(char *s)</span><br><span class="line">&#123;</span><br><span class="line">	int num = 0,i;</span><br><span class="line">	for(i = 0; i &lt; sizeof(s) - 1; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if((*(s + i) &gt;= &apos;0&apos;) &amp;&amp; (*(s + i) &lt;= &apos;9&apos;))</span><br><span class="line">		&#123;</span><br><span class="line">			num *= 10;</span><br><span class="line">			num += (*(s + i) - 48);</span><br><span class="line">		&#125;</span><br><span class="line">		else if(*(s + i) == &apos;\0&apos;)</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;结束\n&quot;);</span><br><span class="line">			return num;</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;Error\n&quot;);</span><br><span class="line">			return -1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char num[] = &quot;12034&quot;;</span><br><span class="line">	int n = MyItoa(num);</span><br><span class="line">	printf(&quot;%d\n&quot;,n);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> C </category>
            
            <category> Grammar </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C </tag>
            
            <tag> Grammar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[二维数组]]></title>
      <url>/2018/07/01/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote>
<p>数组”元素个数”必须是常数或常量表达式，不能是变量，而且其值必须是正整数。元素个数称作”数组的长度”。</p>
</blockquote>
<h3 id="定义一个数组"><a href="#定义一个数组" class="headerlink" title="定义一个数组"></a>定义一个数组</h3><p>1.T array[N];    //T可以是任何类型，如char,double,int等，N可以是一个正整数或者值为正整数的常量表达式</p>
<blockquote>
<p>这里我们定义了一个数组，数组名字是array,里面存放了N个元素，每个元素都是一个类型为T的变量。这N个元素在内存里面一个挨一个连续存放。array数组占用了一片连续的，大小为N * (sizeof(T))字节的存储空间。<br>下标可以是任何值为整型的表达式。表达式里面可以包含变量、函数调用。下标如为小数时，编译器将自动去尾取整。</p>
</blockquote>
<h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><p>int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};</p>
<p>数组初始化时，</p>
<ol>
<li>{}中值的个数可以少于元素个数，此时相当于只给前面元素赋值，而后面的元素，其存储空间里的每个字节都被写入二进制数0</li>
<li>在定义数组时，如果全部元素赋值，则可以不给出数组元素的个数。</li>
<li>数组元素的下标，可以是任何整数，可以是负数，也可以大于数组元素的个数。当大于数组元素个数的时候，编译时候不会出错。</li>
<li>访问的数组元素并不在数组的存储空间内，这种现象叫做”数组越界”。</li>
<li>如果在跟踪调试程序的时候，发现某个变量变成了一个不正确的值，当想不出为什么这个变量变成该值，要考虑一下数组是如何越界的！</li>
<li>由于数组越界导致指令被修改，甚至会发现在调试器里调试的时候，程序将不按正常次序运行。例如，单步调试程序的时候，明明碰到一个条件为真的if语句，却就是不执行为真的那个分支！</li>
</ol>
<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><blockquote>
<p>二维数组的每一行实际上都是一个一维数组，二维数组存放矩阵特别合适</p>
</blockquote>
<p>二维数组正常赋值和打印：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*输入赋值给二维数组*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scanTwoDimensionArray</span><span class="params">(<span class="keyword">int</span> *num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(*(num + i * ROW + j)));	</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*二维数组按行输出*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTwoDimensionArray</span><span class="params">(<span class="keyword">int</span> *num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\t"</span>,*(num + i * ROW + j));	</span><br><span class="line">		&#125;		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[ROW][COL],i,j;</span><br><span class="line">	scanTwoDimensionArray(a);</span><br><span class="line">	printTwoDimensionArray(a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>二维数组按列输出<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scanTwoDimensionArray</span><span class="params">(<span class="keyword">int</span> *num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(*(num + i * ROW + j)));	</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*数组按列输出*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTwoDimensionArrayByCol</span><span class="params">(<span class="keyword">int</span> *num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; COL; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; ROW; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\t"</span>,*(num + j * ROW + i));	</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[ROW][COL],i,j;</span><br><span class="line">	scanTwoDimensionArray(a);</span><br><span class="line">	printTwoDimensionArrayByCol(a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
            <category> C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C 冒泡排序]]></title>
      <url>/2018/07/01/C-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><blockquote>
<p>使用C语言进行冒泡排序，每次都把当前找到的最大的放到最后一个，所以只需要找前面的n - 1 -i个数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NUM 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	@brief:打印数组的内容</span></span><br><span class="line"><span class="comment">	@param:数组的指针 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> *num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX_NUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\t"</span>,*(num + i));</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	@brief:为数组元素赋值</span></span><br><span class="line"><span class="comment">	@param:数组指针 </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scanArray</span><span class="params">(<span class="keyword">int</span> *num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX_NUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(*(num + i)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	@brief:选择排序算法</span></span><br><span class="line"><span class="comment">	@param:数组指针 </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span> *num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,min,temp;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX_NUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		min = i;</span><br><span class="line">		<span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; MAX_NUM; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(*(num+min) &gt; *(num+j))</span><br><span class="line">			&#123;</span><br><span class="line">				min = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		temp = *(num+i);</span><br><span class="line">		*(num+i) = *(num+min);</span><br><span class="line">		*(num+min) = temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	@brief:冒泡排序</span></span><br><span class="line"><span class="comment">	@param:数组指针 </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbledSort</span><span class="params">(<span class="keyword">int</span> *num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,min;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX_NUM - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; MAX_NUM - <span class="number">1</span> - i; j++)			</span><br><span class="line">		<span class="comment">//这里需要注意是每次都会把最大放到最后，所以每次只需要管前面的就可以 </span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(*(num + j) &gt; *(num + j + <span class="number">1</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				min = *(num + j + <span class="number">1</span>);</span><br><span class="line">				*(num + j + <span class="number">1</span>) = *(num + j);</span><br><span class="line">				*(num + j) = min;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		printArray(num);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num[MAX_NUM];</span><br><span class="line">	scanArray(num);</span><br><span class="line">	bubbledSort(num);</span><br><span class="line">	printArray(num);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
            <category> C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C 选择排序]]></title>
      <url>/2018/06/30/C-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h2 id="排序模板"><a href="#排序模板" class="headerlink" title="排序模板"></a>排序模板</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NUM 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出数组*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; MAX_NUM; i++ )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\t"</span>, *(n + i));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输入数组*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scanArray</span><span class="params">(<span class="keyword">int</span> *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX_NUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(*(n+i)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> an[MAX_NUM];</span><br><span class="line">	scanArray(an);</span><br><span class="line">	printArray(an);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><blockquote>
<p>所谓选择排序，就是每次选择当前的那个与后面未排序的最小的进行交换</p>
</blockquote>
<p>之前自己写的错误的选择排序：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NUM 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出数组*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; MAX_NUM; i++ )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\t"</span>, *(n + i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输入数组*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scanArray</span><span class="params">(<span class="keyword">int</span> *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX_NUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(*(n+i)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> an[MAX_NUM];</span><br><span class="line">	scanArray(an);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i,j,temp,index,min;			<span class="comment">//min存放每次循环最小的数，temp存放临时数字，index存放最小的数对应的索引 </span></span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX_NUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		min = an[i];</span><br><span class="line">		printArray(an);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"min：%d\t"</span>, min);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; MAX_NUM; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(min &gt; an[j])</span><br><span class="line">			&#123;</span><br><span class="line">				min = an[j];</span><br><span class="line">				index = j;	</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"min：%d\t"</span>, min);</span><br><span class="line">		temp = an[i];</span><br><span class="line">		an[i] = min;</span><br><span class="line">		an[index] = temp;</span><br><span class="line">		</span><br><span class="line">		printArray(an);</span><br><span class="line"></span><br><span class="line">			</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	printArray(an);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>改正之后的程序：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NUM 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出数组*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; MAX_NUM; i++ )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\t"</span>, *(n + i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输入数组*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scanArray</span><span class="params">(<span class="keyword">int</span> *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX_NUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(*(n+i)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> an[MAX_NUM];</span><br><span class="line">	scanArray(an);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i,j,temp,index,min;			<span class="comment">//min存放每次循环最小的数，temp存放临时数字，index存放最小的数对应的索引 </span></span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX_NUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		min = an[i];</span><br><span class="line">		index = i;				<span class="comment">//之前的问题就是这里没有初始化的问题 </span></span><br><span class="line"></span><br><span class="line">		printArray(an);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"min：%d\t"</span>, min);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; MAX_NUM; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(min &gt; an[j])</span><br><span class="line">			&#123;</span><br><span class="line">				min = an[j];</span><br><span class="line">				index = j;	</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"min：%d\t"</span>, min);</span><br><span class="line">		temp = an[i];</span><br><span class="line">		an[i] = min;</span><br><span class="line">		an[index] = temp;</span><br><span class="line">		</span><br><span class="line">		printArray(an);</span><br><span class="line"></span><br><span class="line">			</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	printArray(an);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>书上的程序：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NUM 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出数组*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; MAX_NUM; i++ )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\t"</span>, *(n + i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输入数组*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scanArray</span><span class="params">(<span class="keyword">int</span> *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX_NUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(*(n+i)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> an[MAX_NUM];</span><br><span class="line">	scanArray(an);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i,j,temp,index,min;			<span class="comment">//min存放每次循环最小的数，temp存放临时数字，index存放最小的数对应的索引 </span></span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX_NUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		min = i;</span><br><span class="line">		printArray(an);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"1min：%d\t"</span>, min);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; MAX_NUM; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(an[min] &gt; an[j])</span><br><span class="line">			&#123;</span><br><span class="line">				min = j;</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">		temp = an[i];</span><br><span class="line">		an[i] = an[min];</span><br><span class="line">		an[min] = temp;	</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"min：%d\t"</span>, min);</span><br><span class="line">		printArray(an);</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	printArray(an);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
            <category> C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ACM训练-1]]></title>
      <url>/2018/06/29/ACM%E8%AE%AD%E7%BB%83-1/</url>
      <content type="html"><![CDATA[<h2 id="打印点坐标"><a href="#打印点坐标" class="headerlink" title="打印点坐标"></a>打印点坐标</h2><blockquote>
<p>假如在二维坐标系中有很多点，每一个点都有坐标(x,y),打印在以(100,100)为圆心，100为半径里面所有的点的坐标。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 假如在二维坐标系中有很多点，每一个点都有坐标(x,y),</span></span><br><span class="line"><span class="comment"> * 打印在以(100,100)为圆心，100为半径里面所有的点的坐标。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>; x &lt;= <span class="number">200</span>; x++)</span><br><span class="line">  &#123;</span><br><span class="line">    y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(y &lt;= <span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">sqrt</span>(<span class="built_in">pow</span>(x - <span class="number">100</span>, <span class="number">2</span>) + <span class="built_in">pow</span>(y <span class="number">-100</span>, <span class="number">2</span>)) &lt;= <span class="number">100</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; x &lt;&lt; <span class="string">","</span> &lt;&lt; y &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">      y++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="求100以内的水仙花数"><a href="#求100以内的水仙花数" class="headerlink" title="求100以内的水仙花数"></a>求100以内的水仙花数</h2><blockquote>
<p>求1000以内所有的“水仙花数”，”水仙花“是一个三位数，个位，十位，白位的数字的立方和等于本身。例如153 = 1+ 125 + 27</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求1000以内的水仙花数：个位 十位 百位 立方和等于本身</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">999</span>; i &gt;= <span class="number">100</span> &amp;&amp; i &lt;= <span class="number">999</span>; i--)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="built_in">pow</span>(i%<span class="number">10</span>, <span class="number">3</span>) + <span class="built_in">pow</span>(i/<span class="number">100</span>, <span class="number">3</span>) + <span class="built_in">pow</span>(i/<span class="number">10</span>%<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="求质数"><a href="#求质数" class="headerlink" title="求质数"></a>求质数</h2><blockquote>
<p>输入n,求n以内所有的质数，(使用最优算法)</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输入n，求n以内的所有质数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Input a number:"</span>;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n; j++)</span><br><span class="line">  &#123;</span><br><span class="line">    temp = <span class="number">0</span>;   <span class="comment">//表示质数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(j); i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (j % i == <span class="number">0</span>)</span><br><span class="line">	  &#123;</span><br><span class="line">		  temp = <span class="number">1</span>;</span><br><span class="line">		  <span class="keyword">break</span>;</span><br><span class="line">	  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(temp == <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="拆分成正整数的和"><a href="#拆分成正整数的和" class="headerlink" title="拆分成正整数的和"></a>拆分成正整数的和</h2><blockquote>
<p>连续正整数之和，一个整数有可能可以表示为n个连续的正整数之和，写一个程序，输入任意数，找出所有可能的序列</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连续正整数之和，一个整数有可能可以表示为n个连续的正整数之和，</span></span><br><span class="line"><span class="comment"> * 写一个程序，输入任意数，找出所有可能的序列。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">  <span class="comment">//n就是个数，表示的个数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">2</span>; n &lt;= num / <span class="number">2</span>; n++)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num % n == (n * (n - <span class="number">1</span>)) / <span class="number">2</span> % n) <span class="comment">//判断可否被拆分</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = (num * <span class="number">2</span> - (n - <span class="number">1</span>) * n) / (<span class="number">2</span> * n), count = <span class="number">1</span>; count &lt;= n &amp;&amp; i &gt; <span class="number">0</span>; count++,i++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// n * s + (n - 1) * n / 2 = num;</span></span><br><span class="line"><span class="comment">// n * s * 2 + (n - 1) * n = num * 2</span></span><br><span class="line"><span class="comment">// s = (num * 2 - (n - 1) * n) / (2 * n)</span></span><br><span class="line"><span class="comment">// n * s + (n - 1)! = num</span></span><br><span class="line"><span class="comment">//用n个数表示则为 最小的那个数乘以n + (n-1)!</span></span><br><span class="line"><span class="comment">// 条件就是 给定的数 % n = (n * (n - 1)) / 2 % n;</span></span><br><span class="line"><span class="comment">//最小的数 * n + (n * (n - 1)) / 2;</span></span><br><span class="line"><span class="comment">// n ^ 2 - n + 2 * n * 最小的数 / 2 = num</span></span><br><span class="line"><span class="comment">// (num * 2 - 2 * ( n ^ 2 ) + 2 * n) / (2 * n)</span></span><br><span class="line"><span class="comment">// 给定的数 * 2 / n = n - 1 + 2 * 最小的数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="打印九九乘法表"><a href="#打印九九乘法表" class="headerlink" title="打印九九乘法表"></a>打印九九乘法表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印一个9*9乘法表。打印到开发板。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">"*"</span> &lt;&lt; j &lt;&lt; <span class="string">"="</span> &lt;&lt; j * i &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="写一个能输入10个数的冒泡排序"><a href="#写一个能输入10个数的冒泡排序" class="headerlink" title="写一个能输入10个数的冒泡排序"></a>写一个能输入10个数的冒泡排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写一个能输入10个数的冒泡排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num[<span class="number">10</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= <span class="number">9</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(num[i] &gt; num[j])</span><br><span class="line">      &#123;</span><br><span class="line">        temp = num[i];</span><br><span class="line">        num[i] = num[j];</span><br><span class="line">        num[j] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; num[i] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> ACM </category>
            
            <category> Easy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACM </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ primer 中文版 5th edition Unit 5--语句篇]]></title>
      <url>/2018/06/28/c-primer-%E4%B8%AD%E6%96%87%E7%89%88-5th-edition-Unit-5-%E8%AF%AD%E5%8F%A5%E7%AF%87/</url>
      <content type="html"><![CDATA[<blockquote>
<p>对C++中常用的结构和语句进行描述，包括选择结构，顺序结构，循环结构等和一些常用的语句！</p>
</blockquote>
<h2 id="空语句"><a href="#空语句" class="headerlink" title="空语句"></a>空语句</h2><blockquote>
<p>空语句是最简单的语句，只有一个单独的分号</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;<span class="comment">//这是一个空语句</span></span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol>
<li>当我们在coding时，语法上需要一条语句而逻辑上并不需要，此时我们应该使用空语句</li>
<li>当我们在循环的全部工作可以在条件语句中完成时，这时我们就会用到空语句</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*重复读入数据直至到达文件末尾或者某次输入的值等于sought*/</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s &amp;&amp; s != sought)</span><br><span class="line">		;</span><br></pre></td></tr></table></figure>
<p>注意事项：</p>
<ol>
<li>当我们使用空语句的时候应该加上注释，从而让阅读这段代码的人知道我们是故意省略的</li>
<li>当使用空语句的时候应该注意分号的位置。</li>
<li>多余的空语句并非总是乌海的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while(iter != svec.end())	;		//由于多了个分号，循环将会变为死循环</span><br><span class="line">	++iter;							//不属于循环的一部分</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="悬垂else"><a href="#悬垂else" class="headerlink" title="悬垂else"></a>悬垂else</h2><blockquote>
<p>当我们遇到if语句多于else语句时，如何确定哪个if语句和哪个else语句匹配，这个问题便称为悬垂else(dangling else)</p>
</blockquote>
<p>在那些既有if语句又有if else语句中，这是个普遍的问题，不同语言中解决思路不同，C++中，规定else与离他最近的尚未匹配的if匹配，从而消除程序的二义性</p>
<a id="more"></a>
<h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><blockquote>
<p>switch语句对紧跟在后面的表达式求值，可以是一个初始化的变量声明，然后表达式的值转换成整数类型，与每个case的值进行比较</p>
</blockquote>
<p>注意：case标签必须是常量表达式</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(ch)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3.14</span>:	<span class="comment">//错误，case标签不是一个整数</span></span><br><span class="line">	<span class="keyword">case</span> ival:	<span class="comment">//错误，case标签不是一个常量</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="统计元音字母出现次数"><a href="#统计元音字母出现次数" class="headerlink" title="统计元音字母出现次数"></a>统计元音字母出现次数</h3><blockquote>
<p>这里有两种写法，重点关注switch语句中的写法</p>
</blockquote>
<p>写法一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 判断单词中元音字母的个数</span><br><span class="line"> * @return [description]</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	unsigned vowelCnt = 0;</span><br><span class="line">	string str;</span><br><span class="line">	cin &gt;&gt; str;</span><br><span class="line">	while ( !str.empty() )</span><br><span class="line">	&#123;</span><br><span class="line">		for (auto s : str)</span><br><span class="line">		&#123;</span><br><span class="line">			switch (s)</span><br><span class="line">			&#123;</span><br><span class="line">				case &apos;a&apos;:</span><br><span class="line">				case &apos;e&apos;:</span><br><span class="line">				case &apos;i&apos;:</span><br><span class="line">				case &apos;o&apos;:</span><br><span class="line">				case &apos;u&apos;:</span><br><span class="line">					vowelCnt++;</span><br><span class="line">					break;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; vowelCnt;</span><br><span class="line">	return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>上面代码中，几个case连在一起没有break语句，只要ch是元音字母，就会执行上面所述的代码</p>
</blockquote>
<p>写法二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 得到元音字母个数的另一种写法</span><br><span class="line"> * @return [description]</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  string str;</span><br><span class="line">  unsigned int vowelCnt = 0;</span><br><span class="line">  cin &gt;&gt; str;</span><br><span class="line">  if (!str.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    for (auto s : str)</span><br><span class="line">    &#123;</span><br><span class="line">      switch(s)&#123;</span><br><span class="line">        case &apos;a&apos;: case &apos;e&apos;: case &apos;i&apos;: case &apos;o&apos;: case &apos;u&apos;:   //这里可以放到一行，需要注意一下</span><br><span class="line">          vowelCnt ++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; vowelCnt &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意事项：当我们省略case后面的break语句，最好加一段注释说明程序的逻辑</p>
<h3 id="default标签"><a href="#default标签" class="headerlink" title="default标签"></a>default标签</h3><blockquote>
<p>我们在switch语句中写出一个空的deafult语句也是有用的，因为我们可以告诉其他人，我们已经考虑到了默认情况</p>
</blockquote>
<h2 id="异常语句"><a href="#异常语句" class="headerlink" title="异常语句"></a>异常语句</h2><p>throw表达式：throw引发（raise）异常</p>
<p>try语句块内声明的变量在块外部无法访问，特别是在catch子句内也无法访问。</p>
<h3 id="异常的处理过程"><a href="#异常的处理过程" class="headerlink" title="异常的处理过程"></a>异常的处理过程</h3><p>异常发生之后，首先搜索异常附近的函数。没找到匹配的catch语句，终止当前正在寻找的函数的寻找，将会向调用者继续寻找，一步一步进行找，直到找到为止！</p>
<p>注意：<br>1.try语句块内声明的变量无法在外部访问，特别是在catch子句内部也无法访问<br>2.异常中断了程序的正常流程：当程序遇到异常而中断时，一部分程序不会执行，从而导致对象处于无效或者未完成的状态，如果在发生异常时，进行了正常的清理的程序称作异常安全代码<br>3.没有try语句块时发生异常，系统会调用terminate函数并终止当前程序的执行</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改你的程序，使得当第2个数为0时，抛出异常，</span></span><br><span class="line"><span class="comment"> * 先不要设定catch语句，运行程序并真的为除数输入0</span></span><br><span class="line"><span class="comment"> * @return [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1, num2;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; num1 &gt;&gt; num2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(num2 == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> runtime_error(<span class="string">"Exception：num2 must not be Zero."</span>);</span><br><span class="line">            <span class="keyword">double</span> num3 = <span class="number">1.0</span> * num1 / num2;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"The result is "</span> &lt;&lt; num3;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (runtime_error err) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; err.what() &lt;&lt; <span class="string">"\nTry again? Enter y or n"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">char</span> c;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">cin</span> || c == <span class="string">'n'</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="what-函数"><a href="#what-函数" class="headerlink" title="what()函数"></a>what()函数</h3><blockquote>
<p>what函数返回c风格的字符串的内容与异常对象的类型有关，如果异常类型是一个字符串初始值，则返回该字符串，对于其他无初始值的异常类型来说，what返回的内容由编译器决定</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
            <category> Grammar </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ primer 中文版 5th edition Unit 1]]></title>
      <url>/2018/06/26/c-prime-%E4%B8%AD%E6%96%87%E7%89%88-prime-5th-edition-Unit-1/</url>
      <content type="html"><![CDATA[<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>缓冲区：内存中的一个存储数据的区域。IO设施通常会将数据放到缓冲区，我们可以显式的刷新缓冲区来将缓冲区中的数据输出IO设备。默认情况下，&gt;cin会刷新cout&gt;程序非正常终止也会刷新cout<br>cerr：一个ostream对象，关系到标准错误处理，默认情况下，写入到cerr的数据是不缓冲的。<br>clog：一个ostream对象，关系到标准错误。默认情况下，写到clog的数据是缓冲的。通常用于一个日志文件中。<br>.运算符：点运算符，左侧为一个类类型对象，右侧为类类型对象的一个成员名字。<br>::运算符：作用域运算符，用在访问命名空间中的名字<br>&lt;&lt;运算符：输出运算符，表示将右侧对象写入到标准输出中<br>“&gt;&gt;”运算符：输入运算符，表示将左侧标准输入到右侧对象中</p>
<h2 id="读取数量不定的输入数据"><a href="#读取数量不定的输入数据" class="headerlink" title="读取数量不定的输入数据"></a>读取数量不定的输入数据</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取数量不定的输入数据</span></span><br><span class="line"><span class="comment"> * @return [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>, value = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//读取数据直到遇到文件尾（可以是正常的文件结束符，也可以是输入错误），计算所有读入的值的和</span></span><br><span class="line">  <span class="comment">//从键盘输入文件结束符：win下是ctrl + z然后按Enter或Return键</span></span><br><span class="line">  <span class="keyword">while</span> (  <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; value )</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  //当使用istream对象作为条件时，其效果是检测流的状态，如果流是有效的，</span></span><br><span class="line"><span class="comment">  //当使用那么就会检测成功，当遇到一个错误输入(输入不是整数)或者文件结束符，</span></span><br><span class="line"><span class="comment">  //就会变为无效，将会使得条件为假</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    sum += value; <span class="comment">//等价于sum = sum + value;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Sum is:"</span> &lt;&lt; sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>大多数系统中，main()的返回值被用来指示状态，返回0表示成功，非0返回的值的含义由系统进行定义，通常用来指出错误类型</li>
<li>使用endl 与 \n 的区别就是：endl会刷新缓冲区，使得栈中的东西重新刷新一次，将会效率低下，endl除了\n还有flush的意思</li>
</ol>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
            <category> Grammar </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ERROR Deployer not found: git]]></title>
      <url>/2018/06/26/ERROR-Deployer-not-found-git/</url>
      <content type="html"><![CDATA[<h2 id="ERROR-Deployer-not-found-git"><a href="#ERROR-Deployer-not-found-git" class="headerlink" title="ERROR Deployer not found: git"></a>ERROR Deployer not found: git</h2><blockquote>
<p>使用 hexo d 命令部署博客到GitHub或其他平台时，遇到”ERROR Deployer not found: git”</p>
</blockquote>
<p>解决方案：npm install –save hexo-deployer-git</p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[流程执行与输入]]></title>
      <url>/2017/12/08/%E6%B5%81%E7%A8%8B%E6%89%A7%E8%A1%8C%E4%B8%8E%E8%BE%93%E5%85%A5/</url>
      <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>由于博主最近开始研究机器学习，第一个首要任务便是学习Python的基本语法，因为很多机器学习库都是基于Python的，这里记录了自己的首个Python学习日志，供自己和初学者学习！</p>
<blockquote>
<p>声明：由于博主自己使用的是Python3之后的，所以代码都是基于Python3的</p>
</blockquote>
<h2 id="一个简单的入门程序"><a href="#一个简单的入门程序" class="headerlink" title="一个简单的入门程序"></a>一个简单的入门程序</h2><p>记得自己之前在看别人写好的简历上发现了一句牛逼的话语：精通各种语言的HelloWorld编程。。。。。这里也是以一个Python中的Hello World程序来介绍</p>
<p>hello.py代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">-*-coding:utf<span class="number">-8</span>-*-</span><br><span class="line">print(<span class="string">"Hello World!"</span>);</span><br></pre></td></tr></table></figure></p>
<p>首先，第3行代码用来打印”Hello World”，第2行代码指定解释器我们使用UTF-8编码，第1行代码是当我们希望在Linux下面希望像shell脚本一样执行Python脚本(如下)，此时我们就需要指定Python的解释器：</p>
<blockquote>
<p>./hello.py</p>
</blockquote>
<h2 id="Python中的注释"><a href="#Python中的注释" class="headerlink" title="Python中的注释"></a>Python中的注释</h2><p>在我们学习了一个入门程序之后，我们最迫切的便是每个编程语言的注释，尤其是对于我们自己不太理解的地方，我们往往会在代码附近通过注释做上笔记</p>
<ol>
<li><h1 id="表示单行注释，Python会把Python后面的内容全部注释"><a href="#表示单行注释，Python会把Python后面的内容全部注释" class="headerlink" title="表示单行注释，Python会把Python后面的内容全部注释"></a>表示单行注释，Python会把Python后面的内容全部注释</h1></li>
<li>‘’’ 或 “”” ，三个单引号或者三个双引号，用来表示多行注释，当然这里也可以是单行注释（当我们’’’的开始和结束都写在一行的时候）</li>
</ol>
<p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里是单行注释</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">这里表示多行注释</span></span><br><span class="line"><span class="string">这里表示多行注释</span></span><br><span class="line"><span class="string">这里表示多行注释</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'''这里也可以表示单行注释'''</span></span><br></pre></td></tr></table></figure></p>
<h3 id="三个单引号或者三个双引号的额外用处："><a href="#三个单引号或者三个双引号的额外用处：" class="headerlink" title="三个单引号或者三个双引号的额外用处："></a>三个单引号或者三个双引号的额外用处：</h3><p>例子1：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">"请输入姓名："</span>);</span><br><span class="line">age = int(input(<span class="string">"请输入年龄："</span>));        </span><br><span class="line">job = input(<span class="string">"请输入工作："</span>);</span><br><span class="line">salary = input(<span class="string">"请输入薪水："</span>);</span><br><span class="line"></span><br><span class="line">output = <span class="string">'''-----------info of %s-----</span></span><br><span class="line"><span class="string">Name:   %s</span></span><br><span class="line"><span class="string">Age:    %d                          </span></span><br><span class="line"><span class="string">Job:    %s</span></span><br><span class="line"><span class="string">Salary: %s</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">print(output % (name, name, age, job, salary));</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>例子2：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">"请输入姓名："</span>);</span><br><span class="line">age = int(input(<span class="string">"请输入年龄："</span>));        </span><br><span class="line">job = input(<span class="string">"请输入工作："</span>);</span><br><span class="line">salary = input(<span class="string">"请输入薪水："</span>);</span><br><span class="line"></span><br><span class="line">info2 = <span class="string">'''</span></span><br><span class="line"><span class="string">---------------info of $&#123;_name_&#125;    --------------</span></span><br><span class="line"><span class="string">Name:   &#123;_name_&#125;</span></span><br><span class="line"><span class="string">Age:    &#123;_age_&#125;</span></span><br><span class="line"><span class="string">Job:    &#123;_job_&#125;</span></span><br><span class="line"><span class="string">Salary: &#123;_salary_&#125;</span></span><br><span class="line"><span class="string">'''</span>.format(_name_=name,_age_=age,_job_=job,_salary_=salary);</span><br><span class="line">print(info2);</span><br></pre></td></tr></table></figure></p>
<p>例子3：根据顺序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">"请输入姓名："</span>);</span><br><span class="line">age = int(input(<span class="string">"请输入年龄："</span>));        </span><br><span class="line">job = input(<span class="string">"请输入工作："</span>);</span><br><span class="line">salary = input(<span class="string">"请输入薪水："</span>);</span><br><span class="line"></span><br><span class="line">info3 = <span class="string">'''</span></span><br><span class="line"><span class="string">---------------info of $&#123;0&#125;    --------------</span></span><br><span class="line"><span class="string">Name:   &#123;0&#125;</span></span><br><span class="line"><span class="string">Age:    &#123;1&#125;</span></span><br><span class="line"><span class="string">Job:    &#123;2&#125;</span></span><br><span class="line"><span class="string">Salary: &#123;3&#125;</span></span><br><span class="line"><span class="string">'''</span>.format(name,age,job,salary);</span><br><span class="line">print(info3);</span><br></pre></td></tr></table></figure></p>
<p>例子4：使用拼接<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">"请输入姓名："</span>);</span><br><span class="line">age = int(input(<span class="string">"请输入年龄："</span>));        </span><br><span class="line">job = input(<span class="string">"请输入工作："</span>);</span><br><span class="line">salary = input(<span class="string">"请输入薪水："</span>);</span><br><span class="line"></span><br><span class="line">info4 = <span class="string">'''</span></span><br><span class="line"><span class="string">---------------info of '''</span> + name +  <span class="string">'''</span></span><br><span class="line"><span class="string">Name：'''</span>    +   name    +   <span class="string">'''</span></span><br><span class="line"><span class="string">Age：'''</span> +   str(age)     +   <span class="string">'''</span></span><br><span class="line"><span class="string">Job：'''</span> +   job     +   <span class="string">'''</span></span><br><span class="line"><span class="string">Salary：'''</span>  +   salary  +   <span class="string">'''</span></span><br><span class="line"><span class="string">'''</span>;</span><br><span class="line">print(info4);</span><br></pre></td></tr></table></figure></p>
<p>注意：对于字符串，官方不建议采用字符串拼接的方式，因为每次字符串拼接都会额外开辟一块内存，对于拼接次数过多，不建议使用！</p>
<hr>
<h2 id="接收用户的输入"><a href="#接收用户的输入" class="headerlink" title="接收用户的输入"></a>接收用户的输入</h2><h3 id="接受用户普通的输入"><a href="#接受用户普通的输入" class="headerlink" title="接受用户普通的输入"></a>接受用户普通的输入</h3><p>Python可以使用input()函数来接受用户的输入，但是在Python2中还可以使用raw_input()用来获取用户的输入，等同于Python3中的input()，<strong>并且input()在python2中将会根据用户的输入自动决定类型，而不像Python3一样接受用户输入之后一定是字符串类型。</strong></p>
<p>代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#将用户输入的内容赋值给username,并且username将会是字符串</span></span><br><span class="line">username = input(<span class="string">"Please input your username："</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果在Python2中，我们可以使用如下代码，等同于Python3中的input()</span></span><br><span class="line"><span class="comment"># username2 = raw_input("Please input your username：");</span></span><br></pre></td></tr></table></figure></p>
<p>Python2中的代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = raw_input(<span class="string">"Please input your username:"</span>);</span><br><span class="line">Please input your username:aaa</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'aaa'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = input();</span><br><span class="line"><span class="string">"dd"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'dd'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(a));</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = input();</span><br><span class="line"><span class="number">122</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(a));</span><br><span class="line">&lt;type <span class="string">'int'</span>&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>
<p>可以看出，在Python3中，input()将会得到一个字符串，等同于Python2中的raw_input()，但是在Python2中，当我们采用input()函数的时候，如果用户输入了双引号或者单引号，那么将会是一个字符串；如果用户输入的是纯数字，那么将会得到一个整形的数据！</p>
<h3 id="接收用户的特殊输入（不可见输入）"><a href="#接收用户的特殊输入（不可见输入）" class="headerlink" title="接收用户的特殊输入（不可见输入）"></a>接收用户的特殊输入（不可见输入）</h3><blockquote>
<p>当我们需要用户输入一些敏感词的时候，我们希望不会以明文的形式显示，而是希望能够以特别的方式进行展示，例如当我们输入密码的时候，并不会将我们输入的密码进行显示！</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> getpass;</span><br><span class="line">username = input(<span class="string">"Please input your username："</span>);</span><br><span class="line">password = getpass.getpass(<span class="string">"Please input your password："</span>);</span><br><span class="line">print(username, password);</span><br></pre></td></tr></table></figure>
<p>需要注意的是：由于Pycharm中不支持这样输入密码，因此我们需要进入该Python文件所在目录，执行Python test.py，当我们输入密码的时候，我们就可以看到效果</p>
<hr>
<h2 id="Python中的类型转换"><a href="#Python中的类型转换" class="headerlink" title="Python中的类型转换"></a>Python中的类型转换</h2><p>由于input()在Python3中将会返回一个字符串，所以即使我们输入了纯数字，也会被识别为一个字符串，因此我们需要进行类型转换。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">num1 = input(<span class="string">"Please input first number"</span>);</span><br><span class="line">print(type(num1));    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换为一个整形数据</span></span><br><span class="line">num1 = int(num1);</span><br><span class="line">print(type(num1));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将整形数据转换为一个字符串</span></span><br><span class="line">num1 = str(num1);</span><br><span class="line">print(type(num1));</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Please input first number：<span class="number">5</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">str</span>'&gt;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><h3 id="最基本的if–else语句"><a href="#最基本的if–else语句" class="headerlink" title="最基本的if–else语句"></a>最基本的if–else语句</h3><p>当我们只有一个分支的时候我们只需要使用一个分支语句，也就是if-else语句</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">username = input(<span class="string">"请输入用户名："</span>);</span><br><span class="line">password = input(<span class="string">"请输入密码："</span>);</span><br><span class="line"><span class="comment"># password = getpass.getpass("请输入密码：");   #这句话在pycharm中不好使，需要手动进入目录使用命令行执行，所以这里进行了注释</span></span><br><span class="line">print(username, password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面实现一个逻辑判断，判断用户名和密码正确与否</span></span><br><span class="line">_username = <span class="string">"admin"</span>;</span><br><span class="line">_password = <span class="string">"admin"</span>;</span><br><span class="line"><span class="keyword">if</span> _username == username <span class="keyword">and</span> _password == password:</span><br><span class="line">    print(<span class="string">"Welcome &#123;name&#125; login...."</span>.format(name=username));</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Invalid username or password"</span>);</span><br></pre></td></tr></table></figure>
<p>注意：我们在Python中使用if语句，不仅仅需要在if和else后面的语句后面加上1个冒号；更重要的是我们在写if和else的子句的时候，前面需要缩进，这里的缩进也就是我们其他语言里面的括号。</p>
<h3 id="进阶的if-elif-else语句"><a href="#进阶的if-elif-else语句" class="headerlink" title="进阶的if-elif-else语句"></a>进阶的if-elif-else语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">age_of_oldboy = <span class="number">56</span>;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">3</span>:</span><br><span class="line">    guess_age = int(input(<span class="string">"guess age:"</span>));</span><br><span class="line">    <span class="keyword">if</span> guess_age == age_of_oldboy:</span><br><span class="line">        print(<span class="string">"Congradualtions,you got it"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">elif</span> guess_age &gt; age_of_oldboy:</span><br><span class="line">        print(<span class="string">"You should think smaller!"</span>);</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"You should think bigger!"</span>);</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Sorry,you have tried too many times!"</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><p>Python中的while字句也可以搭配else子句，当while无法进行的时候，将会执行else语句</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">age_of_oldboy = <span class="number">56</span>;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">3</span>:</span><br><span class="line">    guess_age = int(input(<span class="string">"guess age:"</span>));</span><br><span class="line">    <span class="keyword">if</span> guess_age == age_of_oldboy:</span><br><span class="line">        print(<span class="string">"Congradualtions,you got it"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">elif</span> guess_age &gt; age_of_oldboy:</span><br><span class="line">        print(<span class="string">"You should think smaller!"</span>);</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"You should think bigger!"</span>);</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Sorry,you have tried too many times!"</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p>当我们使用Python中的for语句的时候，需要注意range()中可以指定3个参数，第1个参数是开始的数字，第2个参数是结束的数字n(也就是到n-1)，第3个参数是每隔多少次执行一次循环</p>
<p>例1：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 将会打印0-9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    print(i);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将会打印22-89</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">22</span>,<span class="number">90</span>):</span><br><span class="line">    print(i);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只打印偶数,从零开始，每隔2个打印一下</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p>
<p>例2：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">age_of_oldboy = <span class="number">56</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    guess_age = int(input(<span class="string">"guess age:"</span>));</span><br><span class="line">    <span class="keyword">if</span>(guess_age == age_of_oldboy):</span><br><span class="line">        print(<span class="string">"Congratulations,you have got it..."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">elif</span> guess_age &gt; age_of_oldboy:</span><br><span class="line">        print(<span class="string">"Please Think Smaller..."</span>);</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Please Think Bigger..."</span>);</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Sorry,You have tried too many times"</span>);</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="综合应用："><a href="#综合应用：" class="headerlink" title="综合应用："></a>综合应用：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">age_of_oldboy = <span class="number">56</span>;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">3</span>:</span><br><span class="line">    guess_age = int(input(<span class="string">"guess age:"</span>));</span><br><span class="line">    <span class="keyword">if</span> guess_age == age_of_oldboy:</span><br><span class="line">        print(<span class="string">"Congratulations,you have got it"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">elif</span> guess_age &gt; age_of_oldboy:</span><br><span class="line">        print(<span class="string">"You should think smaller!"</span>);</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"You should think bigger!"</span>);</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">3</span>:</span><br><span class="line">        cotinue_confirm = input(<span class="string">"Please confirm if continue:"</span>);</span><br><span class="line">        <span class="keyword">if</span> cotinue_confirm != <span class="string">'n'</span>:</span><br><span class="line">            count = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p>总结：这篇文章仅仅是我记录学习的一小步，但是对自己来说却进步了一大步！Python，一定会是我手中的利器！</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> Basic </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu下配置Git的SSH]]></title>
      <url>/2017/12/01/Ubuntu%E4%B8%8B%E9%85%8D%E7%BD%AEGit%E7%9A%84SSH/</url>
      <content type="html"><![CDATA[<p><a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener">官方文档</a></p>
<blockquote>
<p>经常使用GitHub的童鞋一定知道，当我们每次push的时候，都会遇到一个很尴尬的问题，输入用户名和密码，一次也就够了，但是当我们每天push次数很多的时候，就已经很不耐烦了，所以为了避免这个问题，我们可以创建一个SSH秘钥，然后与GitHub进行配置，从此以后我们不需要输入任何密码！</p>
</blockquote>
<p>本次创建和配置我们是基于Linux进行的</p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>生成一对秘钥，运行如下命令（注意输入自己的邮箱）</p>
<blockquote>
<p>ssh-keygen -t rsa -b 4096 -C “<a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a>“</p>
</blockquote>
<p>输入命令之后，系统会让我们输入秘钥存放的位置，这里直接回车，也就是使用默认位置<br>回车之后，输入密码，这里也是进行回车，因为密码是可选项，</p>
<hr>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>当我们在本机创建了SSH密钥的时候，并不能够代表我们就可以使用了，我们需要在GitHub上进行注册，使用如下命令</p>
<p>启动SSH代理应用并重定向使用Bourne</p>
<blockquote>
<p>[root@localhost /]# eval “$(ssh-agent -s)”</p>
</blockquote>
<p>使用代理注册SSH密钥</p>
<blockquote>
<p>[root@localhost /]# ssh-add ~/.ssh/id_rsa</p>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="获得SSH密钥"><a href="#获得SSH密钥" class="headerlink" title="获得SSH密钥"></a>获得SSH密钥</h2><ol>
<li>因为我们采用SSH密钥，因此我们需要一个公钥，一个私钥，所以当代码托管系统向我们询问 “SSH公钥”的时候，我们需要id_rsa.pub文件中的内容，通常存储在home的一个隐藏文件夹中     </li>
</ol>
<blockquote>
<p>[root@localhost /]# cat ~/.ssh/id_rsa.pub</p>
</blockquote>
<ol start="2">
<li>接下来，我们需要复制屏幕上输出的所有文本</li>
<li>粘贴到我们使用代码托管系统的设置页面中</li>
</ol>
<!-- more -->]]></content>
      
        <categories>
            
            <category> git </category>
            
            <category> ssh </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> SSH </tag>
            
            <tag> GitHub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js中取消事件冒泡的两种方式]]></title>
      <url>/2017/11/30/js%E4%B8%AD%E5%8F%96%E6%B6%88%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="事件冒泡的由来"><a href="#事件冒泡的由来" class="headerlink" title="事件冒泡的由来"></a>事件冒泡的由来</h2><p>  当我们在给写好的控件绑定一个事件之前，它是没有绑定事件的，因此便需要将自己的相应的事件与父容器的相应的事件对应，从而就产生了事件冒泡，甚至于当我们在子容器谢了一个点击事件之后，点击子容器，子容器的点击事件执行，父容器的点击事件也会执行，但是子容器的点击事件最先执行，但是往往我们只需要子容器的点击事件，因此我们需要阻止事件冒泡！</p>
<p>页面上有好多事件，也可以多个元素响应一个事件.假如:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">BODY</span> <span class="attr">onclick</span>=<span class="string">"alert('aaa');"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('bbb');"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"cooltip"</span> <span class="attr">title</span>=<span class="string">"这是我的超链接提示1。"</span> <span class="attr">onclick</span>=<span class="string">"alert('ddd');"</span>&gt;</span></span><br><span class="line">   提示</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BODY</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面这段代码一共有三个事件,body，div，a都分别绑定了单击事件。在页面中当单击a标签会连续弹出3个提示框。这就是事件冒泡引起的现象。事件冒 泡的过程是：a –&gt; div –&gt; body 。a冒泡到div冒泡到body。</p>
<p>本来在上面的代码中只想触发a元素的onclick事件，然而div,body事件也同时 触发了。因此我们必须要对事件的作用范围进行限制。当单击a元素的onclick事件时只触发a本身的事件。由于IE- DOM和标准DOM实现事件对象的方法各不相同，导致在不同浏览器中获取事件的对象变得比较困难。如果想阻止事件的传递，我们可以用 event.stopPropagation()阻止事件的传递行为.</p>
<a id="more"></a>
<h2 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h2><h3 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h3><blockquote>
<p>在子容器的方法最后添加一句(注意，这个event是事件参数，也就是我们传递过来的) event.stopPropagation()</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mydiv"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid red ; width: 200px ; height: 200px;position: absolute;"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"mybtn"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"click me"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">	onload = function()&#123;</span></span><br><span class="line"><span class="undefined">		$("#mydiv").bind("click" , function()&#123;alert(123);&#125;);</span></span><br><span class="line"><span class="undefined">		$("#mybtn").bind("click" , function(event)&#123;</span></span><br><span class="line"><span class="undefined">      alert(456);</span></span><br><span class="line"><span class="undefined">      /*用来阻止事件冒泡*/</span></span><br><span class="line"><span class="undefined">      event.stopPropagation();</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">	&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h3><blockquote>
<p>在子容器的代码中 可以将event.stopPropagation() 替换为 return false;</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mydiv"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid red ; width: 200px ; height: 200px;position: absolute;"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"mybtn"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"click me"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">	onload = function()&#123;</span></span><br><span class="line"><span class="undefined">		$("#mydiv").bind("click" , function()&#123;</span></span><br><span class="line"><span class="undefined">        alert(123);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">		$("#mybtn").bind("click" , function(event)&#123;</span></span><br><span class="line"><span class="undefined">			   alert(456);</span></span><br><span class="line"><span class="undefined">			   return false;</span></span><br><span class="line"><span class="undefined">			&#125;);</span></span><br><span class="line"><span class="undefined">	&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>参照：<a href="https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/4211429?fr=aladdin#4" target="_blank" rel="noopener">百度百科</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[详解Java中的数组内存]]></title>
      <url>/2017/11/28/Java%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<h2 id="你了解数组么？"><a href="#你了解数组么？" class="headerlink" title="你了解数组么？"></a>你了解数组么？</h2><blockquote>
<p>Java中，声明一个数组的过程中，内存将会如何分配<br>Java数组初始化一共有多少种方式<br>基本类型数组和引用类型数组之间，初始化时内存分配机制有什么区别</p>
</blockquote>
<p>当我们使用Java数组之前，必须先对数组进行初始化（否则无法使用），当数组的所有元素都被分配了合适的内存空间，并指定了初始值时，数组初始化完成。程序以后将无法改变数组内存的大小以及位置。</p>
<hr>
<h2 id="数组初始化的两种方式"><a href="#数组初始化的两种方式" class="headerlink" title="数组初始化的两种方式"></a>数组初始化的两种方式</h2><p>数组是静态的</p>
<blockquote>
<p>这里由于Java语言是典型的静态语言，因此Java的数组是静态的，即当数组被初始化之后，长度将不可以改变。而JavaScript则是动态语言，数组长度可以改变</p>
</blockquote>
<h3 id="静态初始化："><a href="#静态初始化：" class="headerlink" title="静态初始化："></a>静态初始化：</h3><blockquote>
<p>初始化时由程序员显式指定每个数组元素的初始值，由系统决定数组的长度！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] num1= <span class="keyword">new</span> String[] &#123;<span class="string">"1"</span>,<span class="string">"2"</span>&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="动态初始化："><a href="#动态初始化：" class="headerlink" title="动态初始化："></a>动态初始化：</h3><blockquote>
<p>初始化时程序只指定数组长度，由系统为数组元素分配初始值！</p>
</blockquote>
<p>初始值分配规则：</p>
<ol>
<li>整数类型：byte short int long 数组元素默认值为0</li>
<li>浮点类型：float double 数组元素默认值为0.0</li>
<li>字符类型：char ，数组元素默认值为’\u0000’</li>
<li>布尔类型：boolean，数组元素的默认值为false</li>
<li>引用类型(类，接口，数组)：数组元素默认值为null</li>
</ol>
<p>注意事项：</p>
<ol>
<li>在我们初始化数组的时候，不可以同时声明数组的长度和给定数组元素的内容</li>
<li>一旦数组元素初始化完成，内存分配即结束，此时程序只可以改变数组元素的值，而不可以改变数组的长度</li>
<li>Java中的数组变量是一种引用类型的变量，数组变量本身并不是数组本身，只是指向堆内存数组对象而已！</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] num2 = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br></pre></td></tr></table></figure>
<p>此时，内存示意图如下：<br><figure class="image-box">
                <img src="http://on3w7gc9m.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720171128140438.png" alt title class>
                <p></p>
            </figure></p>
<p>不管采用了数组初始化的哪种方式，一旦数组初始化完成，数组的长度将无法改变！</p>
<p>对于Java程序中所有的引用变量，都不需要经过初始化操作，需要初始化的是该引用变量所引用的对象！</p>
<a id="more"></a>
<hr>
<h2 id="数组初始化的类型"><a href="#数组初始化的类型" class="headerlink" title="数组初始化的类型"></a>数组初始化的类型</h2><h3 id="基本类型数组的初始化"><a href="#基本类型数组的初始化" class="headerlink" title="基本类型数组的初始化"></a>基本类型数组的初始化</h3><blockquote>
<p>对于基本类型数组而言，数组元素的值直接存储在对应的数组元素中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义一个int[]类型的数组*/</span></span><br><span class="line"><span class="keyword">int</span>[] iArr;</span><br><span class="line"><span class="comment">/*静态初始化数组*/</span></span><br><span class="line">iArr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">2</span>, <span class="number">5</span>, -<span class="number">12</span>, <span class="number">20</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ol>
<li>基本类型的值存储在栈内存中(这句话是完全错误的)，例如上面的iArr数组，都存储在堆内存中。事实上是局部变量是保存在栈内存里保存的，不管是基本类型的变量，还是引用类型的变量，都是存储在各自的方法栈区中，但引用类型变量所引用的对象则总是存储在堆内存中！</li>
<li>Java中，堆内存中的对象不允许直接访问，为了访问堆内存中的对象，通常只能通过引用变量进行访问。(<strong>体现了Java的健壮性，避免程序crash</strong>)<blockquote>
<p>事实上，引用变量实际上就是一个指针，只要程序通过引用变量访问属性，或者通过引用变量来调用方法，则该引用变量将会由它所引用的对象替代！</p>
</blockquote>
</li>
</ol>
<h3 id="引用类型数组的初始化"><a href="#引用类型数组的初始化" class="headerlink" title="引用类型数组的初始化"></a>引用类型数组的初始化</h3><blockquote>
<p>引用类型数组的数组元素依然是引用类型的，因此数组元素里存储的还是引用，它指向另一块内存，这块内存里面存储了该引用变量所引用的对象！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*年龄*/</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="comment">/*身高*/</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">double</span> height;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"我的年龄是："</span> + age + <span class="string">"，我的身高是："</span> + height);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceArrayTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*定义一个students数组变量*/</span></span><br><span class="line">		Person[] students;</span><br><span class="line"></span><br><span class="line">		students = <span class="keyword">new</span> Person[<span class="number">2</span>];</span><br><span class="line">		System.out.println(<span class="string">"students所引用的数组长度是："</span> + students.length);</span><br><span class="line"></span><br><span class="line">		Person zhang = <span class="keyword">new</span> Person();</span><br><span class="line">		zhang.age = <span class="number">15</span>;</span><br><span class="line">		zhang.height = <span class="number">158</span>;</span><br><span class="line"></span><br><span class="line">		Person lee = <span class="keyword">new</span> Person();</span><br><span class="line">		lee.age = <span class="number">16</span>;</span><br><span class="line">		lee.height = <span class="number">161</span>;</span><br><span class="line">		students[<span class="number">0</span>] = zhang;</span><br><span class="line">		students[<span class="number">1</span>] = lee;</span><br><span class="line"></span><br><span class="line">		lee.info();</span><br><span class="line">		students[<span class="number">1</span>].info();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于上面这段代码，内存分配如下：<br><figure class="image-box">
                <img src="http://on3w7gc9m.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720171128151129.png" alt title class>
                <p></p>
            </figure></p>
<p>最后的内存如下：<br><figure class="image-box">
                <img src="http://on3w7gc9m.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720171128152246.png" alt title class>
                <p></p>
            </figure></p>
<p>注意事项：<br>  对于引用类型的数组而言，它的数组元素其实就是一个引用类型的变量，因此可以指向任何有效的内存(有效指的是强类型的约束,比如Person类型的数组，数组中每个元素的类型都相当于Person类型的变量)</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 数组 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dom4j与XStream的使用]]></title>
      <url>/2017/11/24/dom4j%E4%B8%8EXStream%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>对于XML的处理，这里简单的使用开源框架Dom4j和XStream来实现</p>
</blockquote>
<h2 id="Dom4j"><a href="#Dom4j" class="headerlink" title="Dom4j"></a>Dom4j</h2><blockquote>
<p>Dom4j是一个优秀的Java XML API ,主要用于读写XML格式的数据，Dom4j具有性能优异，功能强大，易于使用等特点，同时也是一个开源的软件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年11月23日 下午3:54:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentHelper;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2017年11月23日 下午3:54:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TODO</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dom4jTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		sb.append(<span class="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;"</span>)</span><br><span class="line">		  .append(<span class="string">"&lt;person&gt;"</span>)</span><br><span class="line">		  .append(<span class="string">"&lt;name&gt;吴晓文&lt;/name&gt;"</span>)</span><br><span class="line">		  .append(<span class="string">"&lt;sex&gt;男&lt;/sex&gt;"</span>)</span><br><span class="line">		  .append(<span class="string">"&lt;address&gt;山西省朔州市&lt;/address&gt;"</span>)</span><br><span class="line">		  .append(<span class="string">"&lt;/person&gt;"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">/* 通过解析XML字符串创建Document对象 */</span></span><br><span class="line">		Document document = DocumentHelper.parseText(sb.toString());</span><br><span class="line">		Element root = document.getRootElement();</span><br><span class="line">		<span class="comment">/* 得到根元素下面的所有子节点 */</span></span><br><span class="line">		List&lt;Element&gt; elementList = root.elements();</span><br><span class="line">		<span class="comment">/* 遍历所有子节点 */</span></span><br><span class="line">		<span class="keyword">for</span> (Element element : elementList) &#123;</span><br><span class="line">			System.out.println(element.getName() + <span class="string">"=&gt; "</span> + element.getText());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h2 id="XStream"><a href="#XStream" class="headerlink" title="XStream"></a>XStream</h2><blockquote>
<p>XStream是Thoughtworks公司发布的一个开源Java类库，能够实现XML与Java对象之间的转换。使用非常简单，不需要预先生成其他辅助类，也不需要依赖于任何映射文件，还具有很强大的扩展功能！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年11月23日 下午4:12:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.io.xml.DomDriver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2017年11月23日 下午4:12:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TODO</span> TODO	XStream的使用示例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> String name;</span><br><span class="line">		<span class="keyword">private</span> String sex;</span><br><span class="line">		<span class="keyword">private</span> String address;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> name;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.name = name;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> sex;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.sex = sex;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> address;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.address = address;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Java对象转换为XML</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> person	Java对象</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">javaObject2Xml</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">		XStream xs = <span class="keyword">new</span> XStream(<span class="keyword">new</span> DomDriver());</span><br><span class="line">		<span class="comment">/*给Person类定义别名*/</span></span><br><span class="line">		xs.alias(<span class="string">"person"</span>, person.getClass());</span><br><span class="line">		<span class="keyword">return</span> xs.toXML(person);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * XML对象转换为Java对象</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> xml</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">xml2JavaObject</span><span class="params">(String xml)</span> </span>&#123;</span><br><span class="line">		XStream xs = <span class="keyword">new</span> XStream(<span class="keyword">new</span> DomDriver());</span><br><span class="line">		<span class="comment">/*给Person类定义别名*/</span></span><br><span class="line">		xs.alias(<span class="string">"person"</span>, Person.class);</span><br><span class="line">		Person person = (Person) xs.fromXML(xml);</span><br><span class="line">		<span class="keyword">return</span> person;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*创建Person对象*/</span></span><br><span class="line">		Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">		p1.setName(<span class="string">"吴晓文"</span>);</span><br><span class="line">		p1.setSex(<span class="string">"男"</span>);</span><br><span class="line">		p1.setAddress(<span class="string">"山西省朔州市"</span>);</span><br><span class="line">		<span class="comment">/*将p1对象转换为XML字符串*/</span></span><br><span class="line">		System.out.println(javaObject2Xml(p1));</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*构造XML字符串*/</span></span><br><span class="line">		String xml = <span class="string">"&lt;person&gt;&lt;name&gt;路遥&lt;/name&gt;&lt;sex&gt;男&lt;/sex&gt;&lt;address&gt;贵州贵阳&lt;/address&gt;&lt;/person&gt;"</span>;</span><br><span class="line">		Person p2 = (Person) xml2JavaObject(xml);</span><br><span class="line">		System.out.println(p2.getName() + <span class="string">"\t"</span> + p2.getSex() + <span class="string">"\t"</span> + p2.getAddress());</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：默认情况下，使用XStream转换Java对象得到的XML文档根节点为完整的Java类名，但当我们使用了如下代码设置别名的时候将会返回一个Person根节点                      </p>
<blockquote>
<p>xs.alias(“person”, person.getClass);</p>
</blockquote>
<p>当我们使用内部类的时候，需要注意，如果报出如下错误（因为我们在静态方法中创建了动态内部类）</p>
<blockquote>
<p>No enclosing instance of type AA is accessible. Must qualify the allocation with an enclosing instance of type SimpleTh</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> XML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> XML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信开发(1)]]></title>
      <url>/2017/11/23/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91-1/</url>
      <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote>
<p>在我写这篇文章之前，博主就已经看了一下微信公众号以及微信小程序的历史，不得不感叹自己老了！随着最近几年Native App的兴起和衰落，自己本认为可以火的Native App现在逐渐被一些light App所挤占，很大一部分尤以腾讯的微信为平台！</p>
</blockquote>
<p>这篇文章主要是记录自己开始微信开发的第一页，也是目前比较紧急的事情，因为要为公司开发一款微信公众号，虽然开发已经过去2个月了，2个月自己也是跌跌撞撞，做了很多自己不擅长的事情，产品需求的分析与设计，界面的设计与编写，产品的架构…..很多自己不敢想象的事情还是做了！</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>拥有一款已经注册且通过的认证号或者服务号</li>
<li>拥有一个独立服务器(自己用的花生壳，可以免费内网映射1G流量)</li>
<li>….貌似没有了(其实读者应该去看一下开发文档<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421135319" target="_blank" rel="noopener">文档</a>)</li>
</ol>
<hr>
<h2 id="接入微信公众号"><a href="#接入微信公众号" class="headerlink" title="接入微信公众号"></a>接入微信公众号</h2><blockquote>
<p>接入微信公众号也就是通俗上的告诉微信服务器，你的服务器就是你自己申请的微信公众号的服务器。(验证服务器是否被微信识别)</p>
</blockquote>
<h3 id="如何接入微信公众号"><a href="#如何接入微信公众号" class="headerlink" title="如何接入微信公众号"></a>如何接入微信公众号</h3><blockquote>
<p>登录微信公众平台-&gt;开发-&gt;开发者工具-&gt;公众平台测试帐号-&gt;接口配置信息-&gt;修改</p>
</blockquote>
<ol>
<li>配置url</li>
<li>配置token</li>
</ol>
<p>流程：</p>
<ol>
<li>配置URL和token之后，微信公众号会向配置好的url发送一个get请求，将会携带如下4个参数（token就是我们刚刚配置的）<table><tr><td>signature</td><td>微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</td></tr><tr><td>timestamp</td><td>时间戳</td></tr><tr><td>nonce</td><td>随机数</td></tr><tr><td>echostr</td><td>随机字符串</td></tr></table></li>
<li>将token、timestamp、nonce三个参数进行字典序排序(升序)</li>
<li>将三个参数字符串拼接成一个字符串进行sha1加密(得到的是一个加密后的十六进制字符串)</li>
<li>开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</li>
<li>如果请求通过，我们需要返回一个echostr(微信服务器传给我们的)给微信服务器</li>
</ol>
<a id="more"></a>
<p>代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年11月23日 下午2:44:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> signature 微信加密签名，</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timestamp 时间戳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nonce	随机数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2017年11月23日 下午2:44:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TODO</span> TODO	请求校验程序的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*微信测试号接口配置信息的Token，内容要完全一致*/</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String token = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将token，timestamp，nonce 三个参数的内容进行字典序排序，</span></span><br><span class="line"><span class="comment">	 * 拼接成字符串，并且进行SHA-1加密，与signature进行比对，如果一致返回true,否则返回false</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> signature 微信加密签名，</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> timestamp 时间戳</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> nonce	随机数</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(String signature, String timestamp, String nonce)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*进行字典序排序*/</span></span><br><span class="line">		String[] params = <span class="keyword">new</span> String[] &#123; token, timestamp, nonce &#125;;</span><br><span class="line">		Arrays.sort(params);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*排序后的字符串进行拼接*/</span></span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		sb = sb.append(params[<span class="number">0</span>]).append(params[<span class="number">1</span>]).append(params[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">/*进行加密*/</span></span><br><span class="line">		String cipherText = sb.toString();</span><br><span class="line">		MessageDigest md = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			md = MessageDigest.getInstance(<span class="string">"SHA-1"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">byte</span>[] digest = md.digest(cipherText.getBytes());</span><br><span class="line">		cipherText = byteToString(digest);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> cipherText != <span class="keyword">null</span> ? cipherText.equals(signature.toUpperCase()) : <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*字节数组转换为十六进制字符串*/</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">byteToString</span><span class="params">(<span class="keyword">byte</span>[] byteArray)</span> </span>&#123;</span><br><span class="line">		String strDigest = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteArray.length; i++) &#123;</span><br><span class="line">			strDigest += byteToHexStr(byteArray[i]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> strDigest;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*字节转换为十六进制字符串*/</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">byteToHexStr</span><span class="params">(<span class="keyword">byte</span> mByte)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">char</span>[] Digit = &#123; <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>&#125;;</span><br><span class="line">		<span class="keyword">char</span>[] tempArr = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">		tempArr[<span class="number">0</span>] = Digit[(mByte &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">0X0F</span>];</span><br><span class="line">		tempArr[<span class="number">1</span>] = Digit[mByte &amp; <span class="number">0X0F</span>];</span><br><span class="line">		String s = <span class="keyword">new</span> String(tempArr);</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试程序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年11月22日 下午8:05:42</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.util.CheckUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2017年11月22日 下午8:05:42</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TODO</span> TODO 验证消息来自微信服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUtil</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 	1）将token、timestamp、nonce三个参数进行字典序排序</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		2）将三个参数字符串拼接成一个字符串进行sha1加密,加密后的字符串是十六进制的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		checkSign( request,  response);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkSign</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		String signature = request.getParameter(<span class="string">"signature"</span>);</span><br><span class="line">		String timestamp = request.getParameter(<span class="string">"timestamp"</span>);</span><br><span class="line">		String nonce = request.getParameter(<span class="string">"nonce"</span>);</span><br><span class="line">		String echostr = request.getParameter(<span class="string">"echostr"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">/*验证通过回写echostr*/</span></span><br><span class="line">		<span class="keyword">if</span>( CheckUtil.check(signature, timestamp, nonce))</span><br><span class="line">		&#123;</span><br><span class="line">			response.getWriter().print(echostr);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			response.getWriter().print(<span class="string">"false"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：url配置的时候需要具体到我们接收参数的地址</p>
</blockquote>
<p>请求校验的原因：</p>
<blockquote>
<p>为了防止他人向公众号服务器发送恶意请求，需要对每个消息请求进行合法校验，微信服务器向公众号服务器POST消息时，也会在URL后面追加4个参数，分别是signature,timestamp,nonce,echostr，依然是通过校验签名判断消息的真实性！与上面讲的完全一致！</p>
</blockquote>
<hr>
<p>总结：当你点击在配置URL和Token点击提交的时候，如果配置失败，那么请你重新检查一下你的程序，确保你返回了echostr，如果配置成功，那么恭喜你，你的服务器算得上一个微信公众号服务器了2333！</p>
]]></content>
      
        <categories>
            
            <category> 微信 </category>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MyBatis中的基本概念]]></title>
      <url>/2017/11/22/MyBatis%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol>
<li>pojo：不按MVC进行分层，只有Java Bean有一些属性，还有get以及set方法</li>
<li>domain：不按MVC进行分层，只有Java Bean有一些属性，还有get以及set方法</li>
<li>po：用在持久层，相当于 pojo+xml！在页面中进行添加或者修改的时候，直接传入到action中！<br> po中的类名等于表名，属性名等于字段名，还有对应的set以及get方法</li>
<li>vo：View Object表现层对象，主要用于在高级查询中接收从页面中传过来的参数，好处是扩展性强！</li>
<li>bo：用在service层，现在基本不用</li>
</ol>
<p>pojo,domain.po,vo,bo可以用在各种层面，不会报错！（也就是说po用在表现层，vo用在表现层不报错，<br>因为都是普通的java bean没有语法错误）最好不用混着用，不利于代码维护！</p>
<hr>
<h2 id="MyBatis中的原理"><a href="#MyBatis中的原理" class="headerlink" title="MyBatis中的原理"></a>MyBatis中的原理</h2><figure class="image-box">
                <img src="http://on3w7gc9m.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720171119093655.png" alt="MyBatis架图" title class>
                <p>MyBatis架图</p>
            </figure>
<p>输入映射：对于每条Sql语句指定的输入参数的类型（只可以指定Map,基本数据类型(包括String)，以及POJO）<br>输出映射：返回的结果集类型（只可以指定Map,List,基本数据类型(包括String)，以及POJO）</p>
<h3 id="MyBatis中的执行器"><a href="#MyBatis中的执行器" class="headerlink" title="MyBatis中的执行器"></a>MyBatis中的执行器</h3><blockquote>
<p>当我们使用MyBatis中的SqlSession执行Sql语句的时候，MyBatis会内部调用Executor接口来执行映射文件中配置好的(也就是通过调用MappedStatement)Sql语句</p>
</blockquote>
<ol>
<li>基本执行器</li>
<li>缓存执行器</li>
</ol>
<h3 id="返回数据库自增主键"><a href="#返回数据库自增主键" class="headerlink" title="返回数据库自增主键"></a>返回数据库自增主键</h3><p>数据库中我们可以使用如下代码，来查询刚刚插入的记录的主键值，会返回1个0<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LAST_INSERT_ID</span>;</span><br></pre></td></tr></table></figure></p>
<p>但是如果我们在MyBatis中配置了如下代码，将会返回刚刚插入的主键记录的值</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span> <span class="attr">parameterType</span>=<span class="string">"com.pojo.Student"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">		insert into student(name,sex,birthday) values(#&#123;name&#125;, #&#123;sex&#125;, #&#123;birthday&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 方法2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent2"</span> <span class="attr">parameterType</span>=<span class="string">"com.pojo.Student"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			keyProperty指定自增主键的值返回到POJO的哪个属性中</span></span><br><span class="line"><span class="comment">			order指相对于下面insert插入语句的执行顺序</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">			SELECT LAST_INSERT_ID();</span><br><span class="line">		<span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">		insert into student(name,sex,birthday) values(#&#123;name&#125;, #&#123;sex&#125;, #&#123;birthday&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="使用UUID生成主键"><a href="#使用UUID生成主键" class="headerlink" title="使用UUID生成主键"></a>使用UUID生成主键</h3><blockquote>
<p>由于数据库中的主键无法使用字符串进行自动增长，所以当我们使用字符串作为主键的时候，我们需要用到UUID算法，帮助我们生成主键，这里原理就是利用了数据库中的UUID()函数</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用UUID主键方式,uuid必须是先生成，然后传入到student对象里面 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent3"</span> <span class="attr">parameterType</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 使用数据库的自动生成策略 --&gt;</span></span><br><span class="line">			SELECT UUID()</span><br><span class="line">		<span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">		insert into student(id,sex,name,birthday) values(#&#123;id&#125;,#&#123;sex&#125;,#&#123;name&#125;,#&#123;birthday&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用UUID生成主键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		InputStream in = Student.class.getResourceAsStream(<span class="string">"/SqlMapConfig.xml"</span>);</span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">		SqlSession session = factory.openSession();</span><br><span class="line">		Student student = <span class="keyword">new</span> Student();</span><br><span class="line">		student.setBirthday(Timestamp.valueOf(<span class="string">"1997-02-22 10:10:10"</span>));</span><br><span class="line">		student.setName(<span class="string">"吴晓文"</span>);</span><br><span class="line">		student.setSex(<span class="string">"1"</span>);</span><br><span class="line">		student.setId(UUID.randomUUID().toString());</span><br><span class="line">		<span class="keyword">int</span> i = session.insert(<span class="string">"com.dao.StudentDao.addStudent3"</span>,student);</span><br><span class="line">		session.commit();</span><br><span class="line">		session.close();</span><br><span class="line">		System.out.println(student.getId());</span><br><span class="line">		System.out.println(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="核心配置文件中引入资源文件"><a href="#核心配置文件中引入资源文件" class="headerlink" title="核心配置文件中引入资源文件"></a>核心配置文件中引入资源文件</h2><blockquote>
<p>对于MyBatis,有时候我们需要配置参数在额外的资源文件中，下面以JDBC4个参数例子进行配置</p>
</blockquote>
<p>编写资源文件 db.properties</p>
<blockquote>
<p>注意：后面的参数不可以包含空格</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/s59</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure>
<p>在SqlMapConfig文件中进行配置(引入配置文件)：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 引入配置文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"MySql"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"MySql"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/pojo/Student.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<hr>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> MyBatis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MyBatis中Dao开发的两种方式]]></title>
      <url>/2017/11/20/MyBatis%E4%B8%A4%E7%A7%8D%E7%94%9F%E6%88%90Dao%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="Dao的两种开发方式"><a href="#Dao的两种开发方式" class="headerlink" title="Dao的两种开发方式"></a>Dao的两种开发方式</h2><ol>
<li>原始Dao的开发方法(接口与实现类，手动编写)</li>
<li>动态代理方式(使用Mapper接口代理的方式)</li>
</ol>
<h3 id="原始Dao编写"><a href="#原始Dao编写" class="headerlink" title="原始Dao编写"></a>原始Dao编写</h3><p>编写StudentDao接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个user的持久化接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*查找所有学生*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Student <span class="title">findStudentById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>编写UserDaoImpl(也就是UserDao的实现类)</p>
<blockquote>
<p>编写实现类的时候，我们注意到每个具体的方法都会有一个session，由于session是线程不安全的，所以session最好的作用范围便是方法之内！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体的UserDao实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> com.pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory factory)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.factory = factory;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">/*由于SqlSession是线程不安全的，因此SqlSession最好的作用域便是方法内*/</span></span><br><span class="line">		SqlSession session = factory.openSession();</span><br><span class="line">		<span class="keyword">return</span> session.selectList(<span class="string">"com.dao.StudentDao.findAll"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Student <span class="title">findStudentById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		SqlSession session = factory.openSession();</span><br><span class="line">		<span class="keyword">return</span> (Student) session.selectOne(<span class="string">"com.dao.StudentDao.findStudentById"</span>,id);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写测试类（需要初始化factory）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.dao.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*初始化*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		InputStream in = Student.class.getResourceAsStream(<span class="string">"/SqlMapConfig.xml"</span>);</span><br><span class="line">		factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">		System.out.println(<span class="string">"s"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		setUp();</span><br><span class="line">		UserDao userDao = <span class="keyword">new</span> UserDaoImpl(factory);</span><br><span class="line">		System.out.println(factory);</span><br><span class="line">		System.out.println(userDao);</span><br><span class="line">		List list = userDao.findAll();</span><br><span class="line">		System.out.println(list);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<hr>
<h3 id="动态代理实现Dao"><a href="#动态代理实现Dao" class="headerlink" title="动态代理实现Dao"></a>动态代理实现Dao</h3><blockquote>
<p>MyBatis希望我们能够以1个接口的形式来书写规范，然后会自动根据我们书写的接口自动生成相应的实现类，我们只需要调用相应的方法就可以了</p>
</blockquote>
<p><strong> 注意：动态代理实现Dao需要MyBatis3.2以上的支持！！！</strong></p>
<h4 id="编写Dao接口"><a href="#编写Dao接口" class="headerlink" title="编写Dao接口"></a>编写Dao接口</h4><p>MyBatis严格控制书写对应Mapper的接口规则：</p>
<ol>
<li>接口名字必须等于Mapper映射文件的namespace名字</li>
<li>接口的方法名字必须等于Mapper映射文件的id名字</li>
<li>接口的方法参数类型必须等于Mapper映射文件的参数类型</li>
<li>接口的方法返回类型必须等于Mapper映射文件的结果集类型</li>
</ol>
<p>注意事项：</p>
<ol>
<li>Mapper对应的配置文件与我们自己书写的Mapper接口必须在同一个文件夹下</li>
<li>Mapper对应的配置文件与我们自己书写的Mapper接口名字必须相同，后缀不同</li>
</ol>
<h4 id="编写Mapper对应的配置文件"><a href="#编写Mapper对应的配置文件" class="headerlink" title="编写Mapper对应的配置文件"></a>编写Mapper对应的配置文件</h4><p>编写Mapper对应的接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Student <span class="title">findStudentById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="在总配置文件中添加刚刚编写的Mapper对应的配置文件"><a href="#在总配置文件中添加刚刚编写的Mapper对应的配置文件" class="headerlink" title="在总配置文件中添加刚刚编写的Mapper对应的配置文件"></a>在总配置文件中添加刚刚编写的Mapper对应的配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 编写UserMapper接口的配置文件，</span></span><br><span class="line"><span class="comment">	编写规则（4点）</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"> 	<span class="comment">&lt;!-- 查询所有学生 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">		select id,name,sex,birthday from student</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findStudentById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultType</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">		select id,name,sex,birthday from student where id = #&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		InputStream in = Student.class.getResourceAsStream(<span class="string">"/SqlMapConfig.xml"</span>);</span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">		SqlSession session = factory.openSession();</span><br><span class="line">		UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">		List&lt;Student&gt; list = mapper.findAll();</span><br><span class="line">		System.out.println(list);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> MyBatis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入使用MyBatis]]></title>
      <url>/2017/11/19/%E6%B7%B1%E5%85%A5%E4%BD%BF%E7%94%A8MyBatis/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>前面几篇文章简要介绍了MyBatis的基本使用，以及一些基本概念，包括我们经常所用到的POJO，还有Dao的两种开发方式，但是我们经常使用的便是VO(View Object)，通过VO我们直接进行业务调用更加容易理解，因为我们每次传递的都是一个VO对象，而不是一个页面传入多个对象，尤其是对于MyBatis中的Sql操作而言，只能传入一个对象，我们可以传入Map，但是不建议这么做，建议使用我们下面所说的VO</p>
</blockquote>
<hr>
<h2 id="使用VO进行MyBatis的高级查询"><a href="#使用VO进行MyBatis的高级查询" class="headerlink" title="使用VO进行MyBatis的高级查询"></a>使用VO进行MyBatis的高级查询</h2><h3 id="输入映射"><a href="#输入映射" class="headerlink" title="输入映射"></a>输入映射</h3><p>输入映射就是我们在Mapper配置文件中所配置的parameterType，不仅仅是基本数据类型，还可以是POJO类型，还可以是VO类型！</p>
<blockquote>
<p>假设有一个页面只是对于用户进行操作，VO便是从页面传过来的对象。使用VO可以给我们带来很大的扩展性，进行任何的操作都可以通过VO来进行，可以用来避免使用Map，</p>
</blockquote>
<p>用到的POJO类的编写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String sex;</span><br><span class="line">	<span class="keyword">private</span> Timestamp birthday;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> sex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Timestamp <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> birthday;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Timestamp birthday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>VO类的书写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> student;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.student = student;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>UserMapper的编写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> com.vo.StudentVo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findStudentByNameAndSex</span><span class="params">(StudentVo student)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>配置文件的编写：注意这里参数的类型是VO类型，传值的时候是POJO.属性(因为POJO已经是VO的属性了)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findStudentByNameAndSex"</span> <span class="attr">parameterType</span>=<span class="string">"com.vo.StudentVo"</span> <span class="attr">resultType</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">		select id,name,sex,birthday from student where name like '%$&#123;student.name&#125;%' and sex = $&#123;student.sex&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>测试类的编写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> com.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> com.vo.StudentVo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentVoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(Student.class.getResourceAsStream(<span class="string">"/SqlMapConfig.xml"</span>));</span><br><span class="line">		SqlSession session = factory.openSession();</span><br><span class="line">		UserMapper userMapper = session.getMapper(UserMapper.class);</span><br><span class="line">		Student student = <span class="keyword">new</span> Student();</span><br><span class="line">		student.setName(<span class="string">"吴"</span>);</span><br><span class="line">		student.setSex(<span class="string">"1"</span>);</span><br><span class="line">		StudentVo studentVo = <span class="keyword">new</span> StudentVo();</span><br><span class="line">		studentVo.setStudent(student);</span><br><span class="line"></span><br><span class="line">		List&lt;Student&gt; list = userMapper.findStudentByNameAndSex(studentVo);</span><br><span class="line">		<span class="keyword">for</span> (Student student2 : list) &#123;</span><br><span class="line">			System.out.println(student2.getId() + <span class="string">"\t"</span> + student2.getName() + <span class="string">"\t"</span> + student2.getBirthday());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		session.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意事项：由于这里使用了VO，并且VO里面配置了一个POJO属性，并且设置了相应的set以及get方法，之后在POJO的配置文件中编写了具体的配置，并且参数类型是一个VO</p>
<hr>
<h3 id="输出映射"><a href="#输出映射" class="headerlink" title="输出映射"></a>输出映射</h3><ol>
<li>输出映射就是返回的结果集，可以有包装类，基本数据类型</li>
<li>只有在数据库返回的结果为1行1列数据的时候我们才可以使用基本数据类型</li>
</ol>
<h4 id="聚合数据查询例子"><a href="#聚合数据查询例子" class="headerlink" title="聚合数据查询例子"></a>聚合数据查询例子</h4><p>配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 编写UserMapper接口的配置文件，</span></span><br><span class="line"><span class="comment">	编写规则（4点）</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 查询学生总人数 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentCount"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">		select count(*) from student</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>UserMapper接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> com.vo.StudentVo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStudentCount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetStudentCountTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(Student.class.getResourceAsStream(<span class="string">"/SqlMapConfig.xml"</span>));</span><br><span class="line">		SqlSession session = factory.openSession();</span><br><span class="line">		UserMapper userMapper = session.getMapper(UserMapper.class);</span><br><span class="line">		<span class="keyword">int</span> c = userMapper.getStudentCount();</span><br><span class="line">		System.out.println(c);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="MyBatis中的动态语句"><a href="#MyBatis中的动态语句" class="headerlink" title="MyBatis中的动态语句"></a>MyBatis中的动态语句</h2><h3 id="动态Where子句"><a href="#动态Where子句" class="headerlink" title="动态Where子句"></a>动态Where子句</h3><blockquote>
<p>之前我们在使用JDBC的时候，需要自己手动一个条件一个条件的进行拼接，但是MyBatis却给了我们极大的便利，以至于我们使用一个标签就可以解决问题！</p>
</blockquote>
<p>根据姓名以及性别查询学生，如果输入了姓名和性别，则根据两个条件进行查询；如果输入了姓名，则根据姓名进行查询;如果输入了性别，则根据性别进行查询！</p>
<p>UserMapper.xml配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 动态Sql查询语句 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"dynamicWhere"</span> <span class="attr">parameterType</span>=<span class="string">"com.pojo.Student"</span> <span class="attr">resultType</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">		select id,name,sex,birthday from student</span><br><span class="line">		<span class="comment">&lt;!-- 动态where子句会自动根据需要去掉行首的and --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name != ''"</span>&gt;</span></span><br><span class="line">				and name like '%$&#123;name&#125;%'</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex != null"</span>&gt;</span></span><br><span class="line">				and sex = #&#123;sex&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Mapper代理接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> com.vo.StudentVo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">dynamicWhere</span><span class="params">(Student student)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicWhereTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(Student.class.getResourceAsStream(<span class="string">"/SqlMapConfig.xml"</span>));</span><br><span class="line">		SqlSession session = factory.openSession();</span><br><span class="line">		UserMapper userMapper = session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">		Student student = <span class="keyword">new</span> Student();</span><br><span class="line">		student.setName(<span class="string">"吴"</span>);</span><br><span class="line">		List&lt;Student&gt; list = userMapper.dynamicWhere(student);</span><br><span class="line">		System.out.println(list);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="配置文件中封装SQL语句"><a href="#配置文件中封装SQL语句" class="headerlink" title="配置文件中封装SQL语句"></a>配置文件中封装SQL语句</h4><blockquote>
<p>有时候我们在配置文件中大量书写重复的SQL语句，效率低下，因此MyBatis可以让我们手动配置Sql语句，以便能够重用提高我们的开发效率</p>
</blockquote>
<p>配置之后的UserMapper.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"user_Where"</span>&gt;</span></span><br><span class="line">	 	<span class="comment">&lt;!-- 动态where子句会自动根据需要去掉行首的and --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name != ''"</span>&gt;</span></span><br><span class="line">					and name like '%$&#123;name&#125;%'</span><br><span class="line">				<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex != null"</span>&gt;</span></span><br><span class="line">					and sex = #&#123;sex&#125;</span><br><span class="line">				<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 动态Sql查询语句 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"dynamicWhere"</span> <span class="attr">parameterType</span>=<span class="string">"com.pojo.Student"</span> <span class="attr">resultType</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">		select id,name,sex,birthday from student</span><br><span class="line">		<span class="comment">&lt;!-- 动态where子句会自动根据需要去掉行首的and --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"user_Where"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicWhereTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//dynamicWhere</span></span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(Student.class.getResourceAsStream(<span class="string">"/SqlMapConfig.xml"</span>));</span><br><span class="line">		SqlSession session = factory.openSession();</span><br><span class="line">		UserMapper userMapper = session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">		Student student = <span class="keyword">new</span> Student();</span><br><span class="line">		student.setName(<span class="string">"吴"</span>);</span><br><span class="line">		List&lt;Student&gt; list = userMapper.dynamicWhere(student);</span><br><span class="line">		System.out.println(list);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>总结：Dao配置文件中可以自己配置重用性高的SQL语句以便提高我们的开发效率</p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> MyBatis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[入门Mybatis]]></title>
      <url>/2017/11/18/%E5%85%A5%E9%97%A8Mybatis/</url>
      <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p> Mybatis与Hibernate一样，作为轻量级持久层框架，是现在的主流，并且MyBatis与Hibernate不同，MyBatis的灵活性与Hibernate不可同日而语，当我们能够以SQL语句进行轻便操作的时候，你可知道MyBatis带给我们的便利，虽然没有Hibernate封装的好，但是MyBatis扩展性更好些，也更灵活些！有人曾说Hibernate是全自动的，但是MyBatis是半自动的！</p>
<hr>
<h2 id="搭建基本环境"><a href="#搭建基本环境" class="headerlink" title="搭建基本环境"></a>搭建基本环境</h2><blockquote>
<p>使用任何框架的第一步都是搭建框架的基本环境，当我们环境搭建好之后，所谓的半个成品就出来了233333</p>
</blockquote>
<ol>
<li>引入使用数据库的JDBC驱动jar包</li>
<li>引入MyBatis的核心开发包</li>
<li>引入MyBatis的依赖包，也就是log4j等</li>
<li>创建POJO类</li>
<li>引入log4j的配置文件</li>
<li>引入MyBatis的POJO配置文件</li>
<li>引入MyBatis核心配置文件</li>
</ol>
<p>具体文件缺失，<a href="https://github.com/sivanWu0222/MyBatisDoc/blob/master/README.md" target="_blank" rel="noopener">参考</a></p>
<p>POJO类文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String sex;</span><br><span class="line">	<span class="keyword">private</span> Timestamp birthday;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> sex;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Timestamp <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> birthday;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Timestamp birthday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>POJO的配置文件头约束<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>核心配置文件头约束<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol>
<li>创建一个输入流，通过流加载总配置文件</li>
<li>通过加载进来的总配置文件创建SqlSessionFactoryBuilder来创建SessionFactory</li>
<li>创建session</li>
<li>编写具体的业务(增删改查，<strong>MyBatis中自动开启事务，我们只需要操作和提交事务就可以</strong>)</li>
<li>提交事务</li>
<li>关闭session</li>
</ol>
<a id="more"></a>
<hr>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="查询所有的学生"><a href="#查询所有的学生" class="headerlink" title="查询所有的学生"></a>查询所有的学生</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查询所有学生</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		InputStream in = User.class.getResourceAsStream(<span class="string">"/SqlMapConfig.xml"</span>);</span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">		SqlSession session = factory.openSession();</span><br><span class="line">		List&lt;Student&gt; list = session.selectList(<span class="string">"com.dao.StudentDao.findAll"</span>);</span><br><span class="line">		<span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">			System.out.println(student.getId() + <span class="string">"\t"</span> + student.getName() + <span class="string">"\t"</span> + student.getSex() + <span class="string">"\t"</span> + student.getBirthday());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		session.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的POJO映射文件中添加如下代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询所有学生 ，注意：尽管这里查询出来的是一个集合，但是结果类型依然是学生类型，</span></span><br><span class="line"><span class="comment">		因为我们要往集合里面添加学生类型</span></span><br><span class="line"><span class="comment">    id:sql语句唯一表示</span></span><br><span class="line"><span class="comment">		parameterType：指定传入参数类型</span></span><br><span class="line"><span class="comment">		resultType：返回结果类型</span></span><br><span class="line"><span class="comment">		#&#123;&#125;：占位符，起到占位作用，如果返回的结果是基本类型(string int long ....),则#&#123;&#125;中的变量可以任意写</span></span><br><span class="line"><span class="comment">		 简单的根据ID查询一个用户</span></span><br><span class="line"><span class="comment">		%&#123;&#125;：拼接符，字符串原样拼接，如果传入的参数是基本类型，那么$&#123;&#125;中的变量必须是value</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">		select id,name,sex,birthday from student</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="通过id查询学生"><a href="#通过id查询学生" class="headerlink" title="通过id查询学生"></a>通过id查询学生</h3><h4 id="采用-号赋值"><a href="#采用-号赋值" class="headerlink" title="采用?号赋值"></a>采用?号赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		InputStream in = Student.class.getResourceAsStream(<span class="string">"/SqlMapConfig.xml"</span>);</span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">		SqlSession session = factory.openSession();</span><br><span class="line">		Student student = (Student) session.selectOne(<span class="string">"com.dao.StudentDao.findStudentById"</span>,<span class="number">1</span>);</span><br><span class="line">		System.out.println(student.getId() + <span class="string">"\t"</span> + student.getName() + <span class="string">"\t"</span> +  student.getSex() + <span class="string">"\t"</span> + student.getBirthday());</span><br><span class="line">		session.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的POJO映射文件中添加如下代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据编号查询学生,采用sql语句中?号的形式进行赋值的方法进行查取 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findStudentById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultType</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">		select id,name,sex,birthday from student where id = #&#123;ss&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="采用拼接字符"><a href="#采用拼接字符" class="headerlink" title="采用拼接字符"></a>采用拼接字符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		InputStream in = Student.class.getResourceAsStream(<span class="string">"/SqlMapConfig.xml"</span>);</span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">		SqlSession session = factory.openSession();</span><br><span class="line">		Student student = (Student) session.selectOne(<span class="string">"com.dao.StudentDao.findStudentById2"</span>,<span class="number">2</span>);</span><br><span class="line">		System.out.println(student.getId() + <span class="string">"\t"</span> + student.getName() + <span class="string">"\t"</span> + student.getSex());</span><br><span class="line">		session.close();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的POJO映射文件中添加如下代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据编号查询学生，采用拼接的方式进行查取，</span></span><br><span class="line"><span class="comment">	这里由于传入的是基本类型，并且采用了拼接，所以只可以传入value --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findStudentById2"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultType</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">		select id,name,sex,birthday from student where id = $&#123;value&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="根据编号区间进行查询"><a href="#根据编号区间进行查询" class="headerlink" title="根据编号区间进行查询"></a>根据编号区间进行查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id区间进行查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		InputStream in = Student.class.getResourceAsStream(<span class="string">"/SqlMapConfig.xml"</span>);</span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">		SqlSession session = factory.openSession();</span><br><span class="line">		Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">		map.put(<span class="string">"min"</span>, <span class="number">1</span>);</span><br><span class="line">		map.put(<span class="string">"max"</span>, <span class="number">2</span>);</span><br><span class="line">		<span class="comment">/*通过将最大值与最小值存到Map集合中，我们可以获取map集合中的最大值，与最小值*/</span></span><br><span class="line">		List&lt;Student&gt; list = session.selectList(<span class="string">"com.dao.StudentDao.findStudentBetween"</span>, map );</span><br><span class="line">		<span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">			System.out.println(student.getId() + <span class="string">"\t"</span> + student.getName() + <span class="string">"\t"</span> + student.getSex() +</span><br><span class="line">				<span class="string">"\t"</span> + student.getBirthday());</span><br><span class="line">		&#125;</span><br><span class="line">		session.close();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的POJO映射文件中添加如下代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据编号查询学生，采用拼接的方式进行查取，</span></span><br><span class="line"><span class="comment">	这里由于传入的是基本类型，并且采用了拼接，所以只可以传入value --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findStudentById2"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultType</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">		select id,name,sex,birthday from student where id = $&#123;value&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="根据编号大小进行查询"><a href="#根据编号大小进行查询" class="headerlink" title="根据编号大小进行查询"></a>根据编号大小进行查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询编号小于2号的学生</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		InputStream in = Student.class.getResourceAsStream(<span class="string">"/SqlMapConfig.xml"</span>);</span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder()</span><br><span class="line">				.build(in);</span><br><span class="line">		SqlSession session = factory.openSession();</span><br><span class="line">		List&lt;Student&gt; list = session.selectList(<span class="string">"com.dao.StudentDao.findLess"</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">			System.out.println(student.getId() + <span class="string">"\t"</span> + student.getName() + <span class="string">"\t "</span>+ student.getSex());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		session.close();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的POJO映射文件中添加如下代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查编号小于参数的学生 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findLess"</span> <span class="attr">resultType</span>=<span class="string">"com.pojo.Student"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">		select id,name,sex,birthday from student where id &amp;lt; #&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="动态Where子句进行查询"><a href="#动态Where子句进行查询" class="headerlink" title="动态Where子句进行查询"></a>动态Where子句进行查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用动态where子句，只可以去掉前面的and而不可以去掉后面的and</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		InputStream in = Student.class.getResourceAsStream(<span class="string">"/SqlMapConfig.xml"</span>);</span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">		SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line">		Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">		map.put(<span class="string">"id"</span>, <span class="number">1</span>);</span><br><span class="line">		map.put(<span class="string">"name"</span>, <span class="string">"李飞"</span>);</span><br><span class="line">		List&lt;Student&gt; list = session.selectList(<span class="string">"com.dao.StudentDao.dynamicWhere"</span>, map);</span><br><span class="line">		<span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">			System.out.println( student.getId() + <span class="string">"\t"</span> + student.getName() + <span class="string">"\t"</span> + student.getSex() + <span class="string">"\t"</span> + student.getBirthday());</span><br><span class="line">		&#125;</span><br><span class="line">		session.close();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的POJO映射文件中添加如下代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态SQL之Where子句，也就是where中的部分条件可以有可以没有 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"dynamicWhere"</span> <span class="attr">resultType</span>=<span class="string">"com.pojo.Student"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">		select id,name,sex,birthday from student</span><br><span class="line">		<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">				and id = #&#123;id&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null"</span>&gt;</span></span><br><span class="line">				and name = #&#123;name&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex!=null"</span>&gt;</span></span><br><span class="line">				 and sex = #&#123;sex&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="MyBatis中的物理分页"><a href="#MyBatis中的物理分页" class="headerlink" title="MyBatis中的物理分页"></a>MyBatis中的物理分页</h2><blockquote>
<p>MyBatis中的物理分页可以通过RowBounds进行分页，与逻辑分页相比，物理分页效率更加低下，当我们需要编号为23-50的人的数据的时候，其实通过物理分页我们将会查询到50个人的数据，而通过逻辑分页我们只需要查询编号为23-50的人的数据</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查所有学生 ：逻辑分页 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultType</span>=<span class="string">"stu"</span>&gt;</span></span><br><span class="line">       select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"fields"</span>/&gt;</span> from student</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查所有学生 ：物理分页 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"fenye"</span> <span class="attr">resultType</span>=<span class="string">"stu"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">       select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"fields"</span>/&gt;</span> from student limit #&#123;x&#125;,#&#123;y&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这里是使用了物理分页*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fenye</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		InputStream is = fenye.class.getResourceAsStream(<span class="string">"/SqlMapConfig.xml"</span>);</span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is,<span class="string">"MySQL"</span>);</span><br><span class="line"></span><br><span class="line">		SqlSession  session = factory.openSession();</span><br><span class="line"></span><br><span class="line">		Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">		map.put(<span class="string">"x"</span>, <span class="number">5</span>);</span><br><span class="line">		map.put(<span class="string">"y"</span>, <span class="number">5</span>);</span><br><span class="line">		List&lt;Student&gt; list = session.selectList(<span class="string">"com.dao.StudentDAO.fenye"</span>, map);</span><br><span class="line">		<span class="keyword">for</span> (Student s : list) &#123;</span><br><span class="line">			System.out.println(s.getId()+<span class="string">"\t"</span>+s.getSname());</span><br><span class="line">		&#125;</span><br><span class="line">		session.commit();</span><br><span class="line">		session.close();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="得到主键"><a href="#得到主键" class="headerlink" title="得到主键"></a>得到主键</h2><blockquote>
<p>项目中我们经常会使用到获取刚刚插入数据的主键，但是如果我们没有进行特别的配置，MyBatis将不会给我们返回主键，而是返回一个NULL或者0，所以我们需要进行如下配置来获取刚刚插入数据的键值</p>
</blockquote>
<p>主键自动增长的时候<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新增学生 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        keyProperty指定主键返回的值存入到哪个属性里面，order值的是获取主键的时机，实在插入语句执行前还是执行后，</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">           select LAST_INSERT_ID()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        insert into student(sname,sex,sage) values(#&#123;sname&#125;,#&#123;sex&#125;,#&#123;sage&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> Mybatis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hibernate中的知识点]]></title>
      <url>/2017/11/13/Hibernate%E4%B8%AD%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="持久化类-Persistent-Object-简称PO"><a href="#持久化类-Persistent-Object-简称PO" class="headerlink" title="持久化类(Persistent Object 简称PO)"></a>持久化类(Persistent Object 简称PO)</h2><blockquote>
<p>持久化类就是一个Java类，当这个类与表建立了映射关系(通过XML配置文件)</p>
</blockquote>
<p>PO = POJO(JavaBean) + XML配置文件</p>
<h3 id="JavaBean规范："><a href="#JavaBean规范：" class="headerlink" title="JavaBean规范："></a>JavaBean规范：</h3><ol>
<li>必须有构造方法，如果没有无参的需要自己加上一个无参构造方法</li>
<li>属性必须私有，并且必须提供set以及get方法</li>
</ol>
<h3 id="PO编写规则"><a href="#PO编写规则" class="headerlink" title="PO编写规则"></a>PO编写规则</h3><ol>
<li>提供一个无参的public修饰符的构造器（因为底层要通过反射创建对象）</li>
<li>提供一个标识属性，映射表的主键字段（唯一标识ID,也就是所说的OId）</li>
<li>所有属性提供public访问控制符的set以及get方法</li>
<li>标识属性应尽量使用基本类型的包装类</li>
</ol>
<h3 id="持久化类的三种状态"><a href="#持久化类的三种状态" class="headerlink" title="持久化类的三种状态"></a>持久化类的三种状态</h3><ol>
<li>瞬时态<blockquote>
<p>刚创建的对象，没有被持久化到数据库（没有持久化表示OId,OId就是数据库中的主键，也就是唯一区分JavaBean对象的属性），没有被纳入Session管理（没有缓存到Session中）</p>
</blockquote>
</li>
</ol>
<ol start="2">
<li>持久态<blockquote>
<p>存在于数据库中（有唯一标识OId），并且被Session进行管理（缓存到了Session中）</p>
</blockquote>
</li>
</ol>
<p>注意事项：<br>持久态的对象有更新数据库的能力，示例如下(正常情况下，我们需要执行session.update()方法进行修改，但是这里是由于session的一级缓存，所以持久态对象在不执行session.update()方法的时候依然具有更新数据库的能力)</p>
<blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.util.HibernateUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Session session = HibernateUtils.getSession();</span><br><span class="line">		Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">		User user = session.get(User.class, <span class="number">18</span>);</span><br><span class="line">		user.setName(<span class="string">"wxwddd"</span>);</span><br><span class="line"></span><br><span class="line">		transaction.commit();</span><br><span class="line">		session.close();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ol start="3">
<li>脱管态<blockquote>
<p>存在于数据库中（有唯一标识OId），没有被Session进行管理（没有被Session进行缓存）</p>
</blockquote>
</li>
</ol>
<p>下面代码的注意事项：</p>
<blockquote>
<p>当我们session执行save方法的时候，其实session已经从连接那里取得了id值，因此当我们执行save方法的时候，user对象将会得到一个session获取到的id，并且缓存到session中，尽管事务没有提交</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Hibernate;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.util.HibernateUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		Session session = HibernateUtils.getSession();</span><br><span class="line">		Transaction transaction = session.beginTransaction();</span><br><span class="line">		User user = <span class="keyword">new</span> User();</span><br><span class="line">		user.setAge(<span class="number">29</span>);</span><br><span class="line">		user.setName(<span class="string">"wxw"</span>);</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">      这里其实已经获取到了id值，因为session已经与数据库连接上了</span></span><br><span class="line"><span class="comment">      当session执行save方法的时候，将会把user对象缓存到session中，尽管这时还没有提交事务</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">		Serializable s = session.save(user);</span><br><span class="line">    <span class="comment">/*此时user已经成为了持久态，既进入了缓存，又得到了OId*/</span></span><br><span class="line"></span><br><span class="line">		System.out.println(s);</span><br><span class="line">		System.out.println(user.getId());</span><br><span class="line">		transaction.commit();</span><br><span class="line">		session.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*此时user依然存在，但是session不存在，此时变成了脱管态*/</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<blockquote>
<p>三个状态的转换</p>
</blockquote>
<figure class="image-box">
                <img src="http://on3w7gc9m.bkt.clouddn.com/01-%E4%B8%89%E4%B8%AA%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.bmp" alt title class>
                <p></p>
            </figure>
<hr>
<h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><h3 id="自然主键"><a href="#自然主键" class="headerlink" title="自然主键"></a>自然主键</h3><blockquote>
<p>当我们创建表结构的时候，有的时候表结构中就有唯一可以确定某个记录的时候，则该列称为自然主键，但是我们在开发中一般不会采用自然主键，因为自然主键可以能随着规则被打破而受到影响</p>
</blockquote>
<h3 id="代理主键"><a href="#代理主键" class="headerlink" title="代理主键"></a>代理主键</h3><blockquote>
<p>既然自然主键不可以用来充当主键，所以在表结构定义的时候，我们一般加上一列用来唯一区分每一条记录，称为代理主键！</p>
</blockquote>
<h3 id="主键的生成策略"><a href="#主键的生成策略" class="headerlink" title="主键的生成策略"></a>主键的生成策略</h3><ol>
<li>increment 适合于short int long 作为主键，不是使用数据库的自动增长机制，一般不建议使用<blockquote>
<p>先找数据库中id的最大值，然后给最大值+1，作为下一条记录的主键，Hibernate执行代码如下</p>
</blockquote>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Hibernate:</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">max</span>(<span class="keyword">id</span>)</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        <span class="keyword">User</span></span><br><span class="line">Hibernate:</span><br><span class="line">    <span class="keyword">insert</span></span><br><span class="line">    <span class="keyword">into</span></span><br><span class="line">        <span class="keyword">User</span></span><br><span class="line">        (<span class="keyword">name</span>, age, <span class="keyword">id</span>)</span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">        (?, ?, ?)</span><br></pre></td></tr></table></figure>
<p>使用increment在并发访问的情况下，由于多个人并发查询最大值的时候极有可能相同，因此在插入的时候将会产生问题！</p>
<ol start="2">
<li><p>identity 适用于short int long作为主键，并且使用该生成策略的时候，要求数据库的主键必须可以自动增长！因为该策略采用了数据库底层的自动增长机制！所以对于oracle这种不可以自动增长的数据库，是不可以采用这种策略的！</p>
<blockquote>
<p>不经常使用，因为如果中途更换数据库，这个策略将不会适用于oracle数据库</p>
</blockquote>
</li>
<li><p>sequence 适用于short int long作为主键，底层采用的是序列增长的方式</p>
<blockquote>
<p>只支持oracle数据库，也支持DB2数据库，因为oracle自动增长使用的是序列进行自动增长,不支持MySQL数据库</p>
</blockquote>
</li>
<li><p>uuid 适用于char varchar 数据类型，使用随机的字符串作为主键</p>
</li>
<li><p>native 本地策略，根据底层数据库的不同，自动选择适用于该种数据库的生成策略 (适用于 short int long 数据类型)</p>
<blockquote>
<p>如果本地使用MySQL数据库，将会使用identity，如果使用oracle，将会使用sequence</p>
</blockquote>
</li>
<li><p>assigned 主键自己进行维护，不使用Hibernate框架进行维护</p>
</li>
</ol>
<hr>
<h2 id="Hibernate中的缓存"><a href="#Hibernate中的缓存" class="headerlink" title="Hibernate中的缓存"></a>Hibernate中的缓存</h2><h3 id="Session级别的缓存-一级缓存"><a href="#Session级别的缓存-一级缓存" class="headerlink" title="Session级别的缓存(一级缓存)"></a>Session级别的缓存(一级缓存)</h3><blockquote>
<p>Hibernate内部采用了缓存机制，就是说将数据存放到一块单独的内存空间中，以便增强我们操控数据的效率</p>
</blockquote>
<ol>
<li>一级缓存是Session级别的，不可以卸载的，一级缓存的生命周期与session一致</li>
<li>session内部存放了很多集合，用来存放缓存的数据</li>
</ol>
<h4 id="Session中的快照机制"><a href="#Session中的快照机制" class="headerlink" title="Session中的快照机制"></a>Session中的快照机制</h4><blockquote>
<p>正是因为Session中快照机制的存在，所以我们的持久化对象才有操纵数据库的能力<br>Session中可以划分为两个区域，一个缓存区域，一个快照区域</p>
</blockquote>
<p>当我们执行查询方法的时候，数据将会缓存到Hibernate中的缓存区，和快照区域，但是当我们修改数据的时候，缓存区域的数据进行修改，快照区域的数据不会进行修改，但是当我们使用事务进行提交的时候，事务会自动判别快照区域与内存区域的数据，并对其进行比较，如果两者一致，则不进行修改，如果两者不一致，则进行修改！</p>
<h3 id="SessionFactory级别的缓存-二级缓存"><a href="#SessionFactory级别的缓存-二级缓存" class="headerlink" title="SessionFactory级别的缓存(二级缓存)"></a>SessionFactory级别的缓存(二级缓存)</h3><blockquote>
<p>由于Session生命周期的短暂，所以Hibernate也提供了二级缓存，二级缓存默认没有开启，需要手动配置才可以使用，二级缓存可以在多个session中共享数据，有点类似于我们进程与线程</p>
</blockquote>
<hr>
<h2 id="Hibernate中的事务"><a href="#Hibernate中的事务" class="headerlink" title="Hibernate中的事务"></a>Hibernate中的事务</h2><h3 id="事务的4个特性："><a href="#事务的4个特性：" class="headerlink" title="事务的4个特性："></a>事务的4个特性：</h3><ol>
<li>原子性（atomicity）：一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</li>
<li>隔离性（isolation）：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</li>
<li>一致性（consistency）：事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</li>
<li>持久性（durability）：持久性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</li>
</ol>
<h3 id="并发事务引发的问题（隔离性所引发的问题）"><a href="#并发事务引发的问题（隔离性所引发的问题）" class="headerlink" title="并发事务引发的问题（隔离性所引发的问题）"></a>并发事务引发的问题（隔离性所引发的问题）</h3><ol>
<li>脏读：一个事务读取了另一个事务未提交的数据</li>
<li>不可重复读：一个事务读到了另一个事务更新之后的数据，导致多次查询结果不一致</li>
<li>虚读（幻读）：一个事务读到了另一个事务新增之后的数据，导致多次查询结果不一致<blockquote>
<p>不可重复读与虚读违背了事务的一致性，多个事务读取同一个数据，读取到的数据应该是一致的，也就是事务的一致性！</p>
</blockquote>
</li>
</ol>
<h3 id="避免并发事务引发的问题"><a href="#避免并发事务引发的问题" class="headerlink" title="避免并发事务引发的问题"></a>避免并发事务引发的问题</h3><blockquote>
<p>通过设置隔离级别来避免事务并发所引起的问题</p>
</blockquote>
<ol>
<li>read-uncommited 读未提交 脏读，不可重复读，虚读都有可能发生</li>
<li>read-commited 读已提交 避免了脏读，但是不可重复读，虚读都有可能发生</li>
<li>repeatable read 重复读  不可重复读，但是虚读有可能发生</li>
<li>Serializable 串行化 以上情况都可以避免，但是效率低，有点类似于线程的同步</li>
</ol>
<p>MySQL 默认隔离级别为 repeatable read ,可以避免脏读和不可以重复读，而幻读则发生几率很低，忽略不计<br>oracle 默认隔离级别为 read-commited</p>
<h3 id="Hibernate核心配置文件配置事务隔离级别"><a href="#Hibernate核心配置文件配置事务隔离级别" class="headerlink" title="Hibernate核心配置文件配置事务隔离级别"></a>Hibernate核心配置文件配置事务隔离级别</h3><blockquote>
<p>通过设置hibernate.connection.isolation</p>
</blockquote>
<ol>
<li>read-uncommited   值为1</li>
<li>read-commited 值为2</li>
<li>repeatable read 值为4</li>
<li>serializable 值为8</li>
</ol>
<hr>
<h2 id="丢失更新问题"><a href="#丢失更新问题" class="headerlink" title="丢失更新问题"></a>丢失更新问题</h2><blockquote>
<p>上面讲的脏读，不可重复读，幻读，都是针对Hibernate中读取数据因数据库不同隔离级别而产生的问题，而丢失更新则是对数据库进行修改所产生的问题</p>
</blockquote>
<h3 id="丢失更新问题的产生"><a href="#丢失更新问题的产生" class="headerlink" title="丢失更新问题的产生"></a>丢失更新问题的产生</h3><blockquote>
<p>丢失更新问题的产生很简单，就是当我们访问数据库的时候，两个人分别获取到了同一条数据，并且内容一致，但是一个人修改了自己读取到的数据的一个字段，另一个人修改了自己读取到的数据的另一个字段，结果可想而知，也就是修改了一个字段，并没有两个字段都进行修改，也就产生了丢失更新的问题</p>
</blockquote>
<p>如图所示：<br><figure class="image-box">
                <img src="http://on3w7gc9m.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720171116161731.png" alt title class>
                <p></p>
            </figure></p>
<h3 id="解决丢失更新问题"><a href="#解决丢失更新问题" class="headerlink" title="解决丢失更新问题"></a>解决丢失更新问题</h3><ol>
<li>悲观锁（不常用），采用数据库的锁机制进行操作，对于我们每次操作，数据库都会在sql语句后面加上for update，操作完成之后，再把锁进行释放，效率很低</li>
<li>乐观锁：JavaBean属性添加一个新的属性(version)<blockquote>
<p>数据库首先查询数据，然后进行修改，提交的时候，将会比较版本号是否与查出的版本号一致，如果不一致，将会报错，否则根据版本号与主键值进行修改</p>
</blockquote>
</li>
</ol>
<h4 id="悲观锁的使用"><a href="#悲观锁的使用" class="headerlink" title="悲观锁的使用"></a>悲观锁的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.get(Customer.class, <span class="number">1</span>, LockMode.UPGRADE);</span><br></pre></td></tr></table></figure>
<h4 id="乐观锁的使用"><a href="#乐观锁的使用" class="headerlink" title="乐观锁的使用"></a>乐观锁的使用</h4><ol>
<li>JavaBean中添加version属性，并且设置相应的set以及get方法</li>
<li>在映射文件中 添加 如下代码<blockquote>
<version name="version">
</version></blockquote>
</li>
</ol>
<hr>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> Hibernate </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解Hibernate中的SessionFactory与Session]]></title>
      <url>/2017/11/13/%E7%90%86%E8%A7%A3Hibernate%E4%B8%AD%E7%9A%84SessionFactory/</url>
      <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p> SessionFactory接口负责初始化Hibernate。它充当数据存储源的代理，并负责创建Session对象。这里用到了工厂模式。需要注意的是SessionFactory并不是轻量级的，因为一般情况下，一个项目通常只需要一个SessionFactory就够，当需要操作多个数据库时，可以为每个数据库指定一个SessionFactory。<br>                    – 摘自百度百科</p>
<hr>
<h2 id="SessionFactory内部构造"><a href="#SessionFactory内部构造" class="headerlink" title="SessionFactory内部构造"></a>SessionFactory内部构造</h2><blockquote>
<p>sessionFactory 内部分为两个部分</p>
</blockquote>
<ol>
<li>内部机构：用来存放当前数据库的配置文件，以及映射文件和预定义的SQL语句</li>
<li>外部结构：用来存放每个session缓存的内容(session是一级缓存，每次都会将内容同步到二级缓存中，也就是SessionFactory就是二级缓存)</li>
</ol>
<p><img src="http://on3w7gc9m.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720171113102044.png"></p>
<h3 id="SessionFactory的线程安全性"><a href="#SessionFactory的线程安全性" class="headerlink" title="SessionFactory的线程安全性"></a>SessionFactory的线程安全性</h3><p>  相比Session来说，因为SessionFactory采用了工厂模式，也就是单例，并且使用了synchronized，在每个项目中只有1个，所以SessionFactory是线程安全的，但是Session则是线程不安全的，对于同一个Session，如果执行了多个操作，那么多个线程同时访问同一个Session，将会使得Session中的内容的逻辑异常混乱！</p>
<blockquote>
<p>因此创建的Session实例必须在本地存取空上运行，使之总与当前的线程相关。这里就需要用到ThreadLocal,在很多种Session 管理方案中都用到了它.ThreadLocal 是Java中一种较为特殊的线程绑定机制，通过ThreadLocal存取的数据， 总是与当前线程相关， 也就是说，JVM 为每个运行的线程，绑定了私有的本地实例存取空间，从而为多线程环境常出现的并发访问问题提供了一种隔离机制,ThreadLocal并不是线程本地化的实现,而是线程局部变量。也就是说每个使用该变量的线程都必须为该变量提供一个副本,每个线程改变该变量的值仅仅是改变该副本的值,而不会影响其他线程的该变量的值,ThreadLocal是隔离多个线程的数据共享，不存在多个线程之间共享资源,因此不再需要对线程同步</p>
</blockquote>
<hr>
<h2 id="SessionFactory-的特点"><a href="#SessionFactory-的特点" class="headerlink" title="SessionFactory 的特点"></a>SessionFactory 的特点</h2><ol>
<li>由Configuration通过加载配置文件而创建</li>
<li>SessionFactory对象中保存了当前的数据库配置信息以及所有映射关系和预定义的SQL语句，同时SessionFactory负责维护Hibernate的二级缓存</li>
<li>一个SessionFactory对应一个数据库，并且应用可以通过SessionFactory来获取Session实例</li>
<li>SessionFactory是线程安全的，也就是说可以被多个线程所共享</li>
<li>SessionFactory是重量级的，创建以及销毁格外消耗时间</li>
<li>SessionFactory需要一个较大的缓存，用来存放预定义的SQL语句及实体的映射信息。另外可以配置一个缓存插件，这个插件被称之为Hibernate的二级缓存，被多线程所共享</li>
</ol>
<p>一个建议的HibernateUtils类（封装了HibernateSessionFactory）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">final</span> Configuration CONFIG;</span><br><span class="line">	<span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">final</span> SessionFactory FACTORY;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		CONFIG = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">		FACTORY = CONFIG.buildSessionFactory();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Session <span class="title">getSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> FACTORY.openSession();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="Session常用的方法"><a href="#Session常用的方法" class="headerlink" title="Session常用的方法"></a>Session常用的方法</h2><ol>
<li>save() 将数据持久化到数据库中</li>
<li>update() 对查出来的数据进行修改，根据id值进行修改</li>
<li>get() 根据相应的反射类以及id值进行查询</li>
<li>delete() 虽然传递的是一个对象类型的参数，但是实际上是根据id值进行删除</li>
<li>saveOrUpdate() 如果数据存在，则进行修改，反之将数据持久化到数据库中</li>
<li>clear() 将session中的缓存全部清空</li>
<li>evict(Object object) 将缓存中的指定对象从缓存中清除</li>
<li>flush() 刷出缓存，与Session快照机制相吻合，如果快照区与缓存区域一致，则进行修改；也就是说与数据库的内容进行同步</li>
</ol>
<blockquote>
<p>注意：如果数据库表中的主键采用了自增策略，我们不可以对id值进行设置，如果设置将会报错，因为id值已经交给Hibernate进行管理，无需我们自己进行设值</p>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="绑定本地Session"><a href="#绑定本地Session" class="headerlink" title="绑定本地Session"></a>绑定本地Session</h2><p><img src="http://on3w7gc9m.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720171116175231.png" alt></p>
<h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><blockquote>
<p>底层是Map集合，键是当前的线程，值（存什么就是什么）</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> Hibernate </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[手动搭建Hibernate开发环境]]></title>
      <url>/2017/11/12/Hibernate%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>Hibernate框架是一个开源的轻量级框架，与传统的EJB（Sun 公司提供的J2EE开发规范，重量级的一个框架，重量级是因为EJB框架依赖jar包较大，使用很麻烦）完全不同</p>
</blockquote>
<p>Hibernate的核心便是ORM（Object Relation Mapping）,也就是我们传统Java中的面向对象的关系应用到了数据库中（并不是使得数据库成为面向对象数据库，而是通过一种XML的配置文件，将我们的操作转变为Hibernate所提及的面向对象操作）</p>
<ol>
<li>Object：特指我们常说的Java中的对象类</li>
<li>Relation：也就是我们常说的表的结构</li>
<li>Mapping：XML配置文件，作为两者（Object与Relation）的中间桥梁</li>
</ol>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>Hibernate对于不同的数据库都可以使用Hibernate中特有的hql语句进行操作，只是配置文件相差而已！</li>
<li>Hibernate封装了我们之前的JDBC的操作，极大程度的避免了重复繁琐的代码</li>
<li>Hibernate性能较前任EJB相比有极大的提高，映射文件也很灵活，支持多种关系映射，例如一对多，多对多等</li>
</ol>
<blockquote>
<p>相比Mybatis来说，Hibernate封装更为彻底，所以相比Mybatis来说，灵活性比较欠缺</p>
</blockquote>
<hr>
<h2 id="手动搭建Hibernate开发环境"><a href="#手动搭建Hibernate开发环境" class="headerlink" title="手动搭建Hibernate开发环境"></a>手动搭建Hibernate开发环境</h2><ol>
<li>将数据库驱动包导入到WEB-INF下面的lib里面，（很多人可能会问Hibernate不是已经可以用面向对象的思维来操作数据库了么，但是为什么还是需要导入数据库jar包呢，原因很简单，因为Hibernate是跨数据库的，它无法识别我们使用的是哪个数据库来进行开发，所以需要我们收到导入相对应数据库的jar包）</li>
<li>导入Hibernate开发所必须的core开发包，<a href="https://github.com/sivanWu0222/HibernateDoc/tree/master/jar/required" target="_blank" rel="noopener">点击下载</a></li>
<li>导入Hibernate所依赖的jar包(1个是log4j规范接口包，1个实现包，另一个Hibernate规范接口包) <a href="https://github.com/sivanWu0222/HibernateDoc/tree/master/jar/dependency/log4j" target="_blank" rel="noopener"></a></li>
<li>手动编写一个JavaBean（<strong>JavaBean中的所有属性全部使用包装类，而不是基本类型，例如当我们插入一个顾客，如果年龄忘记赋值，则为0，但是包装类型则为null，因此建议使用包装类</strong>）：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">0</span>;</span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `cst_customer`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`cst_customer`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_customer`</span> (</span><br><span class="line">  <span class="string">`cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`cust_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cust_user_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cust_create_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cust_source`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cust_industry`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cust_level`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cust_linkman`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cust_phone`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cust_mobile`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`cust_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">94</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*使用包装类，因为默认值是null*/</span></span><br><span class="line">	<span class="keyword">private</span> Long cust_id;</span><br><span class="line">	<span class="keyword">private</span> String cust_name;</span><br><span class="line">	<span class="keyword">private</span> Long cust_user_id;</span><br><span class="line">	<span class="keyword">private</span> Long cust_create_id;</span><br><span class="line">	<span class="keyword">private</span> String cust_source;</span><br><span class="line">	<span class="keyword">private</span> String cust_industry;</span><br><span class="line">	<span class="keyword">private</span> String cust_level;</span><br><span class="line">	<span class="keyword">private</span> String cust_linkman;</span><br><span class="line">	<span class="keyword">private</span> String cust_phone;</span><br><span class="line">	<span class="keyword">private</span> String cust_mobile;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getCust_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_id</span><span class="params">(Long cust_id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_id = cust_id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCust_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_name</span><span class="params">(String cust_name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_name = cust_name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getCust_user_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_user_id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_user_id</span><span class="params">(Long cust_user_id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_user_id = cust_user_id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getCust_create_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_create_id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_create_id</span><span class="params">(Long cust_create_id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_create_id = cust_create_id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCust_source</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_source;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_source</span><span class="params">(String cust_source)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_source = cust_source;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCust_industry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_industry;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_industry</span><span class="params">(String cust_industry)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_industry = cust_industry;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCust_level</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_level;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_level</span><span class="params">(String cust_level)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_level = cust_level;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCust_linkman</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_linkman;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_linkman</span><span class="params">(String cust_linkman)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_linkman = cust_linkman;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCust_phone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_phone;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_phone</span><span class="params">(String cust_phone)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_phone = cust_phone;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCust_mobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cust_mobile;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_mobile</span><span class="params">(String cust_mobile)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cust_mobile = cust_mobile;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>编写JavaBean所对应的XML映射文件（新建一个XML文件，也就是将Java中的类与数据库中的表进行关联），默认文件名字为 <strong>类名.hbm.xml</strong>，并且文件默认与JavaBean在同一个包下</li>
<li><p>为新生成的XML映射文件导入约束(hibernate是dtd约束)，打开\lib\hibernate-core-5.0.7.Final.jar/org/hibernate/hibernate-mapping-3.0.dtd，选择第10-13行代码，也就是我们要找的约束，代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写XML配置文件，如果没有出现提示（可能是网络不通），可以配置本地的dtd约束，步骤如下</p>
<blockquote>
<ol>
<li><a href="https://github.com/sivanWu0222/HibernateDoc/tree/master/dtd" target="_blank" rel="noopener">下载dtd约束文件</a></li>
<li>打开Eclipse，点击Window-&gt;Preferences-&gt;XML-&gt;XML Catalog-&gt;选中User Specified Entries-&gt;add</li>
<li>Location 位置处点击File System(浏览本地下载好的dtd文件，上面有下载链接),key type中选择URI,Key填写 <strong><a href="http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd" target="_blank" rel="noopener">http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd</a></strong></li>
</ol>
</blockquote>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 编写类与表的对应关系 --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.itheima.domain.Customer"</span> <span class="attr">table</span>=<span class="string">"cst_customer"</span>&gt;</span><span class="comment">&lt;!-- catalog属性用来配置数据库，但是我们在核心配置文件中已经指定了数据库，所以这里不需要写 --&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"cust_id"</span> <span class="attr">column</span>=<span class="string">"cust_id"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 配置主键生成的策略，native意思就是使用数据库的生成策略 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 对于name与column相同的属性，可以省略column，此时默认为name --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_name"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_user_id"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_create_id"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_source"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_industry"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_level"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_linkman"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_phone"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_mobile"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li>编写hibernate核心配置文件(不会配置的可以<a href>参考</a>)，默认文件名为<strong>hibernate.cfg.xml（存放到src目录下）</strong>按照如同上面的方法新建XML文件，并且引入约束<blockquote>
<p>配置内容有 5个必须参数  +  可选参数   +   映射配置文件</p>
</blockquote>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 编写hibernate核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 5个必须的基本参数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql:///hibernate_day01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>1018222wxw<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库的方言 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 可选配置 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 控制台打印SQL语句 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 控制台格式化打印的SQL语句 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 定义表的自动生成策略 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 先删除原来的表(如果存在)，再创建新表 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--  &lt;property name="hibernate.hbm2ddl.auto"&gt;create&lt;/property&gt;--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 先删除原来的表(如果存在)，再创建新表，插入数据(如果有),用完之后,最后进行删除 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- &lt;property name="hibernate.hbm2ddl.auto"&gt;create-drop&lt;/property&gt; --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			1.如果原来的表不存在，可以帮我们创建新表，并且插入数据</span></span><br><span class="line"><span class="comment">			2.如果数据库中新增了一列，可以使用update帮助我们在表结构中增加一列（前提是JavaBean已经配置好了新的属性以及set和get方法，并且映射文件也进行了配置）</span></span><br><span class="line"><span class="comment">			3.如果原来的数据库已经存在，则直接添加数据</span></span><br><span class="line"><span class="comment">		 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- &lt;property name="hibernate.hbm2ddl.auto"&gt;update&lt;/property&gt; --&gt;</span><span class="comment">&lt;!-- 开发阶段使用 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- validate:用来对表结构以及对应的映射文件进行验证是否一致，如果不一致，则报错 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2dd.auto"</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 项目上线之后进行使用 --&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 编写映射文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/itheima/domain/Customer.hbm.xml"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="9">
<li>编写最基本的测试代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Customer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试保存一个客户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*1.加载总配置文件:默认加载src目录下的hibernate.cfg.xml文件*/</span></span><br><span class="line">		Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      如果我们在核心文件中没有配置映射文件，那么我们需要手动加载映射文件</span></span><br><span class="line"><span class="comment">      configuration.addResource("com/itheima/domain/Customer.cfg.xml");</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    configuration.add(<span class="string">""</span>)</span><br><span class="line">		<span class="comment">/*2.创建SessionFactory对象，用来生产Session对象*/</span></span><br><span class="line">		SessionFactory sessionFactory = configuration.buildSessionFactory();</span><br><span class="line">		<span class="comment">/*3.创建Session对象(持久化对象)*/</span></span><br><span class="line">		Session session = sessionFactory.openSession();</span><br><span class="line">		<span class="comment">/*4.开启事务*/</span></span><br><span class="line">		Transaction transaction = session.beginTransaction();</span><br><span class="line">		<span class="comment">/*5.编写保存代码*/</span></span><br><span class="line">		Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">		customer.setCust_name(<span class="string">"测试"</span>);</span><br><span class="line">		customer.setCust_level(<span class="string">"2"</span>);</span><br><span class="line">		customer.setCust_phone(<span class="string">"110"</span>);</span><br><span class="line">		<span class="comment">/*保存客户*/</span></span><br><span class="line">		session.save(customer);</span><br><span class="line">		<span class="comment">/*6.提交事务*/</span></span><br><span class="line">		transaction.commit();</span><br><span class="line">		<span class="comment">/*7.释放资源*/</span></span><br><span class="line">		session.close();</span><br><span class="line">		sessionFactory.close();<span class="comment">/*这里只是测试，因此释放sessionFactory*/</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><blockquote>
<p>hibernate核心配置文件不仅仅可以使用XML文件，也可以使用property文件，但是使用property文件的时候，我们需要注意，映射配置文件需要我们自己手动加载，并且property文件没有约束，即使写错也没有提示</p>
</blockquote>
<hr>
<p>总结：Hibernate虽然核心机制是orm，但是却实现了用面向对象的关系来操作数据库，通过orm技术来实现这一个目的，简化了我们持久化对象的流程，甚至对于那些不会编写SQL语句的Java程序员也是一个巨大的福音！</p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> Hibernate </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一个简单的Spring核心机制和其他方面的认知]]></title>
      <url>/2017/11/06/%E5%85%A5%E9%97%A8Spring/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>最近开始了解Spring，很多人都在告诉我需要使用Spring的时候，我们需要配置很多东西，很大一部分是在XML里面完成，而且还发现Spring可以通过我们配置的XML文件来创建对象，事实上就是这么做的，就好比如我们需要一把刀的时候，只需要去市场就可以买到，而不需要我们自己造了！感觉瞬间现代化了！</p>
</blockquote>
<hr>
<h2 id="一个简单的Spring核心机制"><a href="#一个简单的Spring核心机制" class="headerlink" title="一个简单的Spring核心机制"></a>一个简单的Spring核心机制</h2><blockquote>
<p>Spring里面融合的思想有很多，最核心的便是IOC, 也就是 Inverse of control，通过Spring自己带的一个容器，将我们所需要的对象创造出来，而不需要我们手工创造，极大的减少了代码的耦合！</p>
</blockquote>
<h3 id="手工实现一个简单的Spring核心机制"><a href="#手工实现一个简单的Spring核心机制" class="headerlink" title="手工实现一个简单的Spring核心机制"></a>手工实现一个简单的Spring核心机制</h3><blockquote>
<p>Spring 如何帮助我们创建对象呢？答案便是我们通过配置XML文件，Spring会帮助我们通过配置好的XML文件，进行对象的创建！</p>
</blockquote>
<ol>
<li>手动配置XML文件</li>
<li>通过我们自己写的一个SpringUtils来对XML文件进行解析，创建对象</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">name</span>=<span class="string">"com.pojo.Student"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getElement</span><span class="params">(String id)</span> <span class="keyword">throws</span> DocumentException, ClassNotFoundException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">		SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">		Document document = reader.read(<span class="string">"src/beans.xml"</span>);</span><br><span class="line">		Element element = (Element) document.selectSingleNode(<span class="string">"beans/bean[@id='"</span> + id + <span class="string">"']"</span>);</span><br><span class="line">		String name = element.attributeValue(<span class="string">"name"</span>);</span><br><span class="line">		Class c = Class.forName(name);</span><br><span class="line">		<span class="keyword">return</span> c.newInstance();</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*上面的代码等效为如下代码</span></span><br><span class="line"><span class="comment">		return Class.forName(((Element)new SAXReader().read("src/beans.xml").selectSingleNode("beans/bean[@id='"+ id + "']")).attributeValue("name")).newInstance();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h2 id="Spring的配置"><a href="#Spring的配置" class="headerlink" title="Spring的配置"></a>Spring的配置</h2><blockquote>
<p>当我们通过Spring进行配置文件的时候，有时候需要给具体的某个POJO类配置相应的属性为 数组或者Map集合，可以采用如下配置</p>
</blockquote>
<h3 id="属性的配置方式"><a href="#属性的配置方式" class="headerlink" title="属性的配置方式"></a>属性的配置方式</h3><ol>
<li><p>构造注入</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">    		<span class="comment">&lt;!-- 这里将会自动匹配两个参数的构造方法，如果构造方法不存在将会报错 --&gt;</span></span><br><span class="line"> 	      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"小王小马"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"> 	      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>set注入</p>
</li>
</ol>
<blockquote>
<p>我们不仅仅可以通过构造方法进行注入，而且还可以通过set注入，例子如下</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/context/spring-context-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Student"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"stuid"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"stuname"</span> <span class="attr">value</span>=<span class="string">"李四"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过这种XML配置方式，当创建好对象之后，给对象进行赋值的时候将会使用属性对应的set方法，如果没有属性对应的set方法，将会报错</p>
</blockquote>
<h4 id="配置数组属性以及Map集合"><a href="#配置数组属性以及Map集合" class="headerlink" title="配置数组属性以及Map集合"></a>配置数组属性以及Map集合</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/context/spring-context-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Student"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"stuid"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"stuname"</span> <span class="attr">value</span>=<span class="string">"李四"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里我们给数组属性进行配置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loves"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>看书<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>写博客<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>玩游戏<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 这里我们配置Map集合 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"others"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"height"</span> <span class="attr">value</span>=<span class="string">"180"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="属性也是一个对象"><a href="#属性也是一个对象" class="headerlink" title="属性也是一个对象"></a>属性也是一个对象</h4><blockquote>
<p>有的时候我们给属性赋值的时候，属性也是一个对象，这个时候我们就必须配置ref, 通过配置ref指向的类，我们便可以使用该属性，如果属性不是一个对象而是一个固定值，我们需要使用value进行配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/context/spring-context-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"StudentDAO"</span> <span class="attr">class</span>=<span class="string">"com.dao.StudentDAO"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"StudentService"</span> <span class="attr">class</span>=<span class="string">"com.service.StudentService"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">          当我们所配置的对象依赖于另一个对象的时候，可以配置ref属性，给定我们所以依赖对象的链接</span></span><br><span class="line"><span class="comment">          如果是一个固定的值，我们可以配置 value 属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentDAO"</span> <span class="attr">ref</span>=<span class="string">"StudentDAO"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote>
<p>Spring配置文件很强大，如果能够熟练应用Spring的配置文件，Spring的运用就会更加娴熟！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> Spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> XML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[部门员工简单级联]]></title>
      <url>/2017/11/06/%E9%83%A8%E9%97%A8%E5%91%98%E5%B7%A5%E7%AE%80%E5%8D%95%E7%BA%A7%E8%81%94/</url>
      <content type="html"><![CDATA[<blockquote>
<p>部门员工级联也就是，通过选择部门，员工也将会随着部门的改变而改变</p>
</blockquote>
<blockquote>
<p>通常我们查到有哪些部门，然后在Java中用集合来表示，但是如何用JavaScript来获取这些值变成了我们的一个短板，解决方法就是采用中间格式，例如json，XML文件等</p>
</blockquote>
<h2 id="显示部门"><a href="#显示部门" class="headerlink" title="显示部门"></a>显示部门</h2><blockquote>
<p>这里我们采用了Hibernate来获取部门，</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/dep.do"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> DepDAO depDao = <span class="keyword">new</span> DepDAO();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">		String method = request.getParameter(<span class="string">"method"</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"findAll"</span>.equals(method)) &#123;</span><br><span class="line">			doFindAll(request, response);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doFindAll</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		List&lt;Dep&gt; deps = depDao.findAll();</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		sb.append(<span class="string">"["</span>);</span><br><span class="line">		<span class="keyword">for</span> (Dep dep : deps) &#123;</span><br><span class="line">			sb.append(<span class="string">"&#123; 'depId': '"</span> + dep.getDepId() + <span class="string">"', 'depName': '"</span> + dep.getDepName() + <span class="string">"'&#125;,"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">		sb.append(<span class="string">"]"</span>);</span><br><span class="line">		System.out.println(sb);</span><br><span class="line"></span><br><span class="line">		response.getWriter().print(sb.toString());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应 index.jsp 代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dep = <span class="built_in">document</span>.getElementById(<span class="string">"dep"</span>);</span><br><span class="line"><span class="keyword">var</span> emp = <span class="built_in">document</span>.getElementById(<span class="string">"emp"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------------		部门		-----------*/</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.open(<span class="string">"get"</span>, <span class="string">"dep.do?method=findAll"</span>);</span><br><span class="line">request.send();</span><br><span class="line">request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( request.readyState == <span class="number">4</span> &amp;&amp; request.status == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> json = <span class="built_in">eval</span>(request.responseText);</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; json.length; i++ ) &#123;</span><br><span class="line">      <span class="keyword">var</span> option = <span class="keyword">new</span> Option(json[i].depName, json[i].depId);</span><br><span class="line">      dep.add(option);</span><br><span class="line">    &#125;</span><br><span class="line">    doEmp();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dep.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  doEmp();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<hr>
<h2 id="根据选择的部门得到该部门的员工"><a href="#根据选择的部门得到该部门的员工" class="headerlink" title="根据选择的部门得到该部门的员工"></a>根据选择的部门得到该部门的员工</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/emp.do"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> EmpDAO empDao = <span class="keyword">new</span> EmpDAO();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">		String method = request.getParameter(<span class="string">"method"</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"findByDepId"</span>.equals(method)) &#123;</span><br><span class="line">			doFindByDepId(request, response);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doFindByDepId</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		String depId = request.getParameter(<span class="string">"depId"</span>);</span><br><span class="line">		System.out.println(depId);</span><br><span class="line">		List&lt;Emp&gt; emps = empDao.findByProperty(<span class="string">"dep.depId"</span>, Integer.parseInt(depId));</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"["</span>);</span><br><span class="line">		<span class="keyword">for</span> (Emp emp : emps) &#123;</span><br><span class="line">			sb.append(<span class="string">"&#123; 'empId': '"</span> + emp.getEmpId() + <span class="string">"', 'empName': '"</span> + emp.getEmpName() + <span class="string">"'&#125;,"</span> );</span><br><span class="line">		&#125;</span><br><span class="line">		sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">		sb.append(<span class="string">"]"</span>);</span><br><span class="line">		response.getWriter().print(sb.toString());</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应index.jsp代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doEmp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  			<span class="comment">/*首先移除原来有的子节点*/</span></span><br><span class="line">  			<span class="keyword">while</span>(emp.hasChildNodes()) &#123;</span><br><span class="line">  				emp.removeChild(emp.firstChild);</span><br><span class="line">  			&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  			<span class="comment">/*添加原来的子节点*/</span></span><br><span class="line">  			<span class="keyword">var</span> request2 = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  			request2.open(<span class="string">"get"</span>, <span class="string">"emp.do?method=findByDepId&amp;depId="</span> + dep.value);</span><br><span class="line">  			request2.send();</span><br><span class="line">  			request2.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  				<span class="keyword">if</span>( request2.readyState == <span class="number">4</span> &amp;&amp; request2.status == <span class="number">200</span> ) &#123;</span><br><span class="line">            <span class="comment">/*这里将获得的文本按照严格意义转换为js中的数组*/</span></span><br><span class="line">  					<span class="keyword">var</span> empJson = <span class="built_in">eval</span>(request2.responseText);</span><br><span class="line">  					<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; empJson.length; i++ )&#123;</span><br><span class="line">  						<span class="keyword">var</span> option = <span class="keyword">new</span> Option(empJson[i].empName, empJson[i].empId);</span><br><span class="line">  						emp.add(option);</span><br><span class="line">  					&#125;</span><br><span class="line">  				&#125;</span><br><span class="line">  			&#125;</span><br><span class="line">  		&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>对于每次选择，都需要员工清空，否则，将会累加，员工只会越来越多</li>
<li>每次必须将获得的请求的响应文本格式化(eval)为js对象，否则将不可以调用js对象的属性<blockquote>
<p>var empJson = eval(request2.responseText);</p>
</blockquote>
</li>
</ol>
<hr>
<p>总代码如下：</p>
<ol>
<li>index.jsp<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort()+path+<span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  	部门：&lt;select id="dep"&gt;&lt;/select&gt;</span><br><span class="line">  	员工：&lt;select id="emp"&gt;&lt;/select&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  		<span class="keyword">var</span> dep = document.getElementById(<span class="string">"dep"</span>);</span><br><span class="line">  		<span class="keyword">var</span> emp = document.getElementById(<span class="string">"emp"</span>);</span><br><span class="line"></span><br><span class="line">  		<span class="comment">/*----------------		部门		-----------*/</span></span><br><span class="line">  		<span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  		request.open(<span class="string">"get"</span>, <span class="string">"dep.do?method=findAll"</span>);</span><br><span class="line">  		request.send();</span><br><span class="line">  		request.onreadystatechange = function() &#123;</span><br><span class="line">  			<span class="keyword">if</span>( request.readyState == <span class="number">4</span> &amp;&amp; request.status == <span class="number">200</span>) &#123;</span><br><span class="line">  				<span class="keyword">var</span> json = eval(request.responseText);</span><br><span class="line">  				<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; json.length; i++ ) &#123;</span><br><span class="line">  					<span class="keyword">var</span> option = <span class="keyword">new</span> Option(json[i].depName, json[i].depId);</span><br><span class="line">  					dep.add(option);</span><br><span class="line">  				&#125;</span><br><span class="line">  				doEmp();</span><br><span class="line">  			&#125;</span><br><span class="line"></span><br><span class="line">  		&#125;</span><br><span class="line"></span><br><span class="line">  		dep.onchange = function() &#123;</span><br><span class="line">  			doEmp();</span><br><span class="line">  		&#125;</span><br><span class="line"></span><br><span class="line">  		<span class="comment">/*-----------------		员工		-----------*/</span></span><br><span class="line">  		<span class="function">function <span class="title">doEmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  			<span class="comment">/*首先移除原来有的子节点*/</span></span><br><span class="line">  			<span class="keyword">while</span>(emp.hasChildNodes()) &#123;</span><br><span class="line">  				emp.removeChild(emp.firstChild);</span><br><span class="line">  			&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  			<span class="comment">/*添加原来的子节点*/</span></span><br><span class="line">  			<span class="keyword">var</span> request2 = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  			request2.open(<span class="string">"get"</span>, <span class="string">"emp.do?method=findByDepId&amp;depId="</span> + dep.value);</span><br><span class="line">  			request2.send();</span><br><span class="line">  			request2.onreadystatechange = function() &#123;</span><br><span class="line">  				<span class="keyword">if</span>( request2.readyState == <span class="number">4</span> &amp;&amp; request2.status == <span class="number">200</span> ) &#123;</span><br><span class="line">  					<span class="keyword">var</span> empJson = eval(request2.responseText);</span><br><span class="line">  					<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; empJson.length; i++ )&#123;</span><br><span class="line">  						<span class="keyword">var</span> option = <span class="keyword">new</span> Option(empJson[i].empName, empJson[i].empId);</span><br><span class="line">  						emp.add(option);</span><br><span class="line">  					&#125;</span><br><span class="line">  				&#125;</span><br><span class="line">  			&#125;</span><br><span class="line">  		&#125;</span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>  对于部门与员工级联，我们首先需要获得部门，然后根据我们当前所选择的部门获得员工，这里需要注意的是，我们采用了ajax进行通信，所以当我们获得员工的时候，需要将获得的员工转换为一个中间格式的文本进行传输，这里我们使用了json!</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> jsp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> json </tag>
            
            <tag> Ajax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XML创建与解析]]></title>
      <url>/2017/11/06/XML%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote>
<p>这里记录自己之前使用dom进行写XML，使用SAX 进行读取XML</p>
</blockquote>
<h3 id="两者异同点"><a href="#两者异同点" class="headerlink" title="两者异同点"></a>两者异同点</h3><ol>
<li>dom解析是基于文档的，如果解析一个XML文件，将会把文件的所有内容加载到内存中，方便反复查询，虽然效率高，但是占内存，尤其是XML文件很大的时候</li>
<li>sax(simple API for xml)解析xml的另一种方法，是一个基于事件流的解析，当我们使用XML进行解析的时候，用到哪里，就读到哪里，如果没有保存，数据将会丢失</li>
</ol>
<hr>
<h2 id="创建一个简单的XML文档"><a href="#创建一个简单的XML文档" class="headerlink" title="创建一个简单的XML文档"></a>创建一个简单的XML文档</h2><ol>
<li>生成一个空白的XML文档</li>
<li>添加根节点和属性</li>
<li>根节点下面添加子节点和属性</li>
<li>对在JVM中生成的XML文档保存到本机</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentHelper;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.XMLWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建XML文档，并且保存到d:/classes.xml</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateDocument</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*创建一个XML文档*/</span></span><br><span class="line">		Document document = DocumentHelper.createDocument();</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*创建根节点*/</span></span><br><span class="line">		Element element = document.addElement(<span class="string">"classes"</span>);</span><br><span class="line">		element.addAttribute(<span class="string">"id"</span>, <span class="string">"1"</span>);</span><br><span class="line">		element.addAttribute(<span class="string">"name"</span>, <span class="string">"root"</span>);</span><br><span class="line">		element.setText(<span class="string">"总班级"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*创建子节点*/</span></span><br><span class="line">		Element element2 = element.addElement(<span class="string">"class"</span>);</span><br><span class="line">		element2.addAttribute(<span class="string">"name"</span>, <span class="string">"班级1"</span>);</span><br><span class="line">		element2.addAttribute(<span class="string">"id"</span>, <span class="string">"01"</span>);</span><br><span class="line">		element2.setText(<span class="string">"第1个班级"</span>);</span><br><span class="line"></span><br><span class="line">		Element element3 = element.addElement(<span class="string">"class"</span>);</span><br><span class="line">		element3.addAttribute(<span class="string">"name"</span>, <span class="string">"班级2"</span>);</span><br><span class="line">		element3.addAttribute(<span class="string">"id"</span>, <span class="string">"02"</span>);</span><br><span class="line">		element3.setText(<span class="string">"第2个班级"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*将创建的XML文档保存到本机*/</span></span><br><span class="line">		XMLWriter writer = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"d:/classes.xml"</span>)));</span><br><span class="line">		writer.write(document);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h2 id="读取XML文档中的单个节点"><a href="#读取XML文档中的单个节点" class="headerlink" title="读取XML文档中的单个节点"></a>读取XML文档中的单个节点</h2><blockquote>
<p>通常我们需要对XML文档中的某个节点进行读取，可以采用如下方法</p>
</blockquote>
<ol>
<li>找到XML文档，读取到JVM中</li>
<li>找到我们要找的那个节点</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"11"</span> <span class="attr">price</span>=<span class="string">"456789"</span>&gt;</span>天龙八部<span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"2"</span> <span class="attr">price</span>=<span class="string">"666"</span>&gt;</span>武林秘籍<span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.prac;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取Document文档，并且获取单个节点的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException, DocumentException </span>&#123;</span><br><span class="line"></span><br><span class="line">		SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">		Document document = reader.read(<span class="keyword">new</span> File(<span class="string">"d:/books.xml"</span>));</span><br><span class="line">		Element element = (Element) document.selectSingleNode(<span class="string">"books/book[@id=1]"</span>);</span><br><span class="line"></span><br><span class="line">		System.out.println(element.getName() + <span class="string">"\t"</span> + element.getText() + <span class="string">"\t"</span> + element.attributeValue(<span class="string">"id"</span>) + <span class="string">"\t"</span> + element.attributeValue(<span class="string">"price"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="获取XML的所有节点"><a href="#获取XML的所有节点" class="headerlink" title="获取XML的所有节点"></a>获取XML的所有节点</h2><blockquote>
<p>有些时候，我们需要获取XML的所有节点，从而形成一个DOM树</p>
</blockquote>
<p>XML文档如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">contactList</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">contact</span> <span class="attr">id</span>=<span class="string">"001"</span> <span class="attr">class</span>=<span class="string">"style"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">phone</span>&gt;</span>134222223333<span class="tag">&lt;/<span class="name">phone</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">email</span>&gt;</span>zhangsan@qq.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">qq</span>&gt;</span>432221111<span class="tag">&lt;/<span class="name">qq</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">contact</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contact</span> <span class="attr">id</span>=<span class="string">"002"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">phone</span>&gt;</span>134222225555<span class="tag">&lt;/<span class="name">phone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>lisi@qq.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">qq</span>&gt;</span>432222222<span class="tag">&lt;/<span class="name">qq</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">contact</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contactTwo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>32<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">phone</span>&gt;</span>465431341<span class="tag">&lt;/<span class="name">phone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">emali</span>&gt;</span>af@qq.com<span class="tag">&lt;/<span class="name">emali</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">qq</span>&gt;</span>46164694<span class="tag">&lt;/<span class="name">qq</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">contactTwo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span>其他用途<span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">contactList</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuerySingleNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException, DocumentException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*采用sax解析*/</span></span><br><span class="line">		SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line"></span><br><span class="line">		Document document = reader.read(<span class="keyword">new</span> File(<span class="string">"src/contact.xml"</span>));</span><br><span class="line"></span><br><span class="line">		List list = document.selectNodes(<span class="string">"contactList/contact"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (Object object : list) &#123;</span><br><span class="line">			Element element = (Element) object;</span><br><span class="line">			System.out.println(element.attributeValue(<span class="string">"id"</span>) + <span class="string">"\t"</span> + element.attributeValue(<span class="string">"class"</span>) + <span class="string">"\t"</span> + element.elementText(<span class="string">"name"</span>) + <span class="string">"\t"</span> + element.elementText(<span class="string">"age"</span>) + <span class="string">"\t"</span> + element.elementText(<span class="string">"email"</span>) + <span class="string">"\t"</span> + element.elementText(<span class="string">"phone"</span>) + <span class="string">"\t"</span> + element.elementText(<span class="string">"qq"</span>));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="修改XML文档中某个节点的属性"><a href="#修改XML文档中某个节点的属性" class="headerlink" title="修改XML文档中某个节点的属性"></a>修改XML文档中某个节点的属性</h2><blockquote>
<p>如果要修改XML文档中某个节点的属性，我们需要通过解析XML文档找到这个节点，然后进行修改！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.prac;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.XMLWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首先读取Document内容，然后修改Document内容中的某一处值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">		Document document = reader.read(<span class="keyword">new</span> File(<span class="string">"d:/books.xml"</span>));</span><br><span class="line">		Element element = (Element) document.selectSingleNode(<span class="string">"books/book[@id=1]"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>( element != <span class="keyword">null</span> ) &#123;</span><br><span class="line">			element.attribute(<span class="string">"id"</span>).setValue(<span class="string">"11"</span>);</span><br><span class="line">			element.attribute(<span class="string">"price"</span>).setValue(<span class="string">"456789"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		XMLWriter writer = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"d:/books.xml"</span>)));</span><br><span class="line">		writer.write(document);</span><br><span class="line">		writer.close();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>总结： XML文档解析方法很多，但是常用的便是dom解析和sax解析，dom解析是读取一次，全部载入内存中，虽然效率高，但是很占内存；sax解析则是基于事件流的(用到哪里，读取哪里)，因此我们修改了节点的内容或者属性的时候，如果我们没有再次写到本机中，并不会真正修改本机上的xml文件！</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> XML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> XML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[几种MD5使用的方法]]></title>
      <url>/2017/10/30/%E5%87%A0%E7%A7%8DMD5%E4%BD%BF%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>由于MD5加密技术是一项单向的加密技术，不可以进行逆转，所以即使当我们知道加密后的数据也无法还原。安全性较高。</p>
<hr>
<h2 id="几种MD5的使用方法"><a href="#几种MD5的使用方法" class="headerlink" title="几种MD5的使用方法"></a>几种MD5的使用方法</h2><h3 id="方法一：（按照书上实例的方法）"><a href="#方法一：（按照书上实例的方法）" class="headerlink" title="方法一：（按照书上实例的方法）"></a>方法一：（按照书上实例的方法）</h3><blockquote>
<p>MD5 加密以后生成byte数组，但是由于我们通常在数据库中保存以字符串的形式保存数据，所以我们经常会将转换以后的byte数组转换为字符串</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年10月30日 上午11:13:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.md5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2017年10月30日 上午11:13:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TODO</span> TODO	md5加密</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptMD5(<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*指定加密算法*/</span></span><br><span class="line">		MessageDigest digest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">		<span class="comment">/*进行加密*/</span></span><br><span class="line">		digest.update(data);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*返回加密后的byte数组*/</span></span><br><span class="line">		<span class="keyword">return</span> digest.digest();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 将加密后的byte 转换为 字符串</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptMD5toString</span><span class="params">(<span class="keyword">byte</span>[] data)</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">		String str = <span class="string">""</span>;</span><br><span class="line">		String str16;</span><br><span class="line">		<span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++ )&#123;</span><br><span class="line">			str16 = Integer.toHexString(<span class="number">0xFF</span> &amp; data[i]);</span><br><span class="line">			<span class="comment">/*如果长度为1，前位补0*/</span></span><br><span class="line">			<span class="keyword">if</span> (str16.length() == <span class="number">1</span>) &#123;</span><br><span class="line">				str = str + <span class="string">"0"</span> + str16;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				str = str + str16;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> str;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">		String st = <span class="string">"admin"</span>;</span><br><span class="line">		System.out.println(encryptMD5toString(encryptMD5(st.getBytes())));</span><br><span class="line">		System.out.println(encryptMD5(st.getBytes()));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="方法二：（之前拷贝的一个MD5工具类）"><a href="#方法二：（之前拷贝的一个MD5工具类）" class="headerlink" title="方法二：（之前拷贝的一个MD5工具类）"></a>方法二：（之前拷贝的一个MD5工具类）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.md5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MD5工具类，需要直接使用即可</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2017年10月30日 上午11:37:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TODO</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Util</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">byteHEX</span><span class="params">(<span class="keyword">byte</span> ib)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">char</span>[] Digit = &#123; <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'A'</span>,</span><br><span class="line">				<span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span> &#125;;</span><br><span class="line">		<span class="keyword">char</span>[] ob = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">		ob[<span class="number">0</span>] = Digit[(ib &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">0X0F</span>];</span><br><span class="line">		ob[<span class="number">1</span>] = Digit[ib &amp; <span class="number">0X0F</span>];</span><br><span class="line">		String s = <span class="keyword">new</span> String(ob);</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMD5</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">		MessageDigest messageDigest = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			messageDigest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		messageDigest.update(source.getBytes());</span><br><span class="line">		<span class="keyword">byte</span>[] b = messageDigest.digest();</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">			sb.append(byteHEX(b[i]));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* sb.setCharAt(sb.length()-1, (char)(sb.charAt(sb.length()-1)+1));*/</span></span><br><span class="line">		<span class="keyword">return</span> sb.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法三：（摘自百度百科上面的算法）"><a href="#方法三：（摘自百度百科上面的算法）" class="headerlink" title="方法三：（摘自百度百科上面的算法）"></a>方法三：（摘自百度百科上面的算法）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年10月30日 上午11:33:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.md5;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2017年10月30日 上午11:33:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TODO</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *四个链接变量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> A=<span class="number">0x67452301</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> B=<span class="number">0xefcdab89</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> C=<span class="number">0x98badcfe</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> D=<span class="number">0x10325476</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *ABCD的临时变量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> Atemp,Btemp,Ctemp,Dtemp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *常量ti</span></span><br><span class="line"><span class="comment">    *公式:floor(abs(sin(i+1))×(2pow32)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> K[]=&#123;</span><br><span class="line">        <span class="number">0xd76aa478</span>,<span class="number">0xe8c7b756</span>,<span class="number">0x242070db</span>,<span class="number">0xc1bdceee</span>,</span><br><span class="line">        <span class="number">0xf57c0faf</span>,<span class="number">0x4787c62a</span>,<span class="number">0xa8304613</span>,<span class="number">0xfd469501</span>,<span class="number">0x698098d8</span>,</span><br><span class="line">        <span class="number">0x8b44f7af</span>,<span class="number">0xffff5bb1</span>,<span class="number">0x895cd7be</span>,<span class="number">0x6b901122</span>,<span class="number">0xfd987193</span>,</span><br><span class="line">        <span class="number">0xa679438e</span>,<span class="number">0x49b40821</span>,<span class="number">0xf61e2562</span>,<span class="number">0xc040b340</span>,<span class="number">0x265e5a51</span>,</span><br><span class="line">        <span class="number">0xe9b6c7aa</span>,<span class="number">0xd62f105d</span>,<span class="number">0x02441453</span>,<span class="number">0xd8a1e681</span>,<span class="number">0xe7d3fbc8</span>,</span><br><span class="line">        <span class="number">0x21e1cde6</span>,<span class="number">0xc33707d6</span>,<span class="number">0xf4d50d87</span>,<span class="number">0x455a14ed</span>,<span class="number">0xa9e3e905</span>,</span><br><span class="line">        <span class="number">0xfcefa3f8</span>,<span class="number">0x676f02d9</span>,<span class="number">0x8d2a4c8a</span>,<span class="number">0xfffa3942</span>,<span class="number">0x8771f681</span>,</span><br><span class="line">        <span class="number">0x6d9d6122</span>,<span class="number">0xfde5380c</span>,<span class="number">0xa4beea44</span>,<span class="number">0x4bdecfa9</span>,<span class="number">0xf6bb4b60</span>,</span><br><span class="line">        <span class="number">0xbebfbc70</span>,<span class="number">0x289b7ec6</span>,<span class="number">0xeaa127fa</span>,<span class="number">0xd4ef3085</span>,<span class="number">0x04881d05</span>,</span><br><span class="line">        <span class="number">0xd9d4d039</span>,<span class="number">0xe6db99e5</span>,<span class="number">0x1fa27cf8</span>,<span class="number">0xc4ac5665</span>,<span class="number">0xf4292244</span>,</span><br><span class="line">        <span class="number">0x432aff97</span>,<span class="number">0xab9423a7</span>,<span class="number">0xfc93a039</span>,<span class="number">0x655b59c3</span>,<span class="number">0x8f0ccc92</span>,</span><br><span class="line">        <span class="number">0xffeff47d</span>,<span class="number">0x85845dd1</span>,<span class="number">0x6fa87e4f</span>,<span class="number">0xfe2ce6e0</span>,<span class="number">0xa3014314</span>,</span><br><span class="line">        <span class="number">0x4e0811a1</span>,<span class="number">0xf7537e82</span>,<span class="number">0xbd3af235</span>,<span class="number">0x2ad7d2bb</span>,<span class="number">0xeb86d391</span>&#125;;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *向左位移数,计算方法未知</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> s[]=&#123;<span class="number">7</span>,<span class="number">12</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">7</span>,</span><br><span class="line">        <span class="number">12</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">20</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">20</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">20</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">20</span>,</span><br><span class="line">        <span class="number">4</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">6</span>,<span class="number">10</span>,</span><br><span class="line">        <span class="number">15</span>,<span class="number">21</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">21</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">21</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">21</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *初始化函数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Atemp=A;</span><br><span class="line">        Btemp=B;</span><br><span class="line">        Ctemp=C;</span><br><span class="line">        Dtemp=D;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *移动一定位数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span>    <span class="keyword">int</span>    <span class="title">shift</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(a&lt;&lt;s)|(a&gt;&gt;&gt;(<span class="number">32</span>-s));</span><br><span class="line">        <span class="comment">/*右移的时候，高位一定要补零，而不是补充符号位*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *主循环</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MainLoop</span><span class="params">(<span class="keyword">int</span> M[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> F,g;</span><br><span class="line">        <span class="keyword">int</span> a=Atemp;</span><br><span class="line">        <span class="keyword">int</span> b=Btemp;</span><br><span class="line">        <span class="keyword">int</span> c=Ctemp;</span><br><span class="line">        <span class="keyword">int</span> d=Dtemp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">16</span>)&#123;</span><br><span class="line">                F=(b&amp;c)|((~b)&amp;d);</span><br><span class="line">                g=i;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&lt;<span class="number">32</span>)&#123;</span><br><span class="line">                F=(d&amp;b)|((~d)&amp;c);</span><br><span class="line">                g=(<span class="number">5</span>*i+<span class="number">1</span>)%<span class="number">16</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&lt;<span class="number">48</span>)&#123;</span><br><span class="line">                F=b^c^d;</span><br><span class="line">                g=(<span class="number">3</span>*i+<span class="number">5</span>)%<span class="number">16</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                F=c^(b|(~d));</span><br><span class="line">                g=(<span class="number">7</span>*i)%<span class="number">16</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> tmp=d;</span><br><span class="line">            d=c;</span><br><span class="line">            c=b;</span><br><span class="line">            b=b+shift(a+F+K[i]+M[g],s[i]);</span><br><span class="line">            a=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        Atemp=a+Atemp;</span><br><span class="line">        Btemp=b+Btemp;</span><br><span class="line">        Ctemp=c+Ctemp;</span><br><span class="line">        Dtemp=d+Dtemp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *填充函数</span></span><br><span class="line"><span class="comment">    *处理后应满足bits≡448(mod512),字节就是bytes≡56（mode64)</span></span><br><span class="line"><span class="comment">    *填充方式为先加一个0,其它位补零</span></span><br><span class="line"><span class="comment">    *最后加上64位的原来长度</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] add(String str)&#123;</span><br><span class="line">        <span class="keyword">int</span> num=((str.length()+<span class="number">8</span>)/<span class="number">64</span>)+<span class="number">1</span>;<span class="comment">/*以512位，64个字节为一组*/</span></span><br><span class="line">        <span class="keyword">int</span> strByte[]=<span class="keyword">new</span> <span class="keyword">int</span>[num*<span class="number">16</span>];<span class="comment">/*64/4=16，所以有16个整数*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num*<span class="number">16</span>;i++)&#123;<span class="comment">/*全部初始化0*/</span></span><br><span class="line">            strByte[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>    i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">            strByte[i&gt;&gt;<span class="number">2</span>]|=str.charAt(i)&lt;&lt;((i%<span class="number">4</span>)*<span class="number">8</span>);<span class="comment">/*一个整数存储四个字节，小端序*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        strByte[i&gt;&gt;<span class="number">2</span>]|=<span class="number">0x80</span>&lt;&lt;((i%<span class="number">4</span>)*<span class="number">8</span>);<span class="comment">/*尾部添加1*/</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *添加原长度，长度指位的长度，所以要乘8，然后是小端序，所以放在倒数第二个,这里长度只用了32位</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        strByte[num*<span class="number">16</span>-<span class="number">2</span>]=str.length()*<span class="number">8</span>;</span><br><span class="line">            <span class="keyword">return</span> strByte;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *调用函数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMD5</span><span class="params">(String source)</span></span>&#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> strByte[]=add(source);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strByte.length/<span class="number">16</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> num[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">16</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++)&#123;</span><br><span class="line">            num[j]=strByte[i*<span class="number">16</span>+j];</span><br><span class="line">        &#125;</span><br><span class="line">        MainLoop(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> changeHex(Atemp)+changeHex(Btemp)+changeHex(Ctemp)+changeHex(Dtemp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *整数变成16进制字符串</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">changeHex</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        String str=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            str+=String.format(<span class="string">"%2s"</span>, Integer.toHexString(((a&gt;&gt;i*<span class="number">8</span>)%(<span class="number">1</span>&lt;&lt;<span class="number">8</span>))&amp;<span class="number">0xff</span>)).replace(<span class="string">' '</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *单例</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MD5 instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MD5 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            instance=<span class="keyword">new</span> MD5();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MD5</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str=MD5.getInstance().getMD5(<span class="string">"admin"</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Security </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> MD5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用json级联改变部门员工]]></title>
      <url>/2017/10/30/%E4%BD%BF%E7%94%A8json%E7%BA%A7%E8%81%94%E6%94%B9%E5%8F%98%E9%83%A8%E9%97%A8%E5%91%98%E5%B7%A5/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这里使用Hibernate + json + Ajax + 级联改变部门员工</p>
</blockquote>
<h2 id="基本的页面编写："><a href="#基本的页面编写：" class="headerlink" title="基本的页面编写："></a>基本的页面编写：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">import</span>=<span class="string">"java.util.*"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">String</span> <span class="attr">path</span> = <span class="string">request.getContextPath();</span></span></span><br><span class="line"><span class="tag"><span class="attr">String</span> <span class="attr">basePath</span> = <span class="string">request.getScheme()+</span>"<span class="attr">:</span>//"+<span class="attr">request.getServerName</span>()+"<span class="attr">:</span>"+<span class="attr">request.getServerPort</span>()+<span class="attr">path</span>+"/";</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  	部门：<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"dep"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  	员工：<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"emp"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="servlet的生成"><a href="#servlet的生成" class="headerlink" title="servlet的生成"></a>servlet的生成</h2><blockquote>
<p>DepServlet<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dao.DepDAO;</span><br><span class="line"><span class="keyword">import</span> com.pojo.Dep;</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/dep.do"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> DepDAO depDao = <span class="keyword">new</span> DepDAO();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">		String method = request.getParameter(<span class="string">"method"</span>);</span><br><span class="line">		<span class="keyword">if</span> ( <span class="string">"dep"</span>.equals(method) ) &#123;</span><br><span class="line">			doDep(request, response);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDep</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		List&lt;Dep&gt; list = depDao.findAll();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">/*将list转换为json格式的数据*/</span></span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		sb.append(<span class="string">"["</span>);</span><br><span class="line">		<span class="keyword">for</span> (Dep dep : list) &#123;</span><br><span class="line">			sb.append(<span class="string">"&#123; 'depId': '"</span> + dep.getDepId() + <span class="string">"', 'depName': '"</span> + dep.getDepName() + <span class="string">"' &#125;,"</span> );</span><br><span class="line">		&#125;</span><br><span class="line">		sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">		sb.append(<span class="string">"]"</span>);</span><br><span class="line">		response.getWriter().print(sb.toString());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>EmpServlet<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dao.EmpDAO;</span><br><span class="line"><span class="keyword">import</span> com.pojo.Emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class EmpServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/emp.do"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	<span class="keyword">private</span> EmpDAO empDao = <span class="keyword">new</span> EmpDAO();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* (non-Javadoc)</span></span><br><span class="line"><span class="comment">	 * @see javax.servlet.http.HttpServlet#service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">		String method = request.getParameter(<span class="string">"method"</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"findAll"</span>.equals(method)) &#123;</span><br><span class="line">			doFind(request, response);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doFind</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		String depId = request.getParameter(<span class="string">"depId"</span>);</span><br><span class="line">		List&lt;Emp&gt; list = empDao.findByProperty(<span class="string">"dep.depId"</span>, Integer.parseInt(depId));</span><br><span class="line"></span><br><span class="line">		System.out.println(list.isEmpty());</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		sb.append(<span class="string">"["</span>);</span><br><span class="line">		<span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">			sb.append(<span class="string">"&#123; 'empId': '"</span> + emp.getEmpId() + <span class="string">"', 'empName': '"</span> + emp.getEmpName() + <span class="string">"'&#125;,"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">		sb.append(<span class="string">"]"</span>);</span><br><span class="line">		response.getWriter().print(sb.toString());</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="json的使用"><a href="#json的使用" class="headerlink" title="json的使用"></a>json的使用</h3><blockquote>
<p>当我们使用java的时候，经常要给页面返回东西，但是我们又不可以直接返回Java中的数据类型，所以只能通过中间格式进行转换，中间格式在这里也就是Java和JavaScript都可以解析的格式</p>
</blockquote>
<h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><blockquote>
<p>使用json简单的保存一个数据</p>
</blockquote>
<p>一个简单的json { ‘姓名’: ‘李四’, ‘年龄’: ‘25’};</p>
<blockquote>
<p>使用json保存数据组</p>
</blockquote>
<p>[<br>  {<br>    ‘姓名’: ‘王五’,<br>    ‘年龄’: ‘18’<br>  },<br>  {<br>    ‘姓名’: ‘李四’,<br>    ‘年龄’: ‘19’<br>  },<br>  {<br>    ‘姓名’: ‘赵六’,<br>    ‘年龄’: ‘58’<br>  }<br>]</p>
<hr>
<h2 id="Ajax的编写"><a href="#Ajax的编写" class="headerlink" title="Ajax的编写"></a>Ajax的编写</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">			<span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">			request.open(<span class="string">"GET"</span>, <span class="string">"dep.do?method=dep"</span>);</span><br><span class="line">			request.send();</span><br><span class="line"></span><br><span class="line">			<span class="comment">/*首先操作部门*/</span></span><br><span class="line">  			<span class="keyword">var</span> dep = <span class="built_in">document</span>.getElementById(<span class="string">"dep"</span>);</span><br><span class="line">			request.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">				<span class="keyword">if</span> ( request.readyState == <span class="number">4</span> &amp;&amp; request.status == <span class="number">200</span>) &#123;</span><br><span class="line">					<span class="keyword">var</span> list = request.responseText;</span><br><span class="line">					<span class="keyword">var</span> s = <span class="built_in">eval</span>(list);</span><br><span class="line">					<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++ ) &#123;</span><br><span class="line">						<span class="keyword">var</span> option = <span class="keyword">new</span> Option(s[i].depName, s[i].depId);</span><br><span class="line">						dep.add(option);</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					emp();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			<span class="comment">/*操作员工，第一次默认是哪个，然后改变事件员工也要随着改变*/</span></span><br><span class="line">			<span class="function"><span class="keyword">function</span> <span class="title">emp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">				<span class="keyword">var</span> emp = <span class="built_in">document</span>.getElementById(<span class="string">"emp"</span>);</span><br><span class="line"></span><br><span class="line">				<span class="comment">/*实现每次改变父节点的时候删除原有的子节点*/</span></span><br><span class="line">				<span class="comment">/*方法一：*/</span></span><br><span class="line">				<span class="keyword">while</span>(emp.hasChildNodes()) &#123;</span><br><span class="line">					emp.removeChild(emp.firstChild);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">/*方法二：*/</span></span><br><span class="line">				<span class="comment">/*emp.innerHTML = "";*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">				<span class="keyword">var</span> request2 = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">				request2.open(<span class="string">"get"</span>, <span class="string">"emp.do?method=findAll&amp;depId="</span> + dep.value);</span><br><span class="line">				request2.send();</span><br><span class="line">				request2.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">					<span class="keyword">if</span>( request2.readyState == <span class="number">4</span> &amp;&amp; request2.status == <span class="number">200</span> ) &#123;</span><br><span class="line">						<span class="keyword">var</span> str = <span class="built_in">eval</span>(request2.responseText);</span><br><span class="line">						<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++ ) &#123;</span><br><span class="line">							<span class="keyword">var</span> option = <span class="keyword">new</span> Option(str[i].empName, str[i].empId);</span><br><span class="line">							emp.add(option);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			dep.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">				emp();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> json </category>
            
            <category> 级联 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hibernate </tag>
            
            <tag> json </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决MySql 8小时自动关闭的问题]]></title>
      <url>/2017/10/28/%E8%A7%A3%E5%86%B3MySql-8%E5%B0%8F%E6%97%B6%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote>
<p>记得自己之前在服务器上部署了一个很low的假期签到系统，每次叫大家签到都是晚上，很大程度上讲，时间已经过了将近16个小时，每次第二天叫大家签到的时候，很多人，都发了同一个问题给我，服务器报了连接异常，后来听到身边的大牛才知道，原来MySql如果配置不当，连接空闲超过8小时，MySql将会关闭该连接，但是我们服务器认为连接还是存在的，因此还会访问，所以就会出现异常情况</p>
</blockquote>
<blockquote>
<p>也有一部分原因自己是知道的，因为自己采用了c3p0数据源，所以才会出现这个情况，而dbcp则不会出现如此情况！</p>
</blockquote>
<hr>
<h2 id="查询当前数据库连接超时时间"><a href="#查询当前数据库连接超时时间" class="headerlink" title="查询当前数据库连接超时时间"></a>查询当前数据库连接超时时间</h2><blockquote>
<p>mysql 命令行中 键入如下命令</p>
</blockquote>
<p>SHOW GLOBAL VARIABLES LIKE ‘wait_timeout’;</p>
<blockquote>
<p>结果如下</p>
</blockquote>
<p><img src="http://on3w7gc9m.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720171030103053.png"></p>
<p>超时时间为28800秒，换算下来也就是8小时</p>
<hr>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><blockquote>
<p>这个也是自己之前的方法：也就是采用一个简单的定时器，每隔7小时定时查一下数据库，不让连接自动关闭，</p>
</blockquote>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><blockquote>
<p>每次当我们连接到数据库中的时候，url可改为：<br>jdbc:mysql://localhost:3306/test?user=root&amp;password=root&amp;useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;failOverReadOnly=false</p>
</blockquote>
<a id="more"></a>
<p>通过设置autoReconnect 和 failOverReadOnly 来进行连接异常时的重新设置</p>
<blockquote>
<p>具体参数如下图</p>
</blockquote>
<table><tbody><tr bgcolor="#cedee7"><td align="center" width="85">参数名称</td><td align="center" width="200">参数说明</td><td align="center" width="50">缺省值</td><td align="center" width="80">最低版本要求</td></tr><tr bgcolor="#ffffff"><td>user</td><td>数据库用户名（用于连接数据库）</td><td>&nbsp;</td><td>所有版本</td></tr><tr bgcolor="#ffffff"><td>password</td><td>用户密码（用于连接数据库）</td><td>&nbsp;</td><td>所有版本</td></tr><tr bgcolor="#ffffff"><td>useUnicode</td><td>是否使用Unicode字符集，如果参数characterEncoding设置为gb2312或gbk，本参数值必须设置为true</td><td>false</td><td>1.1g</td></tr><tr bgcolor="#ffffff"><td>characterEncoding</td><td>当useUnicode设置为true时，指定字符编码。比如可设置为gb2312或gbk</td><td>false</td><td>1.1g</td></tr><tr bgcolor="#ffffff"><td>autoReconnect</td><td>当数据库连接异常中断时，是否自动重新连接？</td><td>false</td><td>1.1</td></tr><tr bgcolor="#ffffff"><td>autoReconnectForPools</td><td>是否使用针对数据库连接池的重连策略</td><td>false</td><td>3.1.3</td></tr><tr bgcolor="#ffffff"><td>failOverReadOnly</td><td>自动重连成功后，连接是否设置为只读？</td><td>true</td><td>3.0.12</td></tr><tr bgcolor="#ffffff"><td>maxReconnects</td><td>autoReconnect设置为true时，重试连接的次数</td><td>3</td><td>1.1</td></tr><tr bgcolor="#ffffff"><td>initialTimeout</td><td>autoReconnect设置为true时，两次重连之间的时间间隔，单位：秒</td><td>2</td><td>1.1</td></tr><tr bgcolor="#ffffff"><td>connectTimeout</td><td>和数据库服务器建立socket连接时的超时，单位：毫秒。 0表示永不超时，适用于JDK 1.4及更高版本</td><td>0</td><td>3.0.1</td></tr><tr bgcolor="#ffffff"><td>socketTimeout</td><td>socket操作（读写）超时，单位：毫秒。 0表示永不超时</td><td>0</td><td>3.0.1</td></tr></tbody></table>

<h3 id="方法三：连接池文件配置"><a href="#方法三：连接池文件配置" class="headerlink" title="方法三：连接池文件配置"></a>方法三：连接池文件配置</h3><blockquote>
<p>由于自己没有使用c3p0配置文件，如果有c3p0配置文件，建议在cep0配置文件中进行如下配置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">&lt;default-config&gt;</span><br><span class="line">&lt;!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --&gt;</span><br><span class="line">&lt;property name=&quot;acquireIncrement&quot;&gt;3&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --&gt;</span><br><span class="line">&lt;property name=&quot;acquireRetryAttempts&quot;&gt;30&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--两次连接中间隔时间，单位毫秒。Default: 1000 --&gt;</span><br><span class="line">&lt;property name=&quot;acquireRetryDelay&quot;&gt;1000&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--连接关闭时默认将所有未提交的操作回滚。Default: false --&gt;</span><br><span class="line">&lt;property name=&quot;autoCommitOnClose&quot;&gt;false&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数 那么</span><br><span class="line">属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试</span><br><span class="line">使用。Default: null--&gt;</span><br><span class="line">&lt;property name=&quot;automaticTestTable&quot;&gt;Test&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效</span><br><span class="line">保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试</span><br><span class="line">获取连接失败后该数据源将申明已断开并永久关闭。Default: false--&gt;</span><br><span class="line">&lt;property name=&quot;breakAfterAcquireFailure&quot;&gt;false&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将 抛出</span><br><span class="line">SQLException,如设为0则无限期等待。单位毫秒。Default: 0 --&gt;</span><br><span class="line">&lt;property name=&quot;checkoutTimeout&quot;&gt;100&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--通过实现ConnectionTester或QueryConnectionTester的 类来 测试连接。类名需制定全路径。</span><br><span class="line">Default: com.mchange.v2.c3p0.impl.DefaultConnectionTester--&gt;</span><br><span class="line">&lt;property name=&quot;connectionTesterClassName&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--指定c3p0 libraries的路径，如果（通常都是这样）在本地即可获得那么无需设置，默认null即可</span><br><span class="line">Default: null--&gt;</span><br><span class="line">&lt;property name=&quot;factoryClassLocation&quot;&gt;null&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--Strongly disrecommended. Setting this to true may lead to subtle and bizarre bugs.</span><br><span class="line">（文档原文）作者强烈建议不使用的一个属性--&gt;</span><br><span class="line">&lt;property name=&quot;forceIgnoreUnresolvedTransactions&quot;&gt;false&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--每60秒检查所有连接池中的空闲连接。Default: 0 --&gt;</span><br><span class="line">&lt;property name=&quot;idleConnectionTestPeriod&quot;&gt;60&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。 Default: 3 --&gt;</span><br><span class="line">&lt;property name=&quot;initialPoolSize&quot;&gt;3&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 --&gt;</span><br><span class="line">&lt;property name=&quot;maxIdleTime&quot;&gt;60&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--连接池中保留的最大连接数。Default: 15 --&gt;</span><br><span class="line">&lt;property name=&quot;maxPoolSize&quot;&gt;15&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但 由于预缓存的statements</span><br><span class="line">属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。</span><br><span class="line">如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0--&gt;</span><br><span class="line">&lt;property name=&quot;maxStatements&quot;&gt;100&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--maxStatementsPerConnection定义了连接池内单个连接所 拥有的最大缓存statements数。Default: 0 --&gt;</span><br><span class="line">&lt;property name=&quot;maxStatementsPerConnection&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性 能</span><br><span class="line">通过多线程实现多个操作同时被执行。Default: 3--&gt;</span><br><span class="line">&lt;property name=&quot;numHelperThreads&quot;&gt;3&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--当用户调用getConnection()时使root用户成为去获取连接的用户。主要用于 连接池连接非c3p0</span><br><span class="line">的数据源时。Default: null--&gt;</span><br><span class="line">&lt;property name=&quot;overrideDefaultUser&quot;&gt;root&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--与overrideDefaultUser参数对应使用的一个参数。Default: null--&gt;</span><br><span class="line">&lt;property name=&quot;overrideDefaultPassword&quot;&gt;password&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--密码。Default: null--&gt;</span><br><span class="line">&lt;property name=&quot;password&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个一显著提高测试速度。注意：</span><br><span class="line">测试的表必须在初始数据源的时候就存在。Default: null--&gt;</span><br><span class="line">&lt;property name=&quot;preferredTestQuery&quot;&gt;select id from test where id=1&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--用户修改系统配置参数执行前最多等待300秒。Default: 300 --&gt;</span><br><span class="line">&lt;property name=&quot;propertyCycle&quot;&gt;300&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交 的</span><br><span class="line">时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable</span><br><span class="line">等方法来提升连接测试的性能。Default: false --&gt;</span><br><span class="line">&lt;property name=&quot;testConnectionOnCheckout&quot;&gt;false&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false --&gt;</span><br><span class="line">&lt;property name=&quot;testConnectionOnCheckin&quot;&gt;true&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--用户名。Default: null--&gt;</span><br><span class="line">&lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--早期的c3p0版本对JDBC接口采用动态反射代理。在早期版本用途广泛的情况下这个参数</span><br><span class="line">允许用户恢复到动态反射代理以解决不稳定的故障。最新的非反射代理更快并且已经开始</span><br><span class="line">广泛的被使用，所以这个参数未必有用。现在原先的动态反射与新的非反射代理同时受到</span><br><span class="line">支持，但今后可能的版本可能不支持动态反射代理。Default: false--&gt;</span><br><span class="line">&lt;property name=&quot;usesTraditionalReflectiveProxies&quot;&gt;false&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name=&quot;automaticTestTable&quot;&gt;con_test&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;checkoutTimeout&quot;&gt;30000&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;idleConnectionTestPeriod&quot;&gt;30&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;initialPoolSize&quot;&gt;10&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;maxIdleTime&quot;&gt;30&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;maxPoolSize&quot;&gt;25&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;minPoolSize&quot;&gt;10&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;maxStatements&quot;&gt;0&lt;/property&gt;</span><br><span class="line">&lt;user-overrides user=&quot;swaldman&quot;&gt;</span><br><span class="line">&lt;/user-overrides&gt;</span><br><span class="line">&lt;/default-config&gt;</span><br><span class="line">&lt;named-config name=&quot;dumbTestConfig&quot;&gt;</span><br><span class="line">&lt;property name=&quot;maxStatements&quot;&gt;200&lt;/property&gt;</span><br><span class="line">&lt;user-overrides user=&quot;poop&quot;&gt;</span><br><span class="line">&lt;property name=&quot;maxStatements&quot;&gt;300&lt;/property&gt;</span><br><span class="line">&lt;/user-overrides&gt;</span><br><span class="line">&lt;/named-config&gt;</span><br><span class="line">&lt;/c3p0-config&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> MySql </category>
            
            <category> 8小时 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hibernate </tag>
            
            <tag> MySql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring中使用注解]]></title>
      <url>/2017/10/26/Spring%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="使用注解进行实例Bean"><a href="#使用注解进行实例Bean" class="headerlink" title="使用注解进行实例Bean"></a>使用注解进行实例Bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(value=<span class="string">"user1"</span>)</span><br><span class="line"><span class="comment">/*类似于&lt;bean id="user1" class="com.pojo.User"&gt;&lt;/bean&gt;*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"user----------add--------"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用注解进行装载Bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="meta">@org</span>.junit.Test</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean1.xml"</span>);</span><br><span class="line">		User user = (User)context.getBean(<span class="string">"user1"</span>);</span><br><span class="line">		System.out.println(user);</span><br><span class="line">		user.add();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="使用注解创建单实例-多实例"><a href="#使用注解创建单实例-多实例" class="headerlink" title="使用注解创建单实例/多实例"></a>使用注解创建单实例/多实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(value=<span class="string">"user1"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(value=<span class="string">"prototype"</span>)     <span class="comment">/*指令多实例*/</span></span><br><span class="line"><span class="comment">/*指定单实例 @Scope(value="singleton")*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"user----------add--------"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="NoSuchBeanDefinitionException"><a href="#NoSuchBeanDefinitionException" class="headerlink" title="NoSuchBeanDefinitionException"></a>NoSuchBeanDefinitionException</h3><blockquote>
<p>由于配置文件的包名路径没有写对，所以没有搜索到，确保配置文件类的路径正确</p>
</blockquote>
<a id="more"></a>
<h3 id="使用注解的时候出现如下错误："><a href="#使用注解的时候出现如下错误：" class="headerlink" title="使用注解的时候出现如下错误："></a>使用注解的时候出现如下错误：</h3><blockquote>
<p>The prefix “context” for element “context:component-scan” is not bound.</p>
</blockquote>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>更换Spring总配置文件的头约束，更改为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启注解说明，会自动扫描该包，扫描包下面的类，方法是否有注解 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.pojo"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 多个注解可以更改为如下 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.pojo,com.annotation"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 也可以直接更改为如下配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 只会扫描属性上的注解 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> Spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一种优雅的策略---递归]]></title>
      <url>/2017/10/22/%E4%B8%80%E7%A7%8D%E4%BC%98%E9%9B%85%E7%9A%84%E7%AD%96%E7%95%A5-%E9%80%92%E5%BD%92/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>现在写这篇文章主要记录自己使用递归的经过</p>
</blockquote>
<p>说到递归，不得不说起自己大一刚刚开学接触c语言，第1个问题便是一个求阶乘的题目，最终采用了递归策略，记得自己当时测试的时候，足足用了1分钟，最后才发现是一个死循环，从那时开始便开始躲避递归，就怕来个死循环<del>~</del>唧唧！</p>
<blockquote>
<p>说实话，在我今天写这个技术博客记录自己递归的使用历程的时候，不得不说自己 真的是 从 厌恶递归 –&gt; 接受递归 –&gt; 欣赏递归</p>
</blockquote>
<hr>
<h2 id="递归的使用"><a href="#递归的使用" class="headerlink" title="递归的使用"></a>递归的使用</h2><blockquote>
<p>说到递归的使用，二话不说先来一个例子，自己之前看到一本书上，例子如下</p>
</blockquote>
<p>当我们打开祖母留给我们的箱子的时候，发现里面依然有一个箱子，然而我们要找的仅仅是一把钥匙，所以每次都会打开一个箱子，直到打开箱子发现钥匙为止！(流程描述如下)</p>
<p><img src="http://on3w7gc9m.bkt.clouddn.com/00.png"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindKey</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOX_KEY = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> box 一个宝箱</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(Box box)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; box.listBoxes; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(box[i] == BOX_KEY) &#123;</span><br><span class="line">				System.out.println(<span class="string">"The key is found"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				find(box[i]); <span class="comment">/* 递归 */</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong> 记得之前看过Stack Overflow上的一句话：使用循环 程序性能可能更高，使用递归，程序可能更容易理解</strong></p>
</blockquote>
<hr>
<h2 id="递归中的条件"><a href="#递归中的条件" class="headerlink" title="递归中的条件"></a>递归中的条件</h2><p>正如大家都知道，递归都是自己调用自己，如果我们在编写程序的时候，没有进行判断，程序将会出现死循环，这个错误对我们来说是非常严重的，因此我们对递归是否继续进行判断。</p>
<a id="more"></a>
<h3 id="递归条件"><a href="#递归条件" class="headerlink" title="递归条件"></a>递归条件</h3><blockquote>
<p>使得递归程序继续运行的条件</p>
</blockquote>
<h3 id="基线条件"><a href="#基线条件" class="headerlink" title="基线条件"></a>基线条件</h3><blockquote>
<p>使得递归函数不再继续的条件，也就是不满足递归的条件，从而避免死循环</p>
</blockquote>
<hr>
<h2 id="递归中的数据结构"><a href="#递归中的数据结构" class="headerlink" title="递归中的数据结构"></a>递归中的数据结构</h2><blockquote>
<p>很多题目中都会问到 递归算法执行的过程中，计算机系统一定用到的数据结构是什么？</p>
</blockquote>
<p>答案顾名思义肯定是栈，这里我们一般将其称为 调用栈的栈（计算机内部使用）</p>
<h3 id="调用栈的栈"><a href="#调用栈的栈" class="headerlink" title="调用栈的栈"></a>调用栈的栈</h3><blockquote>
<p>这里举个例子，比如求 3的阶乘</p>
</blockquote>
<p>第一步：计算结果为 3 * fact(2)，开始调用fact(2)</p>
<p>第二步：计算结果为 2 * fact(1); <strong> 当我们调用fact(2)的时候，fact(3)暂停，处于未完成状态 </strong></p>
<p>第三步：计算结果为 1; 并返回1 <strong> 当我们调用fact(1)的时候，fact(2)暂停，处于未完成状态 </strong></p>
<p><img src="http://on3w7gc9m.bkt.clouddn.com/01.png"></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>栈虽然很方便，但是当我们存储大量信息的时候会占用大量的内存，每个函数调用都会占用一定内存，就意味着计算机存储了大量函数调用的过程信息。</li>
<li>遇到上述情况的时候，我们可以尝试使用循环，或者尾递归！</li>
<li>所有函数调用都会进入调用栈</li>
<li>调用栈很长的时候，将会占用大量的内存</li>
</ol>
<hr>
<p>总结：虽然递归可以极大程度的简化代码，但是我们使用的时候还是需要注意，递归中的函数调用会占用很大的内存，当我们递归次数多的时候可以考虑使用循环或者尾递归</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
            <category> 策略 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记录一次SSH整合的过程]]></title>
      <url>/2017/10/21/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1SSH%E6%95%B4%E5%90%88%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近做的这个项目采用了SSH框架，由于时间隔了很久，框架搭建忘记了很多，所以以此记录自己现在搭建整个框架的流程，留作参考！</p>
</blockquote>
<p><strong>本次搭建采用了 MyEclipse 2017 IDE + Hibernate 3.3 + Spring 3.0 作为案例</strong></p>
<h2 id="搭建Hibernate框架"><a href="#搭建Hibernate框架" class="headerlink" title="搭建Hibernate框架"></a>搭建Hibernate框架</h2><blockquote>
<p>这次搭建框架的首要步骤便是搭建Hibernate框架</p>
</blockquote>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>新建一个Web Project,并点击生成web.xml，点击Finish</li>
<li>对要搭建框架的项目进行右击，选中Configure Facets… –&gt; 点击Install Hibernate Facet</li>
<li>选择版本号(3.3) –&gt; 进行hibernate.cfg.xml的创建 –&gt; 进行 Hibernate 数据库连接配置 –&gt; 选择Hibernate导入jar包</li>
<li>修改hibernate.cfg.xml配置文件：创建一个 show_sql ，值为 true</li>
</ol>
<p><img src="http://on3w7gc9m.bkt.clouddn.com/1.png"><br><img src="http://on3w7gc9m.bkt.clouddn.com/2.png"></p>
<a id="more"></a>
<p><img src="http://on3w7gc9m.bkt.clouddn.com/3.png"><br><img src="http://on3w7gc9m.bkt.clouddn.com/4.png"></p>
<hr>
<h2 id="搭建Spring框架"><a href="#搭建Spring框架" class="headerlink" title="搭建Spring框架"></a>搭建Spring框架</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>对要搭建框架的项目进行右击，选中Configure Facets… –&gt; 点击Install Hibernate Facet</li>
<li>选择Spring版本号 –&gt; 添加Spring配置文件 –&gt; 添加Spring 开发jar包</li>
</ol>
<p><img src="http://on3w7gc9m.bkt.clouddn.com/5.png"><br><img src="http://on3w7gc9m.bkt.clouddn.com/6.png"><br><img src="http://on3w7gc9m.bkt.clouddn.com/7.png"></p>
<ol start="3">
<li><p>进行逆向工程，生成对应的 POJO 以及 映射文件 和 DAO</p>
</li>
<li><p>src目录下 新建 com.dao 文件夹，将生成的DAO文件全部移动到com.dao中</p>
</li>
</ol>
<p><img src="http://on3w7gc9m.bkt.clouddn.com/8.png"></p>
<h2 id><a href="#" class="headerlink" title></a><img src="http://on3w7gc9m.bkt.clouddn.com/9.png"></h2><h2 id="配置-web-xml"><a href="#配置-web-xml" class="headerlink" title="配置 web.xml"></a>配置 web.xml</h2><ol>
<li><p>在Context Parameters 栏目中，添加如下值：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:app*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在Listeners栏目下新建一个ListenerClass</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置springMVC中的 servlet，配置如下，(于旁边 JSP File 栏目报错，可以随便填入几个字符，再删除并保存就可以避免错误！)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h2 id="配置applicationContext的XML配置文件"><a href="#配置applicationContext的XML配置文件" class="headerlink" title="配置applicationContext的XML配置文件"></a>配置applicationContext的XML配置文件</h2><ol>
<li><p>更换xml文件头，改为如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 scan 扫描</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.service"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在com.dao下面新建HqlDAO类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HqlDAO</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List <span class="title">query</span><span class="params">(String hql,Object ...p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.getHibernateTemplate().find(hql,p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List <span class="title">findByHQL</span><span class="params">(<span class="keyword">final</span> String hql,<span class="keyword">final</span> Object ...p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		List list=getHibernateTemplate().executeFind(<span class="keyword">new</span> HibernateCallback() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="function"><span class="keyword">public</span> Object <span class="title">doInHibernate</span><span class="params">(Session session)</span> <span class="keyword">throws</span> HibernateException,</span></span><br><span class="line"><span class="function">					SQLException </span>&#123;</span><br><span class="line">				<span class="comment">/* TODO Auto-generated method stub */</span></span><br><span class="line">				Query query=session.createQuery(hql);</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.length; i++) &#123;</span><br><span class="line">					query.setParameter(i, p[i]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> query.list();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">return</span> list;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">zsg</span><span class="params">(String hql, Object ...p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.getHibernateTemplate().bulkUpdate(hql,p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Session <span class="title">getHibernateSession</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Session session=<span class="keyword">super</span>.getHibernateTemplate().execute(<span class="keyword">new</span> HibernateCallback&lt;Session&gt;() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="function"><span class="keyword">public</span> Session <span class="title">doInHibernate</span><span class="params">(Session s)</span></span></span><br><span class="line"><span class="function">					<span class="keyword">throws</span> HibernateException, SQLException </span>&#123;</span><br><span class="line">				<span class="comment">/* TODO Auto-generated method stub */</span></span><br><span class="line">				<span class="keyword">return</span> s;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">return</span> session;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List <span class="title">pageQuery</span><span class="params">(String hql, <span class="keyword">int</span> size,<span class="keyword">int</span> page , Object ...p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Session session=getHibernateSession();</span><br><span class="line">			Query query=session.createQuery(hql);</span><br><span class="line">			<span class="keyword">if</span>(p!=<span class="keyword">null</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.length; i++) &#123;</span><br><span class="line">					query.setParameter(i, p[i]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			query.setFirstResult((page-<span class="number">1</span>)*size).setMaxResults(size);</span><br><span class="line">			List list=query.list();</span><br><span class="line">			<span class="keyword">return</span> list;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">			<span class="comment">/* TODO Auto-generated catch block */</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bulkUpdate</span><span class="params">(String hql, Object... p)</span> </span>&#123;</span><br><span class="line">		getHibernateTemplate().bulkUpdate(hql, p);</span><br><span class="line">	&#125;</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">unique</span><span class="params">(<span class="keyword">final</span> String hql ,<span class="keyword">final</span> Object...p)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		 List list = query(hql, p);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (list.size()&gt;<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				Object obj = list.get(<span class="number">0</span>);</span><br><span class="line">				<span class="keyword">if</span> (obj!=<span class="keyword">null</span>)&#123;</span><br><span class="line">					<span class="keyword">return</span> Float.parseFloat(obj.toString());</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> List <span class="title">sqlPageCreateQuery</span><span class="params">(String sql, <span class="keyword">int</span> page, <span class="keyword">int</span> size, Object... p)</span> </span>&#123;</span><br><span class="line">			Session session = getHibernateSession();</span><br><span class="line">			Query query = session.createSQLQuery(sql);</span><br><span class="line">			<span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.length; i++) &#123;</span><br><span class="line">					query.setParameter(i, p[i]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			query.setFirstResult((page - <span class="number">1</span>) * size).setMaxResults(size);</span><br><span class="line">			List list = query.list();</span><br><span class="line">			<span class="keyword">return</span> list;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> List <span class="title">sqlCreateQuery</span><span class="params">(String sql, Object... p)</span> </span>&#123;</span><br><span class="line">			Session session = getHibernateSession();</span><br><span class="line">			Query query = session.createSQLQuery(sql);</span><br><span class="line">			<span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.length; i++) &#123;</span><br><span class="line">					query.setParameter(i, p[i]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			List list = query.list();</span><br><span class="line">			<span class="keyword">return</span> list;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置hqlDAO</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hqlDAO"</span> <span class="attr">class</span>=<span class="string">"com.dao.HqlDAO"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">5. 配置事务</span><br><span class="line">```XML</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate3.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"mytx"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"mytx"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.service.*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>WEB-INF文件夹下 新建 springMVC-servlet.xml ：用来处理中文</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.action"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 中文处理 要在context下面--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">		<span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.MediaType"</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"plain"</span> /&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>src下创建文件：log4j.properties（内容如下）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#to console#</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.out</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125;  %m%n</span><br><span class="line">#to file#</span><br><span class="line">log4j.appender.file=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.file.File=sunjob.log</span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125;  %l  %m%n</span><br><span class="line">#error/warn/info/debug#</span><br><span class="line">log4j.rootLogger=info, stdout, file</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><blockquote>
<p>将搭建好的项目部署到tomcat服务器，并启动，如果服务器没有报错，并且页面可以访问，说明搭建成功</p>
</blockquote>
<hr>
<p>总结：这次搭建SSH框架非常流畅，虽然之前搭建过，但是忘记了很多，因此这次的搭建确实刻骨铭心！</p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> 整合 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSH </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[$(document).ready() 与 window.onload() 方法区别]]></title>
      <url>/2017/10/18/ready-%E4%B8%8E-window-onload-%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>浏览器装载完文档之后,浏览器会通过JS为document元素添加事件，JS中通常使用window.onload 方法，而在jQuery中，通常会使用$(document).ready()方法</p>
</blockquote>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h2 id="执行时机的区别"><a href="#执行时机的区别" class="headerlink" title="执行时机的区别"></a>执行时机的区别</h2><ol>
<li>window.onload 方法在等待网页中的所有元素全部加载(和元素有关联的文件)之后才会执行。JS此时才会访问网页中的元素。</li>
<li>jQuery 中的 $(document).ready()方法注册的事件处理程序，在Dom完全就绪的时候就可以调用，此时网页的所有元素都可以进行访问，但并不是这些元素关联的文件都已经下载完毕。</li>
</ol>
<blockquote>
<p>注意： 当DOM数解析完成之后，图片还没有加载完毕，图片高度和宽度这样的属性此时不一定有效</p>
</blockquote>
<h2 id="多次使用"><a href="#多次使用" class="headerlink" title="多次使用"></a>多次使用</h2><blockquote>
<p>网页中的代码如下，但是多次使用 window.onload 之后，只会弹出一次</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>而jQuery中的 $(document).ready() 则可以写多次，且都会执行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  alert(&quot;1&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  alert(&quot;2&quot;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ol>
<li>onload 事件一次只可以保存一个函数的引用，会自动用后面的函数覆盖前面的函数，因此不可以在现有的行为上继续添加行为</li>
<li>$(document).ready()方法能够将会很好的处理这些情况，每次调用都会在现有的行为上追加新的行为，并按照注册的顺序依次执行</li>
</ol>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
            <category> 事件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[了解类的加载，连接和初始化]]></title>
      <url>/2017/10/13/%E4%BA%86%E8%A7%A3%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%EF%BC%8C%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><p>首先附上三段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ATest1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		A a = <span class="keyword">new</span> A();</span><br><span class="line">		a.a++;</span><br><span class="line">		System.out.println(a.a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ATest2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		A b = <span class="keyword">new</span> A();</span><br><span class="line">		System.out.println(b.a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当我们运行完 ATest1 之后 再次运行 ATest2 将会发现 静态变量a的值仍是6，因为在 JVM 中，第一次运行JVM会自动结束，因此对静态变量A保存的数据将会全部丢失，第二次运行JVM将会重新初始化变量，所以值仍为6</p>
</blockquote>
<p>结论：</p>
<ol>
<li>每次运行某个Java程序，命令将会启动一个JVM进程，并且该程序中的线程将处于同一个进程中，都使用该JVM内存区</li>
<li>倘若系统出现一些情况，JVM进程将会被终止<blockquote>
<ol>
<li>程序运行到最后结束</li>
<li>程序运行中遇到错误或者未捕获的异常</li>
<li>程序中使用System.exit() 或 Runtime.getRuntime().exit() 将会结束程序</li>
<li>JVM被平台终止</li>
</ol>
</blockquote>
</li>
</ol>
<a id="more"></a>
<hr>
<h1 id="类加载-类初始化-的三个步骤"><a href="#类加载-类初始化-的三个步骤" class="headerlink" title="类加载(类初始化)的三个步骤"></a>类加载(类初始化)的三个步骤</h1><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><blockquote>
<p>当我们启动一个 JVM ，系统将会通过 加载 连接 初始化 三个步骤 对该类进行初始化！</p>
</blockquote>
<p>加载：将类的Class文件读入内存，并为之创建一个java.lang.Class对象~~~~也就是说，当我们使用任何类的时候，系统都会为之建立java.lang.Class对象！加载是由类加载器完成的，当然也可以通过继承来创建类加载器！</p>
<blockquote>
<p>当类被成功加载到 JVM 中，系统将会生成一个 java.lang.Class对象， 从而进入连接阶段</p>
</blockquote>
<hr>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>连接：负责把加载到的二进制数据合并到JRE中，分为如下3个阶段</p>
<h3 id="连接的三个阶段"><a href="#连接的三个阶段" class="headerlink" title="连接的三个阶段"></a>连接的三个阶段</h3><ol>
<li>验证：用于检验被加载的类是否有正确的内部结构</li>
<li>准备：负责为类变量分配内存，并设置默认初始值</li>
<li>解析：将类的二进制数据中的符合引用替换成直接引用</li>
</ol>
<hr>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>初始化：对类变量进行初始化</p>
<h3 id="初始化两种方式："><a href="#初始化两种方式：" class="headerlink" title="初始化两种方式："></a>初始化两种方式：</h3><ol>
<li>静态代码块给类变量指定初始值</li>
<li>声明类变量的时候指定初始值</li>
</ol>
<blockquote>
<p>注意事项：</p>
<ol>
<li>如果类还没有被加载和连接，则程序先加载并连接该类</li>
<li>如果该类的直接父类没有初始化，则先初始化直接父类</li>
<li>如果类中有初始化语句，则依次执行初始化语句</li>
</ol>
</blockquote>
<h3 id="类初始化的时机"><a href="#类初始化的时机" class="headerlink" title="类初始化的时机"></a>类初始化的时机</h3><ol>
<li>创建类的实例</li>
<li>调用某个类的类方法</li>
<li>调用某个类或接口的类变量</li>
<li>使用反射方式强制创建某个类或接口对应的java.lang.Class对象</li>
<li>初始化某个类的子类</li>
<li>直接使用java命令运行某个主类的时候<blockquote>
<p>对于一个 final 型 变量，编译时就可以确定</p>
</blockquote>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">"静态初始化快。。。"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> String compileConstant = <span class="string">"final变量"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		System.out.println(MyTest.compileConstant);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果如下<br>final变量</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Class </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Class </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[无框架使用alibaba开源代码连接池Druid]]></title>
      <url>/2017/10/11/%E6%97%A0%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8ali%E5%BC%80%E6%BA%90%E8%BF%9E%E6%8E%A5%E6%B1%A0Druid/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Druid是Java语言中最好的数据库连接池。Druid能够提供强大的监控和扩展功能。–温少(alibaba开源Druid负责人)</p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li><a href="https://github.com/sivanWu0222/Druid-Test/blob/master/druid-1.1.4.jar" target="_blank" rel="noopener">下载核心jar包</a></li>
<li>下载log4j的<a href="https://github.com/sivanWu0222/Druid-Test/blob/master/log4j-1.2.9.jar" target="_blank" rel="noopener">jar包</a>以及<a href="https://github.com/sivanWu0222/Druid-Test/blob/master/log4j.properties" target="_blank" rel="noopener">配置文件</a></li>
<li>拷贝对应的数据库驱动jar包到工作空间中(由于所druid可以跨数据库进行开发，因此我们需要将我们自己使用的数据库驱动拷贝到工作空间中)</li>
</ol>
<hr>
<h2 id="使用druid实现连接到数据库"><a href="#使用druid实现连接到数据库" class="headerlink" title="使用druid实现连接到数据库"></a>使用druid实现连接到数据库</h2><ol>
<li>WEB-INF下新建一个文件,命名为 db_server.properties ,配置如下<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://127.0.0.1:3306/master</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line">filters=stat</span><br><span class="line">initialSize=2</span><br><span class="line">maxActive=300</span><br><span class="line">maxWait=60000</span><br><span class="line">timeBetweenEvictionRunsMillis=60000</span><br><span class="line">minEvictableIdleTimeMillis=300000</span><br><span class="line">validationQuery=SELECT 1</span><br><span class="line">testWhileIdle=true</span><br><span class="line">testOnBorrow=false</span><br><span class="line">testOnReturn=false</span><br><span class="line">poolPreparedStatements=false</span><br><span class="line">maxPoolPreparedStatementPerConnectionSize=200</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注意修改自己的数据库用户名，密码以及url和driverClassName</p>
</blockquote>
<ol start="2">
<li>创建一个连接池工具管理类，命名为DBPoolConnection.java</li>
</ol>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidPooledConnection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要实现单例模式，保证全局只有一个数据库连接池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBPoolConnection</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> Logger log = Logger.getLogger(DBPoolConnection.class);</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DBPoolConnection dbPoolConnection = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DruidDataSource druidDataSource = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		Properties properties = loadPropertiesFile(<span class="string">"db_server.properties"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			druidDataSource = (DruidDataSource) DruidDataSourceFactory.createDataSource(properties); <span class="comment">/* DruidDataSrouce工厂模式*/</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			log.error(<span class="string">"获取配置失败"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 数据库连接池单例</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> DBPoolConnection <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> == dbPoolConnection) &#123;</span><br><span class="line">			dbPoolConnection = <span class="keyword">new</span> DBPoolConnection();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> dbPoolConnection;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 返回druid数据库连接</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> DruidPooledConnection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> druidDataSource.getConnection();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment">	 *            配置文件名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> Properties对象</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Properties <span class="title">loadPropertiesFile</span><span class="params">(String fullFile)</span> </span>&#123;</span><br><span class="line">		String webRootPath = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> == fullFile || fullFile.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Properties file path can not be null"</span> + fullFile);</span><br><span class="line">		&#125;</span><br><span class="line">		webRootPath = DBPoolConnection.class.getClassLoader().getResource(<span class="string">""</span>).getPath();</span><br><span class="line">		webRootPath = <span class="keyword">new</span> File(webRootPath).getParent();</span><br><span class="line">		InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">		Properties p = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(webRootPath + File.separator + fullFile));</span><br><span class="line">			p = <span class="keyword">new</span> Properties();</span><br><span class="line">			p.load(inputStream);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">null</span> != inputStream) &#123;</span><br><span class="line">					inputStream.close();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> p;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>将下载好的log4j的配置文件拷贝到src目录下，jar包拷贝到WEB-INF目录下的lib目录中</p>
</li>
<li><p>编写测试代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidPooledConnection;</span><br><span class="line"><span class="keyword">import</span> com.util.DBPoolConnection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		DBPoolConnection connection = DBPoolConnection.getInstance();</span><br><span class="line">		DruidPooledConnection conn = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			conn = connection.getConnection();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">			<span class="comment">/* TODO Auto-generated catch block*/</span></span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(conn);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h2 id="使用druid实现监控功能"><a href="#使用druid实现监控功能" class="headerlink" title="使用druid实现监控功能"></a>使用druid实现监控功能</h2><blockquote>
<p>druid不仅仅拥有美好的连接池功能，甚至提供了后台的监视功能</p>
</blockquote>
<p><img src="http://on3w7gc9m.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720171011230452.png"></p>
<ol>
<li><p>web.xml中配置filter:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>DruidWebStatFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.alibaba.druid.support.http.WebStatFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>exclusions<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>DruidWebStatFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>web.xml中配置Servlet:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatView<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatView<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/druid/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>开启服务器，url地址为 <a href="http://localhost:8080/项目名/druid/，就可以看到关于druid的监控状况" target="_blank" rel="noopener">http://localhost:8080/项目名/druid/，就可以看到关于druid的监控状况</a></p>
</li>
</ol>
<hr>
<p>总结：之前Hibernate默认采用的c3p0数据源，由于8个小时不执行SQL操作，将会默认关闭所有连接，很不和谐，所以建议采用druid，同时可以进行监控后台SQL运行情况，甚至可以进行安全监视</p>
]]></content>
      
        <categories>
            
            <category> 开源软件 </category>
            
            <category> Druid </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[彻底理解int类型的取值范围]]></title>
      <url>/2017/10/01/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3int%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/</url>
      <content type="html"><![CDATA[<blockquote>
<p>今天在看一道题目的时候，遇到了一个问题，就是关于数据类型最值的问题，这里介绍下int类型的取值范围，并且如何理解int取值范围</p>
</blockquote>
<h2 id="基本计算机知识"><a href="#基本计算机知识" class="headerlink" title="基本计算机知识"></a>基本计算机知识</h2><blockquote>
<p>在我们了解今天的话题之前，我们需要了解如下的知识：</p>
<ol>
<li>原码，补码，反码 ~~~~这都是什么鬼？<br>举个最简单例子:<br>例如 : 数字5的二进制 可以表示为（默认是32位机器） ,这里就是原码（<strong>第一位是符号位，0为正数，1为负数</strong>）<pre><code>0000 0000 0000 0000 0000 0000 0000 0101
</code></pre>对应反码为 0111 1111 1111 1111 1111 1111 1111  1010 ，反码计算规则：对于符号位其他的位取反就可以（也就是把0替换成1，把1替换成0）<br>对应补码的计算规则为 （反码 + 1 )， 也就是 0111 1111 1111 1111 1111 1111 1111 1011</li>
<li>正数在计算机中如何表示？负数呢？<br>计算机中，正数用原码表示，负数用补码(原码取反(符号位不变),然后加上1)表示</li>
<li>c语言中的位数如何知道？<br>最直接体现是由编译器自己决定的，但其实并没有这么简单，还收到OS影响，只有在OS支持下我们才可以由编译器决定！</li>
</ol>
</blockquote>
<a id="more"></a>
<h2 id="计算int取值范围"><a href="#计算int取值范围" class="headerlink" title="计算int取值范围"></a>计算int取值范围</h2><blockquote>
<p>这里博主OS系统位数为64，编译器如下图</p>
</blockquote>
<p><img src="http://on3w7gc9m.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720171001162021.png"></p>
<p>1.确定int位数(1 字节（Byte） = 32 位(bit))<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">2147483647</span>;</span><br><span class="line">	<span class="comment">/*通过sizeof 来计算int字节数，这里返回4,也就是4个字节 */</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\t"</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2.确定int最大值</p>
<blockquote>
<p>32位对应的int最大值 也就是 0111 1111 1111 1111 1111 1111 1111 1111<br>换算成10进制为 21 4748 3647（21亿多）</p>
</blockquote>
<p>3.有一个小纰漏</p>
<blockquote>
<p>既然0000 0000 0000 0000 0000 0000 0000 0000 和 1000 0000 0000 0000 0000 0000 0000 0000 都可以表示0，并且第一个最正确的说法是 正0，同理，第二个是 负0</p>
</blockquote>
<blockquote>
<p>不要忘记一件事：负数 永远用补码表示<br>对 1000 0000 0000 0000 0000 0000 0000 0000 求补码得到的正是 0000 0000 0000 0000 0000 0000 0000 0000</p>
</blockquote>
<p>既然两个表示的是同一个，都表示0，那岂不是多了1个二进制数么，从而人为规定 原码中的1000 0000 0000 0000 0000 0000 0000 0000 表示 -32768，也就成了负数中的最小值</p>
<p>结论： int 在 32位 的环境中 范围是 -21 4748 3648 ~ +21 4748 3647</p>
]]></content>
      
        <categories>
            
            <category> 计算机基本知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C </tag>
            
            <tag> OS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL存储引擎的选择]]></title>
      <url>/2017/09/20/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%9A%84%E9%80%89%E6%8B%A9/</url>
      <content type="html"><![CDATA[<h2 id="了解存储引擎"><a href="#了解存储引擎" class="headerlink" title="了解存储引擎"></a>了解存储引擎</h2><blockquote>
<p>存储引擎其实就是数据在数据库中的存放方式，通过什么样的方式存储数据效率更高，对于应用的优化有着举足轻重的作用，尤其是对于我们这样海量数据的时代，能够高效的处理海量数据就已经很不易了！</p>
</blockquote>
<p>MySQL5.0 支持如下存储引擎：</p>
<ol>
<li>MyISAM</li>
<li>InnoDB</li>
<li>BDB</li>
<li>MEMORY</li>
<li>MERGE</li>
<li>EXAMPLE</li>
<li>NDB Cluster</li>
<li>ARCHIVE</li>
<li>CSV</li>
<li>BLACKHOLE</li>
<li>FEDERATED<blockquote>
<p>如此多的存储引擎，却只有InnoDB和BDB提供事务安全表，其他存储引擎都是非事务安全表</p>
</blockquote>
</li>
</ol>
<h3 id="选择存储引擎"><a href="#选择存储引擎" class="headerlink" title="选择存储引擎"></a>选择存储引擎</h3><blockquote>
<p>当我们在创建表的时候没有指定存储引擎，系统将会使用默认存储引擎，MySQL5.5(包含5.5)之前默认存储引擎为MyISAM,之后便改为了InnoDB,如果要修改存储引擎，可以在创建表的SQL语句中进行设置。</p>
</blockquote>
<p>查看当前数据库支持的存储引擎，可以使用如下命令<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">ENGINES</span> \G</span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'have%'</span>;</span><br></pre></td></tr></table></figure></p>
<figure class="image-box">
                <img src="http://on3w7gc9m.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170913144228.png" alt title class>
                <p></p>
            </figure>
<blockquote>
<p>图片中显示 value 显示为 “DISABLED” 的记录表示支持该存储引擎，但是数据库启动的时候被禁用</p>
</blockquote>
<h4 id="创建表的时候指定存储引擎"><a href="#创建表的时候指定存储引擎" class="headerlink" title="创建表的时候指定存储引擎"></a>创建表的时候指定存储引擎</h4><blockquote>
<p>创建表可以指定存储引擎，例如下面的SQL语句</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ai (</span><br><span class="line">  i <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(i)</span><br><span class="line">) <span class="keyword">ENGINE</span> = MyISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = UTF8;</span><br></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://on3w7gc9m.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170913145307.png" alt title class>
                <p></p>
            </figure>
<h4 id="修改存储引擎"><a href="#修改存储引擎" class="headerlink" title="修改存储引擎"></a>修改存储引擎</h4><blockquote>
<p>也可以使用ALTER TABLE 语句进行存储引擎的修改，将一个已经存在的表修改成其他存储引擎<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ai <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>结果可以使用<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ai \G</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>进行查看</p>
<hr>

<h2 id="各种存储引擎的特性"><a href="#各种存储引擎的特性" class="headerlink" title="各种存储引擎的特性"></a>各种存储引擎的特性</h2><figure class="image-box">
                <img src="http://on3w7gc9m.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170920232002.jpg" alt title class>
                <p></p>
            </figure>
<h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><blockquote>
<p>MyISAM作为MySQL 5.5 之前默认的存储引擎。不支持事务也不支持外键</p>
</blockquote>
<p>优势： 访问速度快，对事务完整性没有要求或者以SELECT, INSERT 为主的应用基本上可以使用该引擎来创建表</p>
<blockquote>
<p>每个MyISAM 在磁盘上存储成3个文件，其文件名和表名相同，但扩展名分别是：</p>
<ol>
<li>.frm(存储表定义)</li>
<li>.MYD(MYData,存储数据)</li>
<li>.MYI(MYIndex,存储索引)<br><strong> 数据文件和索引文件可以放置在不同目录，平均分布IO，获得更快的速度 </strong></li>
</ol>
</blockquote>
<p>如果需要指定索引文件和数据文件路径，需要在创建表的时候通过DATA DIRECTORY 和 INDEX DIRECTORY 语句指定，也就是说不同MyISAM 表的索引文件和数据文件可以放置到不同路径下。文件路径需要绝对路径，并且需要访问权限</p>
<h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><blockquote>
<p>InooDB 存储引擎提供了具有提交，回滚和崩溃恢复能力的事务安全，但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些，并且会占用更多的磁盘空间已保留数据和索引</p>
</blockquote>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol>
<li><p>自动增长列</p>
<blockquote>
<p>InnoDB表的增长列可以手工插入，但是插入的值如果是空或者0，则实际插入的值将是自动增长后的值</p>
</blockquote>
</li>
<li><p>外键约束</p>
</li>
<li><p>存储方式</p>
</li>
</ol>
<blockquote>
<ol>
<li>使用共享空间存储，这种方式创建的表结构保存在.frm文件中，数据和索引保存在innodb_data_home_dir和innodb_data_file_path定义的表空间，可以是多个文件</li>
<li>使用多表空间存储，这种方式创建的表结构依然保存在.frm文件中，但是每个表的数据和索引单独保存在.ibd中。如果是个分区表，则每个分区对应单独的.ibd文件，文件名是“表名 + 分区名”,可以在创建分区的时候指定每个分区数据文件的位置，以此来将表的IO均匀分布在多个磁盘上。</li>
</ol>
</blockquote>
<h3 id="MEMORY"><a href="#MEMORY" class="headerlink" title="MEMORY"></a>MEMORY</h3><blockquote>
<p>MEMPRY存储引擎使用存在于内存中的内容来创建表，每个MEMORY表只实际对应一个磁盘文件，格式是.frm。MEMORY类型的表访问也非常快，因为它的数据位于内存中，并且默认使用HASH索引，但是一旦服务关闭，表中的数据将会丢失。</p>
</blockquote>
<p>创建索引的时候可以指定是HASH索引还是BTREE索引<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">USING</span> <span class="keyword">HASH</span> <span class="keyword">ON</span> table_name(column_name);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>在启动MySQL服务的时候，使用–inint-file选项，把INSERT INTO … SELECT 或 LOAD DATA INFILE 这样的语句放入到该文件中，就可以在服务启动的时候从持久稳固的数据源装载表</p>
</blockquote>
<p>当我们对MEMORY存储引擎的表操纵完成后，应该释放内存，执行DELETE FROM 或 TRUNCATE TABLE 或者 DROP TABLE;</p>
<p>每个MEMORY 表中可以放置的数据量大小，受到max_head_table_size系统变量的约束，这个系统变量初始值为16MB，可以根据需要加大。此外，在定义MEMORY表的时候，可以通过MAX_ROWS子句指定表的最大行数。</p>
<p>MEMORY 类型的存储引擎主要用于内容变化不太频繁，或者作为统计操作的中间结果表，便于高效的对中间结果进行分析并得到最终的统计结果。对存储引擎为MEMORY的表进行更新操作要谨慎，因为数据并没有实际写入到磁盘中，所以如果由于异常或者重启等引起的将会导致数据丢失。</p>
<h3 id="MERGE"><a href="#MERGE" class="headerlink" title="MERGE"></a>MERGE</h3><blockquote>
<p>MERGE 存储引擎是一组MyISAM表的组合，这些MyISAM表必须结构完全相同，MERGE表本身并没有数据，对MERGE类型的表进行查询，更新和删除操作，实际上是对内部MyISAM表进行的。对于MERGE类型表的插入操作，是通过INSERT_METHOD子句定义插入的表，可以有3个不同的值，使用FIRST或LAST值使得插入操作被相应地作用在第一或者最后一个表上，不定义这个子句或者定义为NO，表示不能对这个MERGE表执行插入操作。<br>可以对MERGE表进行DROP操作，仅仅只是删除MERGE，并不会对表的结构有太大影响<br>MERGE表在磁盘上保留两个文件，文件名以表的名字开始，一个.frm文件存储表定义，另一个.MYG文件包含组合表信息，包含MERGE表由哪些表组成，插入新的数据时的依据。可以通过修改.MRG文件来修改MERGE表，但是修改后要通过FLUSH TABLES刷新。</p>
</blockquote>
<p>MERGE表和分区表的区别：MERGE表并不能智能地将记录写到对应的表中，而分区表则可以。</p>
<h3 id="ToKuDB"><a href="#ToKuDB" class="headerlink" title="ToKuDB"></a>ToKuDB</h3><blockquote>
<p>ToKuDB是第三方存储引擎，并不是MySQL自带的存储引擎，除此之外，还有列式存储引擎Infobright,高写性能高压缩ToKuDB(也就是这里所讲到的)</p>
</blockquote>
<p>一个高性能，支持事务处理的MySQL 和 MariaDB 存储引擎，具有高扩展性，高压缩率，高效的写入性能，支持大多数在线DDL操作</p>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ol>
<li>使用Fractal 树保证高效的插入性能</li>
<li>优秀的压缩性，比InnoDB 高近10倍</li>
<li>Hot Schema Changes 特性支持在线创建索引和添加，删除属性列等DDL操作</li>
<li>使用Bulk Loader达到快速加载大量数据</li>
<li>提供了主从延迟消除技术</li>
<li>支持ACID 和 MVCC</li>
</ol>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ol>
<li>日志数据，因为日志插入频繁，且存量大</li>
<li>历史数据，通常不会有写操作，可以利用ToKuDB的高压缩特性进行存储</li>
<li>在线DDL较频繁的场景，可以使用ToKuDB可以大大增加系统可用性</li>
</ol>
<hr>

<h2 id="选择合适的存储引擎"><a href="#选择合适的存储引擎" class="headerlink" title="选择合适的存储引擎"></a>选择合适的存储引擎</h2><h3 id="MyISAM-1"><a href="#MyISAM-1" class="headerlink" title="MyISAM"></a>MyISAM</h3><blockquote>
<p>MySQL 5.5 之前的默认存储引擎，如果应用以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性，并发性要求不是很高，选择MyISAM引擎将会非常合适，MyISAM是在web,数据仓储，和其他应用环境下最常使用的存储引擎之一</p>
</blockquote>
<h3 id="InnoDB-1"><a href="#InnoDB-1" class="headerlink" title="InnoDB"></a>InnoDB</h3><blockquote>
<p>用于事务处理应用程序，支持外键，如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询以外，还包括很多的更新、删除操作，那么InnoDB存储引擎应该是比较合适的选择。InnoDB存储引擎除了有效地降低由于删除和更新导致的锁定，还可以确保事务的完整提交和回滚，对于类似计费系统或者财务系统等对数据准确性要求较高的系统，InnoD都是较好的选择</p>
</blockquote>
<h3 id="MEMORY-1"><a href="#MEMORY-1" class="headerlink" title="MEMORY"></a>MEMORY</h3><blockquote>
<p>将所有数据保存在RAM中，在需要快速定位记录和其他类似数据的环境下，可以提供极快的访问，MEMORY的缺陷是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中数据可以恢复。MEMORY表通常用于更新不太频繁的小表，用于快速访问得到结果</p>
</blockquote>
<h3 id="MERGE-1"><a href="#MERGE-1" class="headerlink" title="MERGE"></a>MERGE</h3><p><strong>用于将一系列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用它们，MERGE表的优点在于可以突破对单个MyISAM表大小的限制,并且通过将不同的表分布在多个磁盘上</strong>，可以有效的改善MERGE表的访问效率，这对于数据仓储等VLDB环境非常适合！</p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
            <category> SQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java全球化与格式化]]></title>
      <url>/2017/07/19/Java%E5%85%A8%E7%90%83%E5%8C%96%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近几年，随着软件蔓延全球的趋势，全球化的脚步不断前进，全球化就意味着我们必须根据不同用户所在的不同地域使用不同的语言，其中最简单的就是根据用户所在地区进行相应语言的设置，也就是本地化，因此全球化离不开本地化！</p>
</blockquote>
<h2 id="Java中的全球化"><a href="#Java中的全球化" class="headerlink" title="Java中的全球化"></a>Java中的全球化</h2><blockquote>
<p>最近几年，随着JDK版本的的深入，Java也不断升级，提供了对不同国家和不同地区的支持！</p>
</blockquote>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>将程序中的标签，提示等信息放在资源文件中，根据用户所在的地区进行相应的选择，其中每个资源文件采用key—-value形式进行配对，每个资源文件中的key不变，随着地区进行value的改变</p>
<h3 id="用到的类"><a href="#用到的类" class="headerlink" title="用到的类"></a>用到的类</h3><ol>
<li>java.util.Locale         加载国家、资源语言包</li>
<li>java.util.ResourceBundle   封装特定国家、地区环境</li>
<li>java.text.MessageFormat    对带占位符的字符串进行格式化</li>
</ol>
<h3 id="资源文件命名规范"><a href="#资源文件命名规范" class="headerlink" title="资源文件命名规范"></a>资源文件命名规范</h3><blockquote>
<p>对于不同语言资源文件的配置，我们也有一套规范</p>
</blockquote>
<ol>
<li>值通常采用 Key —– value 形式进行使用</li>
<li>资源文件通常采用 propertyname_language.properties 的文件名形式进行命名</li>
</ol>
<h3 id="获取Java支持的国家和语言"><a href="#获取Java支持的国家和语言" class="headerlink" title="获取Java支持的国家和语言"></a>获取Java支持的国家和语言</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事实上JAVA不可能支持所有国家和地区，如果需要获取JAVA支持的国家和地区，</span></span><br><span class="line"><span class="comment"> * 则可以调用Locale类的getAvailableLocales()方法，返回一个Locale数组</span></span><br><span class="line"><span class="comment"> * 包含了支持的国家和地区，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetSupportClassAndArea</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Locale[] locales = Locale.getAvailableLocales();</span><br><span class="line">    <span class="keyword">for</span> (Locale locale : locales) &#123;</span><br><span class="line">      System.out.println(locale.getDisplayCountry() + <span class="string">"="</span> +   locale.getCountry() + <span class="string">"\t"</span> + locale.getLanguage() + <span class="string">"="</span> + locale.getDisplayLanguage());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="编写一个简单的国际化程序"><a href="#编写一个简单的国际化程序" class="headerlink" title="编写一个简单的国际化程序"></a>编写一个简单的国际化程序</h3><blockquote>
<p>这里进行一个简单的国际化程序的演示</p>
</blockquote>
<ol>
<li>编写简单的源代码程序</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>编写配置文件1 mess.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello = 你好!</span><br><span class="line">World = 世界!</span><br></pre></td></tr></table></figure>
</li>
<li><p>将配置文件编译成配置中文properties文件<br>采用如下命令进行配置</p>
<blockquote>
<p> native2ascii 源配置文件 目的配置文件</p>
</blockquote>
</li>
<li><p>编写如下Java程序进行测试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">/*取得系统默认的国家/语言环境*/</span></span><br><span class="line">		Locale myLocale = Locale.getDefault(Locale.Category.FORMAT);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*根据指定国家/语言环境加载资源配置文件*/</span></span><br><span class="line">		ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"mess"</span>, myLocale);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*打印从资源文件中获得的信息*/</span></span><br><span class="line">		System.out.println(bundle.getString(<span class="string">"hello"</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Internationalization </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Internationalization </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C3P0连接池的使用]]></title>
      <url>/2017/07/07/C3P0%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>C3P0作为JDBC一个开源的连接池之一，有自己的很大优点，与DBCP相比，C3P0可以自动回收空闲连接，它实现了数据源和JNDI绑定，并且支持JDBC3规范和JDBC2的标准扩展，甚至Hibernate 和 Spring 都采用它作为JDBC的连接池</p>
</blockquote>
<hr>
<h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><ol>
<li>导入两个<a href="https://github.com/sivanWu0222/JavaExercises/tree/master/JavaJY/13/WebContent/WEB-INF/lib" target="_blank" rel="noopener">Jar包</a></li>
</ol>
<hr>
<h2 id="使用方法一："><a href="#使用方法一：" class="headerlink" title="使用方法一："></a>使用方法一：</h2><blockquote>
<p>不采用封装，直接进行使用，对于一些连接数据库所需要的参数写在了mysql.ini配置文件中，包括driver,url,user,pass 四个配置选项，采用 windows配置文件的格式（键值对）进行配置</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToUseC3p0</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*初始化数据库连接参数*/</span></span><br><span class="line">		Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			props.load(<span class="keyword">new</span> FileInputStream(<span class="string">"mysql.ini"</span>));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">			</span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		String driver = props.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">		String user = props.getProperty(<span class="string">"user"</span>);</span><br><span class="line">		String pass = props.getProperty(<span class="string">"pass"</span>);</span><br><span class="line">		String url = props.getProperty(<span class="string">"url"</span>);</span><br><span class="line">		</span><br><span class="line">		ComboPooledDataSource cpds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			cpds.setDriverClass(driver);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (PropertyVetoException e) &#123;</span><br><span class="line">			</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		cpds.setJdbcUrl(url);</span><br><span class="line">		cpds.setUser(user);</span><br><span class="line">		cpds.setPassword(pass);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*获得连接，使用连接，然后释放连接*/</span></span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			 conn = cpds.getConnection();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.close(); </span><br><span class="line">										</span><br><span class="line">				<span class="comment">/*这里并没有真正释放连接，而是将连接归还到连接池中*/</span></span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<h2 id="使用方法二："><a href="#使用方法二：" class="headerlink" title="使用方法二："></a>使用方法二：</h2><blockquote>
<p>对于方法一的使用，其实有很多弊端，包括每次使用，都需要写一段很长很冗余的代码，不仅仅程序效率低下，后期的维护更是难上加难！方法二，我们初步进行封装，每次都会获得一个连接池</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">/*初始化数据库连接参数*/</span></span><br><span class="line">				Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					props.load(<span class="keyword">new</span> FileInputStream(<span class="string">"mysql.ini"</span>));</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">					</span><br><span class="line">					e1.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				String driver = props.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">				String user = props.getProperty(<span class="string">"user"</span>);</span><br><span class="line">				String pass = props.getProperty(<span class="string">"pass"</span>);</span><br><span class="line">				String url = props.getProperty(<span class="string">"url"</span>);</span><br><span class="line">				</span><br><span class="line">				ComboPooledDataSource cpds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					cpds.setDriverClass(driver);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (PropertyVetoException e) &#123;</span><br><span class="line">					</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				cpds.setJdbcUrl(url);</span><br><span class="line">				cpds.setUser(user);</span><br><span class="line">				cpds.setPassword(pass);</span><br><span class="line">				</span><br><span class="line">		<span class="keyword">return</span> cpds;</span><br><span class="line">	    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="弊端："><a href="#弊端：" class="headerlink" title="弊端："></a>弊端：</h3><ol>
<li>每次调用这个JdbcUtils类中的方法都会返回一个不同的连接池</li>
<li>每次调用方法都需要进行初始化连接池的参数，负载大</li>
</ol>
<hr>
<h2 id="使用方法三："><a href="#使用方法三：" class="headerlink" title="使用方法三："></a>使用方法三：</h2><blockquote>
<p>对于这个使用C3P0的方法，我们每次都会返回同一个已经配置好的DataSource对象，只需要我们获得连接，使用连接，然后释放连接就可以了！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*在类加载的时候便会执行，因此cpds只有一份，不会重复*/</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ComboPooledDataSource cpds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String pass;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*为了负责，将编译异常转换为运行时异常抛出*/</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			props.load(<span class="keyword">new</span> FileInputStream(<span class="string">"mysql.ini"</span>));</span><br><span class="line">		&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		driver = props.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">		url = props.getProperty(<span class="string">"url"</span>);</span><br><span class="line">		user = props.getProperty(<span class="string">"user"</span>);</span><br><span class="line">		pass = props.getProperty(<span class="string">"pass"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			cpds.setDriverClass(driver);</span><br><span class="line">			cpds.setUser(user);</span><br><span class="line">			cpds.setJdbcUrl(url);</span><br><span class="line">			cpds.setPassword(pass);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;			</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*为了避免每次调用该方法获得连接池的时候重复设置参数，我们在上面的静态代码块中设置参数*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cpds;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ol>
<li>静态代码块中产生的异常我们需要进行转换成运行时异常，并且手动进行抛出</li>
<li>对于C3P0的使用，我们只需要配置一次，不仅省时，还可以节省空间，不过后期我们会采用XML文件进行配置，这里采用了ini配置文件</li>
<li>采用JdbcUtils的getDataSource()方法，我们每次都会获得同一个DataSource对象，正符合我们每个项目只需要一个连接池就可以的要求，并且便于管理！</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> C3P0 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[版本管理工具-Git篇[2]]]></title>
      <url>/2017/07/01/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-Git%E7%AF%87%5B2%5D/</url>
      <content type="html"><![CDATA[<h1 id="git基本指令"><a href="#git基本指令" class="headerlink" title="git基本指令"></a>git基本指令</h1><h2 id="使用git配置用户信息"><a href="#使用git配置用户信息" class="headerlink" title="使用git配置用户信息"></a>使用git配置用户信息</h2><blockquote>
<p>对于git所用到的用户信息，对于我们每次提交更新来说都很重要，用来区分谁提交了更新，将会随着更新的内容纳入仓库记录中</p>
</blockquote>
<h3 id="配置用户名称和邮箱"><a href="#配置用户名称和邮箱" class="headerlink" title="配置用户名称和邮箱"></a>配置用户名称和邮箱</h3><blockquote>
<p>当我们要配置用户名称的时候，都想要知道，之前是否已经配置过用户名称，如果没有配置过或者配置的不正确，将要采用如下方法进行配置</p>
</blockquote>
<pre><code>git config user.name        //打印当前用户名称
git config user.email       //打印当前用户邮箱
</code></pre><h4 id="针对全局进行配置"><a href="#针对全局进行配置" class="headerlink" title="针对全局进行配置"></a>针对全局进行配置</h4><blockquote>
<p>针对全局进行配置，我们的Git主配置文件将会被修改，采用 –global 选项，更改的配置文件就是位于用户主目录下的那个，以后所有的项目都会默认使用这里配置的用户信息</p>
</blockquote>
<pre><code>git config --global user.name  &quot;这里写上你的用户名称&quot;
git config --global user.email &quot;这里写上你的邮箱&quot;
</code></pre><h4 id="针对某个项目进行配置"><a href="#针对某个项目进行配置" class="headerlink" title="针对某个项目进行配置"></a>针对某个项目进行配置</h4><blockquote>
<p>不采用 –global 选项，就是针对某个特定的项目进行配置，而不是全局配置</p>
</blockquote>
<pre><code>git config --local user.name &quot;这里写上你的用户名&quot;
git config --local user.email &quot;这里写上你的邮箱&quot;
</code></pre><a id="more"></a>
<hr>
<h2 id="修改默认的文本编辑器"><a href="#修改默认的文本编辑器" class="headerlink" title="修改默认的文本编辑器"></a>修改默认的文本编辑器</h2><blockquote>
<p>如果我们在输入一些额外信息的时候，将会调用操作系统指定的编辑器，如果我们想要修改编辑器（这里假设修改为 emacs），可以采用如下指令</p>
</blockquote>
<pre><code>git config --global core.editor emacs
</code></pre><hr>
<h2 id="查看用户配置信息"><a href="#查看用户配置信息" class="headerlink" title="查看用户配置信息"></a>查看用户配置信息</h2><blockquote>
<p>对于一些忘记自己目前Git配置信息的用户，可以使用如下指令进行查看</p>
</blockquote>
<pre><code>git config --list
</code></pre><hr>
<h2 id="差异分析工具"><a href="#差异分析工具" class="headerlink" title="差异分析工具"></a>差异分析工具</h2><blockquote>
<p>在产生代码冲突的时候，我们将会决定需要使用哪种差异分析工具来解决代码冲突，可以采用如下指令修改默认的差异分析工具</p>
</blockquote>
<pre><code>git config --global merge.tool vimdiff
</code></pre><hr>
<h2 id="采用git获取帮助"><a href="#采用git获取帮助" class="headerlink" title="采用git获取帮助"></a>采用git获取帮助</h2><blockquote>
<p>在采用git指令时，难免会产生很多疑问，可以采用如下的几个指令进行查看</p>
</blockquote>
<pre><code>git help &lt;verb&gt;
git &lt;verb&gt; --help
</code></pre><h2 id="从远程仓库克隆项目到本地"><a href="#从远程仓库克隆项目到本地" class="headerlink" title="从远程仓库克隆项目到本地"></a>从远程仓库克隆项目到本地</h2><blockquote>
<p>对于git，如何将代码从GitHub克隆到本地，非常简单，只要在联网的情况下，使用下面几个指令便可以将仓库克隆到本地</p>
</blockquote>
<h3 id="初始化仓库所在的目录"><a href="#初始化仓库所在的目录" class="headerlink" title="初始化仓库所在的目录"></a>初始化仓库所在的目录</h3><pre><code>git init
</code></pre><blockquote>
<p>使用git init 指令，将会在当前目录生成一个.git目录</p>
</blockquote>
<h4 id="没有生成-git-目录时"><a href="#没有生成-git-目录时" class="headerlink" title="没有生成 .git 目录时"></a>没有生成 .git 目录时</h4><blockquote>
<p>关于很多人使用git init指令，但是没有产生.git文件，将会给我们造成很大的干扰，采用如下方法进行查看</p>
</blockquote>
<p>使用 ls -la 指令进行查看，如果显示出的文件有 .git 文件，则正常</p>
<h3 id="使用git-clone指令对远程仓库克隆到本地"><a href="#使用git-clone指令对远程仓库克隆到本地" class="headerlink" title="使用git clone指令对远程仓库克隆到本地"></a>使用git clone指令对远程仓库克隆到本地</h3><pre><code>git clone &lt;url&gt;(项目地址)
git clone &lt;url&gt;(项目地址)  文件名称     
//创建一个指定的文件夹（名称为文件名称），并将远程仓库所有代码存放到改文件夹下
</code></pre>]]></content>
      
        <categories>
            
            <category> git </category>
            
            <category> 入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> GitHub </tag>
            
            <tag> 版本管理工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Algorithm-冒泡排序]]></title>
      <url>/2017/05/22/Algorithm-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><blockquote>
<p>这里假定冒泡排序是整形数组，并且以升序排列</p>
</blockquote>
<ol>
<li><p>冒牌排序需要我们遍历几次数组，每次遍历中，需要比较相邻的两个元素，如果按降序排列，则互换，否则保持不变！由于较小的值像“气泡”一样逐渐浮向顶部，而较大的值沉向底部，所以称为冒泡排序或者下沉排序。</p>
</li>
<li><p>特征：假设一共有n个元素，第m次遍历之后，最后的m个元素顺序已经确定</p>
</li>
<li>时间复杂度：最大为o(n*n)，最小为o(1)</li>
</ol>
<hr>
<h2 id="初始的冒泡排序："><a href="#初始的冒泡排序：" class="headerlink" title="初始的冒泡排序："></a>初始的冒泡排序：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 初级别的冒泡排序</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 排序后的数组</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] toBubbleSort0(<span class="keyword">int</span>[] nums)&#123;</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.length - i; j++)&#123;</span><br><span class="line">				sum++;</span><br><span class="line">				<span class="keyword">if</span>(nums[j] &gt; nums[j+<span class="number">1</span>])&#123;</span><br><span class="line">					count++;</span><br><span class="line">					<span class="keyword">int</span> temp = nums[j];</span><br><span class="line">					nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">					nums[j+<span class="number">1</span>] = temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(count);</span><br><span class="line">		System.out.println(sum);</span><br><span class="line">		<span class="keyword">return</span> nums;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h2 id="简单的冒泡排序："><a href="#简单的冒泡排序：" class="headerlink" title="简单的冒泡排序："></a>简单的冒泡排序：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 一个简单的冒泡排序</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 排序后的数组</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] toBubbleSort(<span class="keyword">int</span>[] nums)&#123;</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.length - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">				sum++;</span><br><span class="line">				<span class="keyword">if</span>(nums[j] &gt; nums[j+<span class="number">1</span>])&#123;</span><br><span class="line">					count++;</span><br><span class="line">					<span class="keyword">int</span> temp = nums[j];</span><br><span class="line">					nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">					nums[j+<span class="number">1</span>] = temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(count);</span><br><span class="line">		System.out.println(sum);</span><br><span class="line">		<span class="keyword">return</span> nums;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="复杂的冒泡排序"><a href="#复杂的冒泡排序" class="headerlink" title="复杂的冒泡排序"></a>复杂的冒泡排序</h2><font color="red">这里我们采用了一个标记符来决定是否继续下次排序，标记符的作用是如果上次遍历没有发生排序，说明我们排序已经确定，所以我们不再继续排序，因为每次排序的数字，都是上次排序的一个子集，如果我们上次没有改变，那么之后也不需要进行排序，从而减少我们耗费的时间</font>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 一个复杂的冒泡排序</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 排序后的数组</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] toBubbleSort1(<span class="keyword">int</span>[] nums)&#123;</span><br><span class="line">		<span class="keyword">boolean</span> next = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span> &amp;&amp; next; i++)&#123;</span><br><span class="line">			next = <span class="keyword">false</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.length - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">				sum++;</span><br><span class="line">				<span class="keyword">if</span>(nums[j] &gt; nums[j+<span class="number">1</span>])&#123;</span><br><span class="line">					count++;</span><br><span class="line">					<span class="keyword">int</span> temp = nums[j];</span><br><span class="line">					nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">					nums[j+<span class="number">1</span>] = temp;</span><br><span class="line">					next = <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(count);</span><br><span class="line">		System.out.println(sum);</span><br><span class="line">		<span class="keyword">return</span> nums;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="测试数据集："><a href="#测试数据集：" class="headerlink" title="测试数据集："></a>测试数据集：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] b = &#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="结果记录："><a href="#结果记录：" class="headerlink" title="结果记录："></a>结果记录：</h2><p>0<br>6<br>1 2 3 4<br>3<br>5<br>1 2 3 4<br>3<br>5</p>
<h2 id="1-2-3-4"><a href="#1-2-3-4" class="headerlink" title="1 2 3 4"></a>1 2 3 4</h2><blockquote>
<p>通过结果发现，我们可以知道复杂的冒泡排序时间复杂度比简单的冒泡排序多加了个判断，极大程度的减少了我们排序的重复次数，对于算法的性能有很大的改进</p>
</blockquote>
<p>在最佳的情况下，冒泡排序只需要一次就可以确定数组已排好序，不需要进行下一次便利，由于第一次遍历的次数为n-1，因此在最佳情况下，冒泡<br>排序的时间为O(n)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
            <category> BubbleSort </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[减少HTML网页图片资源请求次数]]></title>
      <url>/2017/05/22/%E5%87%8F%E5%B0%91HTML%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E8%AF%B7%E6%B1%82%E6%AC%A1%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近学习前端，老师讲过一个问题，虽然<a href="http://www.qq.com" target="_blank" rel="noopener">QQ</a>网页很好看，但是加载时间过长，因为将每一张图片都分离开来，一张图片对应用户的一次请求，所以我们一般讲网站用的图标都集中到一张图上，然后通过移动图片位置和确定图片大小来锁定我们要的图片，会让我们网页的次数减少一个很大的层次，算是一个经验！！！</p>
</blockquote>
<h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><ol>
<li>这里放了两张图，其中第一张是网页所用到的图片，都集中到一张图片上了，第二张我们要实现的效果图片，不用专门对图片进行裁剪</li>
<li>这里我们只对图片请求了一次，不需要对图标分别请求，优化了网页</li>
</ol>
<h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><ol>
<li>需要手动定位到我们需要的图标，可能遇到图标对的不齐的问题<a id="more"></a>
<figure class="image-box">
                <img src="http://on3w7gc9m.bkt.clouddn.com/icon.gif" alt="所用图标大图" title class>
                <p>所用图标大图</p>
            </figure>
<figure class="image-box">
                <img src="http://on3w7gc9m.bkt.clouddn.com/%E8%B4%B5%E7%BE%8E%E5%95%86%E5%9F%8E%E5%A4%B4%E9%83%A8%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="实现的效果图" title class>
                <p>实现的效果图</p>
            </figure>
</li>
</ol>
<hr>
<p> 源代码（图片路径请注意修改）：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>header<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">      margin: 0px;</span></span><br><span class="line"><span class="undefined">      padding: 0px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #box1 &#123;</span></span><br><span class="line"><span class="undefined">      background-image: url(images\\h_bg.jpg);</span></span><br><span class="line"><span class="undefined">      background-repeat: no-repeat;</span></span><br><span class="line"><span class="undefined">      width: 1920px;</span></span><br><span class="line"><span class="undefined">      height: 150px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #data-nav &#123;</span></span><br><span class="line"><span class="undefined">      padding: 0px;</span></span><br><span class="line"><span class="undefined">      /*background-color: red;*/</span></span><br><span class="line"><span class="undefined">      width:735px;</span></span><br><span class="line"><span class="undefined">      height:30px;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      margin-top: 100px;</span></span><br><span class="line"><span class="undefined">      margin-left: 25px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    li&#123;</span></span><br><span class="line"><span class="undefined">      float: left;</span></span><br><span class="line"><span class="undefined">      list-style: none;</span></span><br><span class="line"><span class="undefined">      padding: 0px;</span></span><br><span class="line"><span class="undefined">      line-height: 30px;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    a &#123;</span></span><br><span class="line"><span class="undefined">      text-decoration: none;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #data-nav li &#123;</span></span><br><span class="line"><span class="undefined">      width: 83px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #data-nav li:hover&#123;</span></span><br><span class="line"><span class="undefined">      background-image: url(images\\nav_bg.gif);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #data-welcome&#123;</span></span><br><span class="line"><span class="undefined">      color:grey;</span></span><br><span class="line"><span class="undefined">      letter-spacing: 3px;</span></span><br><span class="line"><span class="undefined">      margin-left: 510px;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      margin-top: 70px;</span></span><br><span class="line"><span class="undefined">      font-size: 14px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #data-menu &#123;</span></span><br><span class="line"><span class="undefined">      /*background-color: red;*/</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      margin-top: 10px;</span></span><br><span class="line"><span class="undefined">      width: 460px;</span></span><br><span class="line"><span class="undefined">      height: 40px;</span></span><br><span class="line"><span class="undefined">      margin-left: 540px;</span></span><br><span class="line"><span class="undefined">      font-size: 15px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .bg&#123;</span></span><br><span class="line"><span class="undefined">      background-image: url(images\\icon.gif);</span></span><br><span class="line"><span class="undefined">      width: 30px;</span></span><br><span class="line"><span class="undefined">      height: 28px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .bg1 &#123;</span></span><br><span class="line"><span class="undefined">      background-position: -40px 0px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .bg2 &#123;</span></span><br><span class="line"><span class="undefined">      background-position: -82px 0px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .bg3 &#123;</span></span><br><span class="line"><span class="undefined">      background-position: -122px 0px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #data-menu .icon &#123;</span></span><br><span class="line"><span class="undefined">      width: 32px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"data-nav"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>家用电器<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>手机数码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>日用百货<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>书籍<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>帮助中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>免费开店<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>全球咨询<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"data-menu"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"bg icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"bg bg1 icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>帮助中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"bg bg2 icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>加入收藏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"bg bg3 icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>设为首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"data-welcome"</span>&gt;</span></span><br><span class="line">      你好，欢迎访问贵美商城！117年5月21日16点18分</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> HTML/CSS </category>
            
            <category> 优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Socket通信遇到的问题]]></title>
      <url>/2017/05/19/Socket%E9%80%9A%E4%BF%A1%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近在进行socket编程的时候，遇到一个问题，将代码粘在了下边，由于之前遇到过该问题，所以就记录下来，顺便总结一下解决思路</p>
</blockquote>
<h3 id="产生的异常如下"><a href="#产生的异常如下" class="headerlink" title="产生的异常如下"></a>产生的异常如下</h3><pre><code>Software caused connection abort: recv failed
java.net.SocketException: Software caused connection abort: recv failed
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
.......
</code></pre><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><p>Client类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTalkClient</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8080</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">          OutputStream out = socket.getOutputStream();</span><br><span class="line">          DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line">          Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">          dos.writeUTF(input.next());</span><br><span class="line">          InputStream in = socket.getInputStream();</span><br><span class="line">          DataInputStream dis = <span class="keyword">new</span> DataInputStream(in);</span><br><span class="line">          System.out.print(<span class="string">"Server:"</span>);</span><br><span class="line">          <span class="comment">/*关于这里为什么会抛出一个异常*/</span></span><br><span class="line">          System.out.println(dis.readUTF());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      System.out.println(<span class="string">"Error"</span>);</span><br><span class="line">      System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>Server类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTalkServer</span></span>&#123;</span><br><span class="line">  <span class="comment">/*自己写一个类似于talkserver talkclient的程序*/</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      ServerSocket socket = <span class="keyword">new</span> ServerSocket(<span class="number">8080</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">          Socket s = socket.accept();</span><br><span class="line">          InputStream in = s.getInputStream();</span><br><span class="line">          DataInputStream dis = <span class="keyword">new</span> DataInputStream(in);</span><br><span class="line">          System.out.println(<span class="string">"From:"</span> + s.getInetAddress() + <span class="string">"\\"</span> + s.getPort());</span><br><span class="line">          System.out.println(dis.readUTF());</span><br><span class="line">          OutputStream out = s.getOutputStream();</span><br><span class="line">          DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line">          Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">          dos.writeUTF(input.next());</span><br><span class="line">          dos.flush();</span><br><span class="line">          dos.close();</span><br><span class="line">          dis.close();</span><br><span class="line">          out.close();</span><br><span class="line">          in.close();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">"Error"</span>);</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="解决思路："><a href="#解决思路：" class="headerlink" title="解决思路："></a>解决思路：</h3><blockquote>
<ol>
<li>客户端和服务端建立tcp的短连接,每次客户端发送一次请求, 服务端响应后关闭与客户端的连接. 如果客户端在服务端关闭连接后,没有释放连接,继续试图发送请求和接收响应. 这个时候就会出错.</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>这个时候客户端Socket的getOutputStream返回来的OutPutStream维护 的是本地的连接状态, 无法知道远程的服务端已经关闭了对应的InputStream和socket因此 虽然调用了 out.write(sendbuf, 0, sendbuf.length); 方法,但是实际上服务端并没有接收到客户端的请求信息. 因为没有抛出异常,因此造成了误以为客户端请求发送成功的假象.</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li>接下来调用etInputStream的in.read(header, 0, 14);方法. 因为这次要读取服务端的信息,因此产生了 Software caused connection abort: recv failed的异常</li>
</ol>
</blockquote>
<ol>
<li>在服务端/客户端单方面关闭连接的情况下,另一方依然以为 tcp连接仍然建立,试图读取对方的响应数据,导致出现 Software caused connection abort: recv failed的异常.因此在receive数据之前,要先判断连接状态. 通过inputstream的available()方法来判断,是否有响应结果.</li>
<li>如果available()的返回值为0,说明没有响应数据,可能是对方已经断开连接, 如果available()的返回值大于0,说明有响应数据. 另外值得注意的是available()返回的值是非堵塞的,可以被多个线程访问.在对方释放连接后,也要释放本地的连接.</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> socket </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> net </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈MySQL中的正则表达式]]></title>
      <url>/2017/05/14/%E6%B5%85%E8%B0%88MySQL%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>记得之前自己不熟悉正则表达式的时候，别人问到这个问题，自己一脸懵逼，现在尽管自己对正则表达式有所了解，但还是不够游刃有余，其实自己最感慨<br>正则表达式的强大之处，可能一个正则表达式可以解决我们一个很复杂的问题，例如如何匹配一个身份证号码，如果没有正则表达式，我们可能很难对数据进行有效的过滤。</p>
</blockquote>
<h1 id="MySQL中的正则表达式"><a href="#MySQL中的正则表达式" class="headerlink" title="MySQL中的正则表达式"></a>MySQL中的正则表达式</h1><blockquote>
<p>MySQL中的正则表达式仅支持多数正则表达式实现的一个很小的子集</p>
</blockquote>
<h2 id="LIKE-与-REGEXP-的区别"><a href="#LIKE-与-REGEXP-的区别" class="headerlink" title="LIKE 与 REGEXP 的区别"></a>LIKE 与 REGEXP 的区别</h2><p>下面这段SQL代码将匹配 prod_name 为 1000 的记录<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'1000'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure></p>
<p>下面这段SQL代码将匹配 prod_name 中 含有 1000 的记录<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'1000'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>LIKE 匹配整个列，如果被匹配的文本在列值中出现(而不是列值)，LIKE子句将不会找到</li>
<li>REGEXP 则在列值内进行匹配，如果被匹配的文本在列值中出现，REGEXP将会找到<a id="more"></a>
<blockquote>
<p>MySQL中的正则表达式自版本（3.23.4后）不区分大小写，如果要去区分大小写，可以使用 BINARY 关键字</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> userinfo.U, userinfo.P</span><br><span class="line"><span class="keyword">FROM</span> userinfo</span><br><span class="line"><span class="keyword">WHERE</span> userinfo.U REGEXP <span class="built_in">BINARY</span> <span class="string">'a1'</span>;			</span><br><span class="line"><span class="comment">-- 正则表达式 会超照 字段U 中包含 a1 的值，这里加了个BINARY 只会找到包含 a1的，不会找到包含A1的</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<hr>
<h2 id="匹配给定字符的一个"><a href="#匹配给定字符的一个" class="headerlink" title="匹配给定字符的一个"></a>匹配给定字符的一个</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'1000|2000'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>
<p>上面这段代码将会匹配 prod_name 中 包含1000 或 2000 的记录</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'1|2|3 Ton'</span>			</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>
<p>上面一段SQL代码意思是找到1 或 2 或 3 Ton的，而不是 1 TON 或 2 Ton 或 3 Ton的</p>
<font color="red">注意 ： 除非把 | 括在一个集合中，否则它将应用于整个串</font>


<hr>
<h2 id="匹配MySQL中的特殊字符"><a href="#匹配MySQL中的特殊字符" class="headerlink" title="匹配MySQL中的特殊字符"></a>匹配MySQL中的特殊字符</h2><blockquote>
<p>如果我们需要对MySQL中的特殊字符使用正则表达式，我们需要格外注意</p>
</blockquote>
<p>例如：采用如下代码匹配 prod_name 中包含 . 号的<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'.'</span>							</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure></p>
<p>其实是错误的，上面这段代码其实是列出表中的所有记录，而并不是我们想要的 包含 . 号的记录，因为 . 号在正则表达式中代表任意字符，所以会列出表中所有记录</p>
<blockquote>
<p>对于MySQL中的特殊符号，如果我们要采用正则表达式去匹配，需要在特殊符号前面加上 \</p>
</blockquote>
<p>下面的代码就是匹配 prod_name 中包含 . 号的<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'\\.'</span>							</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意 ：</p>
<ol>
<li>为了匹配特殊字符，必须用 \ 为前导， \- 表示查找 -  </li>
<li>为了匹配 \ 本身，需要使用 \\</li>
<li><font color="red">对于其他语言的正则表达式，如果需要转义特殊字符，我们可能会使用 单个 \ ，但是MySQL要求我们使用两个 \ （MySQL自己解释一个，正则表达式库解释另一个）</font>
</li>
</ol>
</blockquote>
<hr>
<h2 id="匹配MySQL中的字符类"><a href="#匹配MySQL中的字符类" class="headerlink" title="匹配MySQL中的字符类"></a>匹配MySQL中的字符类</h2><table>
<thead>
<tr>
<th style="text-align:left">类</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">[:alnum:]</td>
<td style="text-align:left">任意字母和数字（同[a-zA-Z0-9]）</td>
</tr>
<tr>
<td style="text-align:left">[:alpha:]</td>
<td style="text-align:left">任意字符(同[a-zA-Z])</td>
</tr>
<tr>
<td style="text-align:left">[:blank:]</td>
<td style="text-align:left">空格和制表(同[\t])</td>
</tr>
<tr>
<td style="text-align:left">[:cntrl:]</td>
<td style="text-align:left">ASCII控制字符(ASCII 0到31和127)</td>
</tr>
<tr>
<td style="text-align:left">[:digit:]</td>
<td style="text-align:left">任意数字(同[0-9])</td>
</tr>
<tr>
<td style="text-align:left">[:graph:]</td>
<td style="text-align:left">与[:print:]相同，但不包含空格</td>
</tr>
<tr>
<td style="text-align:left">[:lower:]</td>
<td style="text-align:left">任意小写字母(同[a-z])</td>
</tr>
<tr>
<td style="text-align:left">[:print:]</td>
<td style="text-align:left">任意可打印字符</td>
</tr>
<tr>
<td style="text-align:left">[:punct:]</td>
<td style="text-align:left">既不在[:alnum:]又不在[:cntrl:]中的任意字符</td>
</tr>
<tr>
<td style="text-align:left">[:space:]</td>
<td style="text-align:left">包含空格在内的任意空白字符(同[\f\n\r\t\v])</td>
</tr>
<tr>
<td style="text-align:left">[:upper:]</td>
<td style="text-align:left">任意大写字母(同[A-Z])</td>
</tr>
<tr>
<td style="text-align:left">[:xdigit:]</td>
<td style="text-align:left">任意十六进制数字(同[a-fA-F0-9])</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'[[:digit:]\\.]'</span>    <span class="comment">-- 或者写成 ^[0-9\\.]</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>
<p>找出prod_name 中 数字（包括小数点） 开始的所有产品</p>
<hr>
<h2 id="匹配多个实例"><a href="#匹配多个实例" class="headerlink" title="匹配多个实例"></a>匹配多个实例</h2><table>
<thead>
<tr>
<th style="text-align:left">元字符</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">0个或多个匹配</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">1个或多个匹配</td>
</tr>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">0个或1个匹配</td>
</tr>
<tr>
<td style="text-align:left">{n}</td>
<td style="text-align:left">指定数目的匹配</td>
</tr>
<tr>
<td style="text-align:left">{n,}</td>
<td style="text-align:left">不少于指定数目的匹配</td>
</tr>
<tr>
<td style="text-align:left">{n,m}</td>
<td style="text-align:left">匹配数目的范围</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'\\([0-9] sticks?\\)'</span>		</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br><span class="line"><span class="comment">-- 用来匹配文本 ([0-9] stick(这里sticks也可以，因为是s?,表示s出现0次或1次))</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><table>
<thead>
<tr>
<th style="text-align:left">元字符</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">文本的开始</td>
</tr>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">文本的结尾</td>
</tr>
<tr>
<td style="text-align:left">[[:&lt;:]]</td>
<td style="text-align:left">词的开始</td>
</tr>
<tr>
<td style="text-align:left">[[:&gt;:]]</td>
<td style="text-align:left">文本的结尾</td>
</tr>
</tbody>
</table>
<blockquote>
<p>^ 有双重用途：可以用来匹配文本开始，也可以放在集合中，例如[^123]，表示不匹配含有 1或2或3的</p>
</blockquote>
<p>对于MySQL 我们可以在不使用数据库表的情况下用SELECT 来测试正则表达式，REGEXP 检查总是返回 0(没找到匹配)或1(找到匹配)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'hello'</span> REGEXP <span class="string">'[0-9]'</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
            <category> 正则表达式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL </tag>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈SQL中的数据过滤]]></title>
      <url>/2017/05/12/%E6%B5%85%E8%B0%88SQL%E4%B8%AD%E7%9A%84Where%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<h1 id="SQL中的WHERE子句"><a href="#SQL中的WHERE子句" class="headerlink" title="SQL中的WHERE子句"></a>SQL中的WHERE子句</h1><blockquote>
<p>对于数据库中的表，我们经常使用SQL语句进行操作，对于数据量爆炸的今天，倘若需要对用户数据进行验证，如果不加过滤，去索引表中的所有行，<br>无疑拉低了用户的体验！如今，我们经常使用WHERE子句对数据进行过滤，以便得到我们所需要的数据</p>
</blockquote>
<h2 id="不采用过滤的缺点"><a href="#不采用过滤的缺点" class="headerlink" title="不采用过滤的缺点"></a>不采用过滤的缺点</h2><ol>
<li>倘若我们不使用WHERE子句对数据进行过滤，将会检索大量无用的数据，并且增加服务器的负载</li>
<li>我们通常可以从服务器端获得我们所需要的数据，如果将全部数据(未过滤)传给用户，并让用户进行过滤，不仅仅大大的增加了网络的带宽，还给用户<br>的体验带来了极大的不方便之处</li>
</ol>
<h3 id="值得自己思考的问题："><a href="#值得自己思考的问题：" class="headerlink" title="值得自己思考的问题："></a>值得自己思考的问题：</h3><ol>
<li>如果数据在用户层过滤，增加了用户的不方便和网络带宽</li>
<li>如果数据在服务器上进行过滤，面对的用户很多，数据量又很大，服务器如果全部处理数据，难免会崩掉！！！<br>综上所述，在用户层和服务器层过滤数据各有好坏，那么现在的数据过滤如何解决，值得自己探索和深思！！！</li>
</ol>
<a id="more"></a>
<hr>
<h1 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h1><h2 id="BETWEEN-AND-子句"><a href="#BETWEEN-AND-子句" class="headerlink" title="BETWEEN AND 子句"></a>BETWEEN AND 子句</h2><blockquote>
<p>开始学习使用 BETWEEN AND 关键字：如果在BETWEEN AND 关键字中使用字符串，我们需要注意，<br>BETWEEN “A1” AND “b1” 意思是，从 A1(对于那些前面为A1(报错A1本身)后面有其他的将会被选择到，例如A11) 开始<br>匹配到 b1(对于那些前面为b1的不会被选择到(不包括b1))</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> USER.id, USER.U, USER.P</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">USER</span></span><br><span class="line"><span class="keyword">WHERE</span> USER.U <span class="keyword">BETWEEN</span> <span class="string">"A1"</span> <span class="keyword">AND</span> <span class="string">"b1"</span>;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="IN操作符"><a href="#IN操作符" class="headerlink" title="IN操作符"></a>IN操作符</h2><blockquote>
<p>其实SQL语句中对数据进行过滤除了可以使用已有的AND,OR运算符，其实IN操作符可以替换OR操作符</p>
</blockquote>
<p>IN操作符用来指定条件范围，范围中的每个条件都可以进行匹配，IN取合法值由逗号分隔的清单，全都括在圆括号中</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> USER.id, USER.U, USER.P</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">USER</span></span><br><span class="line"><span class="keyword">WHERE</span> USER.id  <span class="keyword">IN</span> (<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<p>上面这句SQL语句等同于下面这句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> USER.id, USER.U, USER.P</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">USER</span></span><br><span class="line"><span class="keyword">WHERE</span> USER.id  = <span class="number">5</span> <span class="keyword">or</span> USER.id  = <span class="number">6</span> <span class="keyword">or</span> USER.id  = <span class="number">7</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="使用IN操作符的好处"><a href="#使用IN操作符的好处" class="headerlink" title="使用IN操作符的好处"></a>使用IN操作符的好处</h3><ol>
<li>在使用长的合法选项清单时， IN操作符的语法更清楚且更直观</li>
<li>在使用IN时，计算的次序更容易管理（因为使用的操作符更少）</li>
<li><font color="red">IN操作符一般比OR操作符执行更快</font></li>
<li>IN的最大有点是可以包含SELECT语句，使得能够更动态的创立WHERE子句！</li>
</ol>
<hr>
<h2 id="采用-NOT-操作符"><a href="#采用-NOT-操作符" class="headerlink" title="采用 NOT 操作符"></a>采用 NOT 操作符</h2><blockquote>
<p>WHERE子句中的NOT操作符有且只有一个功能，那就是否定它之后所有跟的任何条件</p>
</blockquote>
<ul>
<li>MySQL中的NOT：MySQL支持使用NOT对IN,BETWEEN 和 EXISTS子句取反</li>
<li>在与IN操作符联合使用的时候，NOT使找出与条件列表不匹配的行非常简单</li>
</ul>
<hr>
<h2 id="采用-LIKE-操作符"><a href="#采用-LIKE-操作符" class="headerlink" title="采用 LIKE 操作符"></a>采用 LIKE 操作符</h2><ol>
<li>% 操作符（任何字符出现任意次数），如果写成 ‘%HET’, 是会区分大小写的，要注意的是 % 也可以匹配0个字符</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> userinfo.U, userinfo.P</span><br><span class="line"><span class="keyword">FROM</span> userinfo</span><br><span class="line"><span class="keyword">WHERE</span> userinfo.U <span class="keyword">LIKE</span> <span class="string">'%A1%'</span>;		 <span class="comment">-- 也会找到字段U值为A1的</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> userinfo.U, userinfo.P</span><br><span class="line"><span class="keyword">FROM</span> userinfo</span><br><span class="line"><span class="keyword">WHERE</span> userinfo.P <span class="keyword">LIKE</span> <span class="string">'%'</span>				<span class="comment">-- 这里将不会匹配 USERINFO.P 值为null的，尽管使用了通配符</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>_ 操作符  只能匹配一个字符</li>
</ol>
<h3 id="通配符的使用技巧："><a href="#通配符的使用技巧：" class="headerlink" title="通配符的使用技巧："></a>通配符的使用技巧：</h3><ol>
<li>不要过度使用通配符，如果其他操作符能达到相同的目的，应该使用其他操作符</li>
<li>在确实需要使用通配符时，除非绝对有必要，否则不要把他们用在搜索模式的开始处，把通配符至于搜索模式的开始处，搜索起来是最慢的</li>
<li>注意通配符的位置，如果放错地方，可能不会返回想要的数据</li>
</ol>
<hr>
<h2 id="采用-DISTINCT-子句"><a href="#采用-DISTINCT-子句" class="headerlink" title="采用 DISTINCT 子句"></a>采用 DISTINCT 子句</h2><blockquote>
<p>对于重复的数据，如果我们想返回唯一不同的值，可以使用DISTINCT关键字来进行检索</p>
</blockquote>
<h3 id="注意事项-不能部分使用-DISTINCT-关键字-："><a href="#注意事项-不能部分使用-DISTINCT-关键字-：" class="headerlink" title="注意事项(不能部分使用 DISTINCT 关键字)："></a>注意事项(不能部分使用 DISTINCT 关键字)：</h3><p>使用DISTINCT关键字必须放在列名开头，请注意DISTINCT关键字应用于所有列，而不仅是前置它的列，下面这句代码的意思是:对于要检索的字段，除非每行所对应记录的字段都相同，否则都会被检索出来，也就是如果要检索的字段（两行完全相同，将只有一行输出，如果部分相同将全部输出）<br>– 不能部分使用DISTINCT关键字</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">DISTINCT</span>   U,  P</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">USER</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="空值检查"><a href="#空值检查" class="headerlink" title="空值检查"></a>空值检查</h2><blockquote>
<p>创建表的时候，我们将会指定其中的列是否可以包含值，如果一个列不包含值，称其为包含空值NULL</p>
</blockquote>
<p>NULL : 无值，它与字段包含0，空字符串或仅仅包含空格不同</p>
<p>检索USER 表的 P字段是否为空<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> USER.id, USER.U, USER.P</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">USER</span></span><br><span class="line"><span class="keyword">WHERE</span> USER.P <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="NULL与不匹配"><a href="#NULL与不匹配" class="headerlink" title="NULL与不匹配"></a>NULL与不匹配</h3><blockquote>
<p>在我们通过过滤选择出不具有特定值的行的时候，我们可能希望返回具有NULL值的行，但是，不行，因为未知具有特殊的含义，数据库不知道他们是否匹配，所以在匹配过滤或不不匹配过滤的时候将不会返回</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> USER.ID, USER.U, USER.P</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">USER</span></span><br><span class="line"><span class="keyword">WHERE</span> USER.P != <span class="string">'5'</span>  <span class="comment"># 这里将不会返回P字段为NULL值的行</span></span><br></pre></td></tr></table></figure>
<p><font color="red">过滤数据的时候，我们一定要验证返回数据中确实给出了被过滤列具有NULL的行</font>，将SQL语句改为如下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> USER.ID, USER.U, USER.P</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">USER</span></span><br><span class="line"><span class="keyword">WHERE</span> USER.P != <span class="string">'5'</span> <span class="keyword">OR</span> USER.P <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="comment"># 这里将会返回P字段为NULL值的行</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
            <category> 策略 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[与pydoc的初次邂逅]]></title>
      <url>/2017/05/11/%E4%B8%8Epydoc%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%85/</url>
      <content type="html"><![CDATA[<blockquote>
<p>对于初学者而言，学习一门新的编程语言，最渴求的便是遇到问题时，希望能有个帮助文档来指点迷津，pydoc就是这样一个例子，不仅仅可以帮助我们获得所需的信息，还进一步根据用户体验来在浏览器呈现帮助文档</p>
</blockquote>
<blockquote>
<p>pydoc是Python自带的模块，主要用于从python模块中自动生成文档，这些文档可以基于文本呈现的、也可以生成WEB 页面的，还可以在服务器上以浏览器的方式呈现！</p>
</blockquote>
<h2 id="学习查看python中的帮助信息"><a href="#学习查看python中的帮助信息" class="headerlink" title="学习查看python中的帮助信息"></a>学习查看python中的帮助信息</h2><blockquote>
<p>对于Python而言，倘若我们学会查看帮助信息，便是学会了如何运用Python，接下来我们只需将Python运用自如即可</p>
</blockquote>
<h3 id="使用Python自带的Idle来查看帮助信息"><a href="#使用Python自带的Idle来查看帮助信息" class="headerlink" title="使用Python自带的Idle来查看帮助信息"></a>使用Python自带的Idle来查看帮助信息</h3><blockquote>
<p>使用Idle查看帮助信息，我们将会采用help()函数来查看，</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看python所有的modules</span></span><br><span class="line">help(<span class="string">"modules"</span>)         </span><br><span class="line"></span><br><span class="line"><span class="comment">#单看python所有的modules中包含指定字符串的modules</span></span><br><span class="line">help(<span class="string">"modules yourstr"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看python中常见的topics</span></span><br><span class="line">help(<span class="string">"topics"</span>)          </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看python标准库中的module</span></span><br><span class="line"><span class="keyword">import</span> os.path + help(<span class="string">"os.path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看python内置的类型</span></span><br><span class="line">help(<span class="string">"list"</span>)         </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看python类型的成员方法</span></span><br><span class="line">help(<span class="string">"str.find"</span>)    </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看python内置函数</span></span><br><span class="line">help(<span class="string">"open"</span>)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="image-box">
                <img src="http://on3w7gc9m.bkt.clouddn.com/%E4%B8%8Epython%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%851.png" alt="Idle查看帮助信息" title class>
                <p>Idle查看帮助信息</p>
            </figure>
<hr>
<h3 id="使用Windows命令行界面来查看帮助信息"><a href="#使用Windows命令行界面来查看帮助信息" class="headerlink" title="使用Windows命令行界面来查看帮助信息"></a>使用Windows命令行界面来查看帮助信息</h3><p>打开cmd，键入 <code> python -m pydoc <modulename>  </modulename></code> ,请将命令中的<modulename> 替换成你需要查找的信息，例如， 将 <modulename>  替换成 print  ，将会显示出print函数的详细信息</modulename></modulename></p>
<p><img src="http://on3w7gc9m.bkt.clouddn.com/%E4%B8%8Epython%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%852.png" alt="CMD下查看帮助信息"></p>
<hr>
<h3 id="使用浏览器来查看Python帮助信息"><a href="#使用浏览器来查看Python帮助信息" class="headerlink" title="使用浏览器来查看Python帮助信息"></a>使用浏览器来查看Python帮助信息</h3><blockquote>
<p>Python 可以通过浏览器来查看 Python的帮助信息，不需要连网，这是我最喜爱的一种方式，不仅提升了用户体验，还更方便</p>
</blockquote>
<ol>
<li>打开cmd，键入 <code> python -m pydoc -b </code></li>
<li>命令完成后，回车，等待浏览器自动打开</li>
<li>在输入框中键入所要查询的内容即可查询</li>
<li>如果想要关闭服务器，请输入 q 即可</li>
</ol>
<figure class="image-box">
                <img src="http://on3w7gc9m.bkt.clouddn.com/%E4%B8%8Epython%E7%9A%84%E5%88%9D%E6%AC%A1%E9%82%82%E9%80%853.png" alt="浏览器下查看帮助信息" title class>
                <p>浏览器下查看帮助信息</p>
            </figure>
<hr>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> pydoc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> pydoc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[认识Python中的转义字符]]></title>
      <url>/2017/05/10/%E8%AE%A4%E8%AF%86Python%E4%B8%AD%E7%9A%84%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<p><table align="center"><caption>Python中的常用转义符</caption><tr><td>转义符</td><td>作用</td><td>含义</td></tr><tbody><tr><td>\</td><td>Backslash()</td><td>反斜杠</td></tr><tr><td>\’</td><td>Single quote(‘)</td><td>单引号</td></tr><tr><td>\”</td><td>Double-quote(“)</td><td>双引号</td></tr><tr><td>\a</td><td>ASCII bell(BEL)</td><td>响铃符</td></tr><tr><td>\b</td><td>ASCII backspace (BS)</td><td>退格符</td></tr><tr><td>\f</td><td>ASCII formfeed(FF)</td><td>进纸符</td></tr><tr><td>\n</td><td>ASCII linefeed (LF)</td><td>换行符</td></tr><tr><td>\N{name}</td><td>Character named name in the Unicode database (Unicode only)</td><td>Unicode数据库中的字符名；name就是它的名字</td></tr><tr><td>\r ASCII </td><td>Carriage Return (CR)</td><td>回车符</td></tr><tr><td>\t ASCII</td><td>Horizontal Tab (TAB)</td><td>水平制表符</td></tr><tr><td>\uxxxx</td><td>Character with 16-bit hex value xxxx (Unicode only)</td><td>值为16位十六进制xxxx的字符</td></tr><tr><td>\Uxxxxxxxx</td><td>Character with 32-bit hex value xxxxxxxx (Unicode only)</td><td>值为32位十六进制xxxx的字符</td></tr><tr><td>\v</td><td>ASCII vertical tab (VT)</td><td>垂直制表符</td></tr><tr><td>\ooo</td><td>Character with octal value ooo</td><td>值为八进制ooo的字符</td></tr><tr><td>\xhh</td><td>Character with hex value hh</td><td>值为十六进制数hh的字符</td></tr></tbody></table><br><a id="more"></a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 语法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈Java中的文件和编码]]></title>
      <url>/2017/05/09/%E6%B5%85%E8%B0%88Java%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>前言：许多编程语言文件操作都极其类似，Java也不尽相同，文件操作，只能获取文件（目录）的信息（名称，大小等），却不能用于文件的访问</p>
</blockquote>
<h1 id="File类讲解"><a href="#File类讲解" class="headerlink" title="File类讲解"></a>File类讲解</h1><h2 id="如何创建指定文件"><a href="#如何创建指定文件" class="headerlink" title="如何创建指定文件"></a>如何创建指定文件</h2><blockquote>
<p>我们可以使用提供的createNewFile()方法来创建给定文件名的文件，但是如果我们写文件名的时候没有写上后缀，那么创建的文件也是没有后缀的</p>
</blockquote>
<p>假使我们创建一个 我爱学习.txt在E盘符下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateFile</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		File file = <span class="keyword">new</span> File(<span class="string">"E:\\我爱学习.txt"</span>);</span><br><span class="line">    <span class="comment">/*下面这行代码也可以创建指定文件*/</span></span><br><span class="line">  <span class="comment">/*  File file = new File("E:","我爱学习.txt");  */</span></span><br><span class="line">		<span class="comment">/*首先判断文件是否存在*/</span></span><br><span class="line">		<span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				file.createNewFile();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h2 id="File类中的mkdir-与-mkdirs的区别"><a href="#File类中的mkdir-与-mkdirs的区别" class="headerlink" title="File类中的mkdir 与 mkdirs的区别"></a>File类中的mkdir 与 mkdirs的区别</h2><ol>
<li>mkdir 只能创建一个已有目录的直接子目录</li>
<li>mkdirs 可以创建多个目录（也就是说，倘若创建目录的时候，上一级目录不存在，上一级目录也会创建）</li>
</ol>
<h3 id="使用mkdir-创建一个目录"><a href="#使用mkdir-创建一个目录" class="headerlink" title="使用mkdir()创建一个目录"></a>使用mkdir()创建一个目录</h3><blockquote>
<p>如果这里《我爱学习》目录不存在，那么就不会创建《学习也爱我》的目录</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		File file = <span class="keyword">new</span> File(<span class="string">"E:\\我爱学习\\学习也爱我"</span>);</span><br><span class="line">		<span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">			System.out.println(file.mkdir());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用mkdirs-创建一个目录"><a href="#使用mkdirs-创建一个目录" class="headerlink" title="使用mkdirs()创建一个目录"></a>使用mkdirs()创建一个目录</h3><blockquote>
<p>如果这里《我爱学习》目录不存在，那么先会自动创建《我爱学习》的目录，然后自动创建《学习也爱我》的目录<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		File file = <span class="keyword">new</span> File(<span class="string">"E:\\我爱学习\\学习也爱我"</span>);</span><br><span class="line">		<span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">			System.out.println(file.mkdir());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h2 id="文件目录的遍历"><a href="#文件目录的遍历" class="headerlink" title="文件目录的遍历"></a>文件目录的遍历</h2><blockquote>
<p>这里采用递归遍历文件和目录</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		File file = <span class="keyword">new</span> File(<span class="string">"E:\\navicat"</span>);</span><br><span class="line">		printYourFile(file);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printYourFile</span><span class="params">(File file)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		File[] files = file.listFiles();</span><br><span class="line">		<span class="keyword">for</span> (File file2 : files) &#123;</span><br><span class="line">			<span class="keyword">if</span>(file2.isFile())&#123;</span><br><span class="line">				System.out.println(file2.getAbsolutePath());</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				System.out.println(file2.getAbsolutePath());</span><br><span class="line">				printYourFile(file2);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="文件编码的问题"><a href="#文件编码的问题" class="headerlink" title="文件编码的问题"></a>文件编码的问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodeDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;    </span><br><span class="line"></span><br><span class="line">    String s = <span class="string">"简书ABC"</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] bt1 = s.getBytes();</span><br><span class="line">    <span class="comment">//此处将字符串转换成字节序列用的是项目默认编码gbk</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">byte</span> b: bt1)&#123;</span><br><span class="line">    <span class="comment">//把字节转换成了int，以16进制显示</span></span><br><span class="line">        System.out.print(Integer.toHexString(b&amp;<span class="number">0xff</span>)+<span class="string">"  "</span>);</span><br><span class="line">    <span class="comment">//（bc  f2）简（ca  e9）书（41）A（42）B（43）C</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">//gbk编码，中文占用2个字节，英文占用1个字节。</span></span><br><span class="line">    <span class="keyword">byte</span>[] bt2 = s.getBytes(<span class="string">"gbk"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">byte</span> b: bt2)&#123;</span><br><span class="line">        System.out.print(Integer.toHexString(b&amp;<span class="number">0xff</span>)+<span class="string">"  "</span>);</span><br><span class="line">    <span class="comment">//（bc  f2）简（ca  e9）书（41）A（42）B（43）C</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">//utf-8编码，中文占用3个字节，英文占用1个字节。</span></span><br><span class="line">    <span class="keyword">byte</span>[] bt3 = s.getBytes(<span class="string">"utf-8"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">byte</span> b: bt3)&#123;</span><br><span class="line">        System.out.print(Integer.toHexString(b&amp;<span class="number">0xff</span>)+<span class="string">"  "</span>);</span><br><span class="line">    <span class="comment">//（e7  ae  80）简（e4  b9  a6）书（41）A（42）B（43）C        </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">//java采用双字节编码，即utf-16be编码</span></span><br><span class="line">    <span class="keyword">byte</span>[] bt4 = s.getBytes(<span class="string">"utf-16be"</span>);</span><br><span class="line">    <span class="comment">//utf-16be编码，中文占用2个字节，英文占用2个字节。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">byte</span> b: bt4)&#123;</span><br><span class="line">        System.out.print(Integer.toHexString(b&amp;<span class="number">0xff</span>)+<span class="string">"  "</span>);</span><br><span class="line">    <span class="comment">//（7b  80）简（4e  66）书（0  41）A（0  42）B（0  43）C</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    当字节序列使用某种编码时</span></span><br><span class="line"><span class="comment">    此时想把字节序列转变为字符串</span></span><br><span class="line"><span class="comment">    也需要使用这种编码形式</span></span><br><span class="line"><span class="comment">    否则会出现乱码。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    String str1 = <span class="keyword">new</span> String(bt4);<span class="comment">//此时为项目默认编码gbk</span></span><br><span class="line">    System.out.println(str1);<span class="comment">//&#123;?Nf A B C</span></span><br><span class="line"></span><br><span class="line">    String str2 = <span class="keyword">new</span> String(bt4,<span class="string">"utf-16be"</span>);</span><br><span class="line">    System.out.println(str2);<span class="comment">//简书ABC</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> File </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> File </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[认识线程]]></title>
      <url>/2017/05/08/%E8%AE%A4%E8%AF%86%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>早期的操作系统，建立在了所谓的cpu，存储器，IO设备之上，但是最为宝贵的便是cpu，计算机发展至今，硬盘已经从几M发展到现在的几TB，cpu仍在不紧不慢发展，作为计算机的大脑，cpu可谓肩负重任，早期的操作系统，由于系统的缺陷，cpu只能运行单道作业，如果要等待IO，便会一直等下去，直到我们使用完IO之后，才会响应，这便是所谓的单道作业的缺陷！</p>
</blockquote>
<p>  随着操作系统发展，我们将cpu分的越来越详细，从最初的一个程序–&gt;作业–&gt;进程–&gt;线程，个人认为是由于cpu的发展跟不上我们的需求，才会促使我们将cpu更为紧细的利用，直到现在的多核多线程，我们便开始专心研究多线程，以提高任务效率，而不是促使我们的应用程序崩溃！</p>
<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><blockquote>
<p>线程来源于一个进程，但是由于进程切换开销大，为了提高cpu的利用率，所以我们便将单个进程分为多个线程，多个线程可以并发或者并行运行，各线程在运行过程中会因为访问共享数据及等待数据而发生互斥与同步的关系<br>多线程可以使程序反应更快，交互性更强，执行效率更高</p>
</blockquote>
<h2 id="创建一个线程"><a href="#创建一个线程" class="headerlink" title="创建一个线程"></a>创建一个线程</h2><blockquote>
<p>Java中的程序，我们通常从main方法开始执行，jvm便会给main创建一个线程，从上到下开始执行main方法<br>当Java程序作为applet开始运行的时候，web浏览器便会启动一个线程来运行applet</p>
</blockquote>
<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><blockquote>
<p>通常我们采用该方法来实现多线程</p>
</blockquote>
<ol>
<li>实现Runnable接口以及相应的run方法</li>
<li>创建一个Thread，并分配任务给Thread</li>
<li>调用Thread实例的start方法开启线程（<font color="red">不可以调用run方法，如果调用，只是在当前线程执行run方法，并不会产生多线程</font>）</li>
</ol>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Test test = <span class="keyword">new</span> Test();</span><br><span class="line">  Thread thread = <span class="keyword">new</span> Thread(test);</span><br><span class="line">  thread.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*这里的run方法指明如何完成这个任务，如果使用新线程来执行，Java虚拟机会自动调用该方法*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    String date1 = sdf.format(date);</span><br><span class="line">    System.out.println(date1);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="继承Thread"><a href="#继承Thread" class="headerlink" title="继承Thread"></a>继承Thread</h3><blockquote>
<p>由于JAVA是单继承，我们经常不使用该方法来实现多线程，并且继承Thread，会让我们将<font color="red">任务和运行任务的机制混在了一起</font></p>
</blockquote>
<ol>
<li>继承Thread</li>
<li>重写run方法</li>
<li>使用当前类的实例调用start方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Test test = <span class="keyword">new</span> Test();</span><br><span class="line">  test.start();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">"A"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="错误的使用sleep方法"><a href="#错误的使用sleep方法" class="headerlink" title="错误的使用sleep方法"></a>错误的使用sleep方法</h2><blockquote>
<p>sleep()方法将会让调用该方法的线程进入休眠状态，因此如果我们错误的使用该方法，将会影响程序的健壮性！！！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Third</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">    System.out.println(<span class="string">"A"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">/*当一个休眠线程的interrupte()被调用，就会产生这样一个异常*/</span></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用这种方法来抛出异常是错误的</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">      Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用这种方法来抛出异常是正确的</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">while</span>( <span class="keyword">true</span> )&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>由于使用stop()，以及suspend()，resume()，存在不安全因素，现在的JDK并不提倡使用这些方法，为了替代stop()方法，我们可以通过给Thread变量赋值null来终止当前线程</p>
</blockquote>
<hr>
<h2 id="使用yield-方法为其他线程让出cpu时间"><a href="#使用yield-方法为其他线程让出cpu时间" class="headerlink" title="使用yield()方法为其他线程让出cpu时间"></a>使用yield()方法为其他线程让出cpu时间</h2><blockquote>
<p>yield()方法可以为其他线程临时让出cpu时间，对于可能出现死锁的程序，我们可以使用该方法来避免</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Test2 test = <span class="keyword">new</span> Test2();</span><br><span class="line">  Thread thread = <span class="keyword">new</span> Thread(test);</span><br><span class="line">  thread.start();</span><br><span class="line"></span><br><span class="line">  Test2 test1 = <span class="keyword">new</span> Test2();</span><br><span class="line">  Thread thread1 = <span class="keyword">new</span> Thread(test1);</span><br><span class="line">  thread1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*设置thread1线程的优先级最高，因为JVM总是从优先级最高的线程开始执行 */</span></span><br><span class="line">  thread1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    <span class="comment">/*输出当前执行的线程的ID*/</span></span><br><span class="line">    System.out.println(Thread.currentThread().getId());</span><br><span class="line">    <span class="comment">/*为其他线程临时让出CPU时间*/</span></span><br><span class="line">    Thread.yield();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><blockquote>
<p>众所周知，cpu在线程中采用时间片轮转算法，JVM也是如此，将会执行优先级最高的线程，较低的优先级会使得当前线程再有在没有比它优先级更高的线程的时候才会执行，如果优先级相同，系统会将线程排到一个循环队列中等待，然后进行cpu调度，一个一个开始执行</p>
</blockquote>
<h4 id="资源竞争（缺乏状态）"><a href="#资源竞争（缺乏状态）" class="headerlink" title="资源竞争（缺乏状态）"></a>资源竞争（缺乏状态）</h4><blockquote>
<p>如果总有一个优先级较高的线程在运行，或者有一个相同优先级的程序不愿意退出，那么这个线程可能永远也没有运行的机会，称为资源竞争</p>
</blockquote>
<h5 id="避免方法（给低优先级或者相同优先级的线程一个运行程序的机会）"><a href="#避免方法（给低优先级或者相同优先级的线程一个运行程序的机会）" class="headerlink" title="避免方法（给低优先级或者相同优先级的线程一个运行程序的机会）"></a>避免方法（给低优先级或者相同优先级的线程一个运行程序的机会）</h5><ol>
<li>调用线程的yield方法，可以使得线程临时让出cpu资源</li>
<li>调用线程的sleep方法</li>
</ol>
<hr>
<h2 id="闪烁文本"><a href="#闪烁文本" class="headerlink" title="闪烁文本"></a>闪烁文本</h2><h3 id="动画的设置"><a href="#动画的设置" class="headerlink" title="动画的设置"></a>动画的设置</h3><blockquote>
<p>定时器和一个线程都可以控制动画，但是使用定时器（一个源组件，以“固定的速率触发一个ActionEvent时间，发生动作时间，定时器会调用监听器的actionPersormed方法来处理这个事件，定时器和事件处理都处于同一事件分发线程上”）</p>
</blockquote>
<blockquote>
<p>如果处理这个事件需要花费很长时间，那么两个事件之间真正的延时时间将比请求延时时间更长，这种情况下，萤爱在一个独立的线程上运行事件处理</p>
</blockquote>
<blockquote>
<p>通常，线程比定时器更加可靠，响应速度更快，如果需要精确的延迟时间或者快速相应，最好使用线程，否则，使用定时器会比线程更加简单，也更加有效，因为定时器运行在GUI事件分发线程上，所以，定时器比线程占用的系统资源少，故而不需要为定时器创建新线程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlashingText</span>  <span class="keyword">extends</span> <span class="title">JApplet</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> JLabel label = <span class="keyword">new</span> JLabel(<span class="string">"Welcome"</span>, JLabel.CENTER);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="title">FlashingText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		add(label);</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(label.getText() == <span class="keyword">null</span>)</span><br><span class="line">					label.setText(<span class="string">"Welcome"</span>);</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					label.setText(<span class="keyword">null</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 线程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JTable表头，表数据居中以及关键字查找和分页]]></title>
      <url>/2017/05/05/JTable%E8%A1%A8%E5%A4%B4%EF%BC%8C%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%B1%85%E4%B8%AD%E4%BB%A5%E5%8F%8A%E5%85%B3%E9%94%AE%E5%AD%97%E6%9F%A5%E6%89%BE%E5%92%8C%E5%88%86%E9%A1%B5/</url>
      <content type="html"><![CDATA[<h2 id="JTable-设置表头居中"><a href="#JTable-设置表头居中" class="headerlink" title="JTable 设置表头居中"></a>JTable 设置表头居中</h2><blockquote>
<p>通过表格默认的渲染器和引用JLabel的center来使得表头居中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((DefaultTableCellRenderer)table.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="JTable-设置表数据居中"><a href="#JTable-设置表数据居中" class="headerlink" title="JTable 设置表数据居中"></a>JTable 设置表数据居中</h2><blockquote>
<p>有时我们需要让表格数据居中显示，而不是默认的左对齐，可以给用户一个更好的体验！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DefaultTableCellRenderer renderer=<span class="keyword">new</span> DefaultTableCellRenderer();</span><br><span class="line">renderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);</span><br><span class="line">table.setDefaultRenderer(Object.class, renderer);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h2 id="JTable-设置表头不可重排序"><a href="#JTable-设置表头不可重排序" class="headerlink" title="JTable 设置表头不可重排序"></a>JTable 设置表头不可重排序</h2><blockquote>
<p>当我们使用JTable控件，发现如果移动一个表头到另一个表头处，也是可以的，如果我们不想要这种效果，便可以执行如下代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table.getTableHeader().setReorderingAllowed(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="JTable-设置表格内容不可编辑"><a href="#JTable-设置表格内容不可编辑" class="headerlink" title="JTable 设置表格内容不可编辑"></a>JTable 设置表格内容不可编辑</h2><blockquote>
<p>我们使用JTable,有时只是为了展示一个关系给用户，并不希望用户可以编辑，但是我们使用JTable,只要点击表格一处内容就可以让用户编辑，因此可以执行如下代码</p>
</blockquote>
<p>在我们新建表格的时候实现 isCellEditable方法便可以<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> JTable table  = <span class="keyword">new</span> JTable()&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCellEditable</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;;</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="JTable-设置表格行高"><a href="#JTable-设置表格行高" class="headerlink" title="JTable 设置表格行高"></a>JTable 设置表格行高</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table.setRowHeight(<span class="number">30</span>);   <span class="comment">//设置表格行高为30px</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="JTable-实现表格的排序以及关键字查找"><a href="#JTable-实现表格的排序以及关键字查找" class="headerlink" title="JTable 实现表格的排序以及关键字查找"></a>JTable 实现表格的排序以及关键字查找</h2><blockquote>
<p>对于表格，经常需要我们去进行排序和关键字的查找</p>
</blockquote>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul>
<li>设置表格的表模型，并设置表格的setRowSorter(JDK1.6出现，用于对JTable实现排序和过滤，此方法清除该选择并重置所有可变行高度)</li>
<li>使用setRowSorter实现的是表格粗粒度排序，也就是通过将每行每一列内容转换成字符串进行排序，</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table.setRowSorter(sorter);</span><br></pre></td></tr></table></figure>
<h3 id="过滤（关键字查找）"><a href="#过滤（关键字查找）" class="headerlink" title="过滤（关键字查找）"></a>过滤（关键字查找）</h3><blockquote>
<p>对于数据量大的表格我们经常通过关键字来进行查找，这里使用了Java中的RowFilter用于从表格模型中过滤条目，对于不满足关键字的将不会显示在表格当中<br>RowFilter 与 JTable 相关联，一个条目对应于JTable的一行记录</p>
</blockquote>
<ul>
<li>首先要产生一个文本框（输入要查询的内容，）</li>
<li>设置表格的模型以及setRowSorter()</li>
<li>设置sorter的setRowFilter,用于实现文本过滤</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.Dimension;</span><br><span class="line"><span class="keyword">import</span> java.awt.EventQueue;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JLabel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JScrollPane;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JTable;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JTextField;</span><br><span class="line"><span class="keyword">import</span> javax.swing.RowFilter;</span><br><span class="line"><span class="keyword">import</span> javax.swing.UIManager;</span><br><span class="line"><span class="keyword">import</span> javax.swing.border.EmptyBorder;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.DefaultTableModel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.JTableHeader;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.TableModel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.TableRowSorter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchTable</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3619887890741475524L</span>;</span><br><span class="line">  <span class="keyword">private</span> JPanel contentPane;</span><br><span class="line">  <span class="keyword">private</span> JTable table;</span><br><span class="line">  <span class="keyword">private</span> JTextField textField;</span><br><span class="line">  <span class="keyword">private</span> TableRowSorter&lt;TableModel&gt; sorter = <span class="keyword">new</span> TableRowSorter&lt;TableModel&gt;();;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Launch the application.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          UIManager.setLookAndFeel(<span class="string">"com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel"</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      EventQueue.invokeLater(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  SearchTable frame = <span class="keyword">new</span> SearchTable();</span><br><span class="line">                  frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">              &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Create the frame.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SearchTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowActivated</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">              do_this_windowActivated(e);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      setTitle(<span class="string">"\u652F\u6301\u67E5\u627E\u529F\u80FD\u7684\u8868\u683C"</span>);</span><br><span class="line">      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">      setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">450</span>, <span class="number">300</span>);</span><br><span class="line">      contentPane = <span class="keyword">new</span> JPanel();</span><br><span class="line">      contentPane.setBorder(<span class="keyword">new</span> EmptyBorder(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>));</span><br><span class="line">      contentPane.setLayout(<span class="keyword">new</span> BorderLayout(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">      setContentPane(contentPane);</span><br><span class="line"></span><br><span class="line">      JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line">      contentPane.add(panel, BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line">      JLabel label = <span class="keyword">new</span> JLabel(<span class="string">"\u5173\u952E\u5B57\uFF1A"</span>);</span><br><span class="line">      label.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">      panel.add(label);</span><br><span class="line"></span><br><span class="line">      textField = <span class="keyword">new</span> JTextField();</span><br><span class="line">      textField.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">      panel.add(textField);</span><br><span class="line">      textField.setColumns(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">      JPanel buttonPanel = <span class="keyword">new</span> JPanel();</span><br><span class="line">      contentPane.add(buttonPanel, BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">      JButton button = <span class="keyword">new</span> JButton(<span class="string">"\u67E5\u627E"</span>);</span><br><span class="line">      button.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">            sorter.setRowFilter(RowFilter.regexFilter(textField.getText()));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      button.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">      buttonPanel.add(button);</span><br><span class="line"></span><br><span class="line">      JScrollPane scrollPane = <span class="keyword">new</span> JScrollPane();</span><br><span class="line">      contentPane.add(scrollPane, BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">      table = <span class="keyword">new</span> JTable();</span><br><span class="line">      table.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">14</span>));</span><br><span class="line">      table.setRowHeight(<span class="number">30</span>);</span><br><span class="line">      JTableHeader header = table.getTableHeader();</span><br><span class="line">      header.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">      header.setPreferredSize(<span class="keyword">new</span> Dimension(header.getWidth(), <span class="number">35</span>));</span><br><span class="line">      scrollPane.setViewportView(table);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">do_this_windowActivated</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">      DefaultTableModel tableModel = (DefaultTableModel) table.getModel();</span><br><span class="line">      tableModel.setRowCount(<span class="number">0</span>);</span><br><span class="line">      tableModel.setColumnIdentifiers(<span class="keyword">new</span> Object[] &#123; <span class="string">"书名"</span>, <span class="string">"出版社"</span>, <span class="string">"出版时间"</span>, <span class="string">"丛书类别"</span>, <span class="string">"定价"</span> &#125;);</span><br><span class="line">      tableModel.addRow(<span class="keyword">new</span> Object[] &#123; <span class="string">"Java从入门到精通（第2版）"</span>, <span class="string">"清华大学出版社"</span>, <span class="string">"2010-07-01"</span>, <span class="string">"软件工程师入门丛书"</span>, <span class="string">"59.8元"</span> &#125;);</span><br><span class="line">      tableModel.addRow(<span class="keyword">new</span> Object[] &#123; <span class="string">"PHP从入门到精通（第2版）"</span>, <span class="string">"清华大学出版社"</span>, <span class="string">"2010-07-01"</span>, <span class="string">"软件工程师入门丛书"</span>, <span class="string">"69.8元"</span> &#125;);</span><br><span class="line">      tableModel.addRow(<span class="keyword">new</span> Object[] &#123; <span class="string">"Visual Basic从入门到精通（第2版）"</span>, <span class="string">"清华大学出版社"</span>, <span class="string">"2010-07-01"</span>, <span class="string">"软件工程师入门丛书"</span>, <span class="string">"69.8元"</span> &#125;);</span><br><span class="line">      tableModel.addRow(<span class="keyword">new</span> Object[] &#123; <span class="string">"Visual C++从入门到精通（第2版）"</span>, <span class="string">"清华大学出版社"</span>, <span class="string">"2010-07-01"</span>, <span class="string">"软件工程师入门丛书"</span>, <span class="string">"69.8元"</span> &#125;);</span><br><span class="line">      sorter.setModel(tableModel);</span><br><span class="line">      table.setRowSorter(sorter);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="实现表格的分页"><a href="#实现表格的分页" class="headerlink" title="实现表格的分页"></a>实现表格的分页</h2><blockquote>
<p>对于数据量大的表格，我们不仅仅需要查找和过滤，更需要我们实现表格的分页，对于如何分页，这里实现了表格分页的一个小算法</p>
</blockquote>
<p>思路：</p>
<ul>
<li>得到数据总数</li>
<li>得到所需页数 = Math.ceil（数据总数 / 每页计划存放的数据数）</li>
<li>显示当前页数，编写首页，上一页，当前页数，下一页，最后一页的监听事件<br>如果用户不输入当期页数，则就显示当前页数，如果输入了一个页数则实现跳转（需要进行判断页数是否合法）<br>如果用户点击首页，跳转到首页<br>如果用户点击上一页，则需要判断是否存在上一页，如果存在则跳转<br>如果用户点击下一页，下一页存在，如果是最后一页显示剩余的数据，如果不是，显示该页的15条记录；下一页不存在，告诉用户已经是最后一页<br>如果用户点击最后一页，跳转到最后一页</li>
</ul>
<p>数据需要用户自己进行添加，每页显示15行数据，如果用户需要，可以进行更改</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.Dimension;</span><br><span class="line"><span class="keyword">import</span> java.awt.EventQueue;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JComboBox;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JDialog;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JLabel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JScrollPane;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JTable;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JTextField;</span><br><span class="line"><span class="keyword">import</span> javax.swing.RowFilter;</span><br><span class="line"><span class="keyword">import</span> javax.swing.UIManager;</span><br><span class="line"><span class="keyword">import</span> javax.swing.border.EmptyBorder;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.DefaultTableCellRenderer;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.DefaultTableModel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.JTableHeader;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.TableModel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.TableRowSorter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**			</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@author</span> SiVan</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@time</span> 2017年4月23日 下午7:13:18</span></span><br><span class="line"><span class="comment">   * TODO	实现表格分页</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryPurchase</span> <span class="keyword">extends</span> <span class="title">JDialog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3619887890741475524L</span>;</span><br><span class="line">  <span class="keyword">private</span> JPanel contentPane;</span><br><span class="line">  <span class="comment">/*新建一个表格并设置表格内容不可以编辑*/</span></span><br><span class="line">  <span class="keyword">private</span> JTable table  = <span class="keyword">new</span> JTable()&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCellEditable</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">  <span class="keyword">private</span> JTextField textField;</span><br><span class="line">  <span class="keyword">private</span> TableRowSorter&lt;TableModel&gt; sorter = <span class="keyword">new</span> TableRowSorter&lt;TableModel&gt;();;</span><br><span class="line"></span><br><span class="line">  Vector&lt;String&gt; header ;</span><br><span class="line"><span class="keyword">private</span> String url = <span class="string">"jdbc:mysql://localhost:3306/erp"</span>;</span><br><span class="line"><span class="keyword">private</span> String user = <span class="string">"root"</span>;</span><br><span class="line"><span class="keyword">private</span> String password = <span class="string">"1018222wxw"</span>;</span><br><span class="line">Vector&lt;Vector&lt;String&gt;&gt; dataVector;		<span class="comment">/*存放所有数据*/</span></span><br><span class="line">JTextField text;						<span class="comment">/*显示当前页数*/</span></span><br><span class="line">Vector&lt;Vector&lt;String&gt;&gt; data;			<span class="comment">/*存放所要显示的每一页的数据*/</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;									<span class="comment">/*得到数据总数*/</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Launch the application.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          UIManager.setLookAndFeel(<span class="string">"com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel"</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      EventQueue.invokeLater(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                QueryPurchase frame = <span class="keyword">new</span> QueryPurchase();</span><br><span class="line">                  frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">              &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Create the frame.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">QueryPurchase</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    header = <span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line">  header.add(<span class="string">"进货编号"</span>);</span><br><span class="line">  header.add(<span class="string">"供应商名称"</span>);</span><br><span class="line">  header.add(<span class="string">"花盆编号"</span>);</span><br><span class="line">  header.add(<span class="string">"花盆名称"</span>);</span><br><span class="line">  header.add(<span class="string">"联系人"</span>);</span><br><span class="line">  header.add(<span class="string">"数量"</span>);</span><br><span class="line">  header.add(<span class="string">"单价"</span>);</span><br><span class="line">  header.add(<span class="string">"总价"</span>);</span><br><span class="line">  header.add(<span class="string">"进货时间"</span>);</span><br><span class="line"></span><br><span class="line">  data = <span class="keyword">new</span> Vector&lt;Vector&lt;String&gt;&gt;();</span><br><span class="line">  dataVector = <span class="keyword">new</span> Vector&lt;Vector&lt;String&gt;&gt;();</span><br><span class="line">  text = <span class="keyword">new</span> JTextField();					<span class="comment">/*显示当前页数*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  对于初次添加的数据，需要判断数据是否填充满第一页，如果填充满则第一页显示15条记录，</span></span><br><span class="line"><span class="comment">  反之显示用户所添加的记录数目</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">if</span>(n / <span class="number">15</span> &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">      data.add(dataVector.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n % <span class="number">15</span>; i++) &#123;</span><br><span class="line">      data.add(dataVector.get(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> DefaultTableModel model = <span class="keyword">new</span> DefaultTableModel(data,header);</span><br><span class="line">  table.setModel(model);</span><br><span class="line">  sorter.setModel(model);</span><br><span class="line">      table.setRowSorter(sorter);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  textField = <span class="keyword">new</span> JTextField();</span><br><span class="line">      textField.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">  textField.addKeyListener(<span class="keyword">new</span> KeyAdapter() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      sorter.setRowFilter(RowFilter.regexFilter(textField.getText()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.setSize(<span class="number">1000</span>, <span class="number">650</span>);</span><br><span class="line">      <span class="keyword">this</span>.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">      contentPane = <span class="keyword">new</span> JPanel();</span><br><span class="line">      contentPane.setBorder(<span class="keyword">new</span> EmptyBorder(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>));</span><br><span class="line">      contentPane.setLayout(<span class="keyword">new</span> BorderLayout(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">      setContentPane(contentPane);</span><br><span class="line"></span><br><span class="line">      JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line">      contentPane.add(panel, BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line">      JLabel label = <span class="keyword">new</span> JLabel(<span class="string">"\u5173\u952E\u5B57\uFF1A"</span>);</span><br><span class="line">      label.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">      panel.add(label);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      panel.add(textField);</span><br><span class="line">      textField.setColumns(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">      JPanel buttonPanel = <span class="keyword">new</span> JPanel();</span><br><span class="line">      contentPane.add(buttonPanel, BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">      JButton first = <span class="keyword">new</span> JButton(<span class="string">"首页"</span>);</span><br><span class="line">      JButton previous = <span class="keyword">new</span> JButton(<span class="string">"上一页"</span>);</span><br><span class="line">      JButton next = <span class="keyword">new</span> JButton(<span class="string">"下一页"</span>);</span><br><span class="line">      JButton last = <span class="keyword">new</span> JButton(<span class="string">"尾页"</span>);</span><br><span class="line">      JLabel page = <span class="keyword">new</span> JLabel(<span class="string">"当前页数:"</span>);</span><br><span class="line"></span><br><span class="line">      ((DefaultTableCellRenderer)table.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);</span><br><span class="line"></span><br><span class="line">      first.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      text.setText(<span class="string">"1"</span>);</span><br><span class="line">      data.removeAllElements();</span><br><span class="line">      <span class="keyword">if</span>(n / <span class="number">15</span> &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">          data.add(dataVector.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n%<span class="number">15</span>; i++) &#123;</span><br><span class="line">          data.add(dataVector.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">          DefaultTableModel model = <span class="keyword">new</span> DefaultTableModel(data,header);</span><br><span class="line">          table.setModel(model);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">      previous.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      String page = text.getText();</span><br><span class="line">      <span class="keyword">if</span>(<span class="string">"1"</span>.equals(page))&#123;</span><br><span class="line">        JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="string">"对不起，现在已经是首页了"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> k = Integer.parseInt(page);</span><br><span class="line">      text.setText(k - <span class="number">1</span> + <span class="string">""</span>);</span><br><span class="line">      data.removeAllElements();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = (k - <span class="number">2</span>) * <span class="number">15</span>; i &lt; (k - <span class="number">2</span>) * <span class="number">5</span> + <span class="number">15</span>; i++) &#123;</span><br><span class="line">        data.add(dataVector.get(i));</span><br><span class="line">      &#125;</span><br><span class="line">          DefaultTableModel model = <span class="keyword">new</span> DefaultTableModel(data,header);</span><br><span class="line">          table.setModel(model);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">      next.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> page = Integer.parseInt(text.getText());</span><br><span class="line">      <span class="keyword">int</span> k = n % <span class="number">15</span>;</span><br><span class="line">      <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(page == n / <span class="number">15</span>)&#123;</span><br><span class="line">          JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="string">"已经是最后一页了"</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(page == n / <span class="number">15</span> + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="string">"已经是最后一页了"</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!(page == n / <span class="number">15</span> ))&#123;</span><br><span class="line">          k = <span class="number">15</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        text.setText(page + <span class="number">1</span> + <span class="string">""</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      data.removeAllElements();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = page * <span class="number">15</span>; i &lt; page * <span class="number">15</span> +  k; i++) &#123;</span><br><span class="line">        data.add(dataVector.get(i));</span><br><span class="line">      &#125;</span><br><span class="line">      DefaultTableModel model = <span class="keyword">new</span> DefaultTableModel(data,header);</span><br><span class="line">          table.setModel(model);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">      last.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> k = n % <span class="number">15</span>;</span><br><span class="line">      data.removeAllElements();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = n - k ; i &lt;= n - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        data.add(dataVector.get(i));</span><br><span class="line">      &#125;</span><br><span class="line">      DefaultTableModel model = <span class="keyword">new</span> DefaultTableModel(data,header);</span><br><span class="line">          table.setModel(model);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">      text.addKeyListener(<span class="keyword">new</span> KeyAdapter() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">int</span> k = n % <span class="number">15</span>;</span><br><span class="line">          <span class="keyword">int</span> page = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">try</span>&#123;</span><br><span class="line">             page = Integer.parseInt(text.getText());</span><br><span class="line">          &#125;<span class="keyword">catch</span>(Exception e1)&#123;</span><br><span class="line">            JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="string">"请注意页数格式"</span>);</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(page &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="string">"页数非法"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>( page &gt; n/<span class="number">15</span>)&#123;</span><br><span class="line">              JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="string">"页数非法"</span>);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            k = <span class="number">15</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>( page &gt; n/<span class="number">15</span> + <span class="number">1</span>)&#123;</span><br><span class="line">              JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="string">"页数非法"</span>);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( page &lt; n/<span class="number">15</span> + <span class="number">1</span>)&#123;</span><br><span class="line">              k = <span class="number">15</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      data.removeAllElements();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = (page - <span class="number">1</span>) * <span class="number">15</span> ; i &lt; (page - <span class="number">1</span>) * <span class="number">15</span> + k; i++)&#123;</span><br><span class="line">        data.add(dataVector.get(i));</span><br><span class="line">      &#125;</span><br><span class="line">      DefaultTableModel model = <span class="keyword">new</span> DefaultTableModel(data,header);</span><br><span class="line">          table.setModel(model);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">      first.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">      previous.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">      next.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">      last.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">      page.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">      text.setColumns(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      buttonPanel.add(first);</span><br><span class="line">      buttonPanel.add(previous);</span><br><span class="line">      buttonPanel.add(page);</span><br><span class="line">      buttonPanel.add(text);</span><br><span class="line">      buttonPanel.add(next);</span><br><span class="line">      buttonPanel.add(last);</span><br><span class="line">      JScrollPane scrollPane = <span class="keyword">new</span> JScrollPane();</span><br><span class="line">      contentPane.add(scrollPane, BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*设置表头不可重排序*/</span></span><br><span class="line">      table.getTableHeader().setReorderingAllowed(<span class="keyword">false</span>);</span><br><span class="line">      <span class="comment">/*设置表格字体*/</span></span><br><span class="line">      table.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">14</span>));</span><br><span class="line">      <span class="comment">/*设置表格行高*/</span></span><br><span class="line">      table.setRowHeight(<span class="number">30</span>);</span><br><span class="line">      <span class="comment">/*设置表数据居中*/</span></span><br><span class="line">      DefaultTableCellRenderer renderer=<span class="keyword">new</span> DefaultTableCellRenderer();</span><br><span class="line">      renderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);</span><br><span class="line">      table.setDefaultRenderer(Object.class, renderer);</span><br><span class="line">      <span class="comment">/*设置表头的字体以及宽度高度*/</span></span><br><span class="line">      JTableHeader header1 = table.getTableHeader();</span><br><span class="line">      header1.setFont(<span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">      header1.setPreferredSize(<span class="keyword">new</span> Dimension(header1.getWidth(), <span class="number">35</span>));</span><br><span class="line">      scrollPane.setViewportView(table);</span><br><span class="line">      <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Swing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> JTable </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swing窗体取消标题如何拖动]]></title>
      <url>/2017/05/05/Swing%E7%AA%97%E4%BD%93%E5%8F%96%E6%B6%88%E6%A0%87%E9%A2%98%E5%A6%82%E4%BD%95%E6%8B%96%E5%8A%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>众所周知，swing中的窗体默认提供了边框以及标题栏，但是我们设置undecorated为true之后，不会使用Swing中的窗体来修饰，但是默认窗体也将不会随着鼠标的拖动而移动，因此我们需要给我们自己窗体添加一个随着鼠标移动而移动的事件</p>
</blockquote>
<h2 id="添加鼠标监听器事件"><a href="#添加鼠标监听器事件" class="headerlink" title="添加鼠标监听器事件"></a>添加鼠标监听器事件</h2><blockquote>
<p>窗体移动默认都是鼠标按下之后，鼠标开始移动，窗体也会跟着鼠标开始移动！鼠标移动之前，我们需要记录按下鼠标时相对于窗体的位置，因为移动将不会改变鼠标相对于窗体的位置</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">frame.addMouseListener(<span class="keyword">new</span> MouseAdapter() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">            pressedPoint = e.getPoint();<span class="comment">/*记录鼠标相对于窗体坐标*/</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h2 id="添加鼠标侦听器事件"><a href="#添加鼠标侦听器事件" class="headerlink" title="添加鼠标侦听器事件"></a>添加鼠标侦听器事件</h2><blockquote>
<p>窗体移动是一个实时的事件，并且将会持续一个过程，java为我们提供了一个鼠标侦听器事件的监听器，我们只需要实现侦听器就可以实现窗体跟随鼠标拖动而移动</p>
</blockquote>
<h3 id="让窗体移动的思路"><a href="#让窗体移动的思路" class="headerlink" title="让窗体移动的思路"></a>让窗体移动的思路</h3><ul>
<li>记录下来按下鼠标的时候，鼠标相对于窗体的位置</li>
<li>记录窗体位置，鼠标移动了之后，鼠标相对于窗体位置并不会改变，但是在移动过程中，窗体位置将不会改变，鼠标相对于窗体位置会不断改变，因此我们只需要通过 窗体位置（不会动） + 移动过程中鼠标相对于窗体位置的坐标（移动过程中会动） - 鼠标相对于窗体的位置（按下鼠标的时候，不会动） = 窗体移动后的位置</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*设置窗体移动*/</span></span><br><span class="line">		frame.addMouseMotionListener(<span class="keyword">new</span> MouseMotionAdapter() &#123;</span><br><span class="line">	            <span class="meta">@Override</span></span><br><span class="line">	            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDragged</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">	            	Point point = e.getPoint();           <span class="comment">/*获取当前坐标,得到的是鼠标位置相对于窗体的坐标*/</span></span><br><span class="line">	                Point locationPoint = frame.getLocation();<span class="comment">/*获取窗体坐标*/</span></span><br><span class="line">	                <span class="keyword">int</span> x = locationPoint.x + point.x - pressedPoint.x;<span class="comment">/* 计算移动后的新坐标*/</span></span><br><span class="line">	                <span class="keyword">int</span> y = locationPoint.y + point.y - pressedPoint.y;</span><br><span class="line">	                frame.setLocation(x, y);<span class="comment">/*改变窗体位置*/</span></span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Swing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Swing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[泛型]]></title>
      <url>/2017/03/22/%E6%B3%9B%E5%9E%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>前言：泛型是JDK1.5开始，Java便允许定义泛型类，泛型接口，泛型方法。可以使用泛型对API中一些接口和类进行修改。</p>
</blockquote>
<ul>
<li>JDK1.5之前的java.lang.Comparable</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>JDK1.5的java.lang.Comparable<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T o)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="泛型（参数化类型的能力）"><a href="#泛型（参数化类型的能力）" class="headerlink" title="泛型（参数化类型的能力）"></a>泛型（参数化类型的能力）</h2><ul>
<li>从形式泛型类型转换为实际具体类型 称为泛型实例化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; --&gt; List&lt;Integer&gt;</span><br></pre></td></tr></table></figure>
<h3 id="泛型的优点："><a href="#泛型的优点：" class="headerlink" title="泛型的优点："></a>泛型的优点：</h3><blockquote>
<p>使用泛型的主要优点是：<font color="red">能够在编译时而不是在运行时检查出错误</font>，泛型类或方法规定了用户在使用这些类或方法的对象类型，如果我们使用了一个不兼容的类型，编译器就会检测出这个错误。同时使用泛型，我们可以保证软件的可靠性和可读性，保证了程序不是运行时产生错误，而是编译时产生错误。</p>
</blockquote>
<p>1.例子一：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Comparable c = <span class="keyword">new</span> Date();</span><br><span class="line">		System.out.println(c.compareTo(<span class="string">"Red"</span>));</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		曝出异常</span></span><br><span class="line"><span class="comment">		ClassCastException: java.lang.String cannot be cast to java.util.Date</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原因分析：这样的代码会产生运行错误，因为一个字符串和一个日期时间比较，显而易见会存在异常</p>
</blockquote>
<p>2.例子二：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	Comparable&lt;Date&gt; c = <span class="keyword">new</span> Date();</span><br><span class="line">	System.out.println(c.compareTo(<span class="string">"red"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对比两个例子代码，很明显泛型可以保证程序的健壮性，如果我们不适用泛型，默认泛型是Object，但是在转换就有很多弊端，很有可能就会曝出异常！</p>
</blockquote>
<hr>
<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">		<span class="comment">/*使用泛型方法要将泛型放到方法名后面*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericStack</span>&lt;<span class="title">E1</span>,<span class="title">E2</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">GenericStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">/*构造方法仍然这样写*/</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span>  &lt;E1,E2&gt; <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">/*使用泛型方法要将泛型放到返回类型前面*/</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		GenericStack&lt;String, Integer&gt; gen = <span class="keyword">new</span> GenericStack&lt;String,Integer&gt;();</span><br><span class="line">		gen.&lt;String, Integer&gt;add();</span><br><span class="line">		<span class="comment">/*调用泛型方法，需要将实际类型放到尖括号内并作为方法名的前缀*/</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*将泛型指定为另外一种类型的子类型，被成为受限的泛型类型*/</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Object&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center>泛型类</center>

<hr>
<h2 id="原始类型和向后兼容"><a href="#原始类型和向后兼容" class="headerlink" title="原始类型和向后兼容"></a>原始类型和向后兼容</h2><blockquote>
<ul>
<li>原始类型：不使用类型参数的泛型类</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Java允许使用原始类型向后兼容，但是原始类型并不安全，更好的方法是使用泛型</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Max</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Comparable <span class="title">max</span><span class="params">(Comparable o1, Comparable o2)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(o1.compareTo(o2) &gt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> o1;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">02</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*如果我们调用方法Max.max("welcome",23)  便会产生一个错误，因此不建议使用原始类型*/</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="通配泛型"><a href="#通配泛型" class="headerlink" title="通配泛型"></a>通配泛型</h2><p>1.为什么使用通配泛型？</p>
<p>代码1：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildCardDemo1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		GenericStack&lt;Integer&gt; intStack = <span class="keyword">new</span> GenericStack&lt;Integer&gt;();</span><br><span class="line">		intStack.push(<span class="number">1</span>);</span><br><span class="line">		intStack.push(<span class="number">2</span>);</span><br><span class="line">		intStack.push(-<span class="number">2</span>);</span><br><span class="line">		System.out.print(<span class="string">"The max number is "</span> + max(intStack));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(GenericStack&lt;Number&gt; stack)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">double</span> max = stack.pop().doubleValue();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(!stack.isEmpty())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">double</span> value = stack.pop().doubleValue();</span><br><span class="line">			<span class="keyword">if</span>(value &gt; max)</span><br><span class="line">				max = value;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> max;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*分析：第8行会出现编译错误，最开始自己也没想通，所以就拿来这道题目来作例题，*/</span></span><br><span class="line"><span class="comment">/*因为intStack不是GenericStack&lt;Number&gt;的实例*/</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>为了避免上面例子中的问题，我们采用通配泛型类型，通配泛型类型有三种：</p>
<ul>
<li>?</li>
<li>? Extends T 表示T或T的一个未知子类型</li>
<li>? super T（其中T是某个泛型类型），表示T或T的一个未知父类型</li>
</ul>
<p>第一种称为非受限通配， 第二三种称为受限通配，也叫下限通配</p>
</blockquote>
<p>将max方法修改成public static double max(GenericStack? Extends Number&gt; Stack)便可以解决问题，其中? Extends Number 表示Number或者Number子类型的通配类型</p>
<p>代码2：</p>
<blockquote>
<p>思考以下代码是否正确？</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildCardDemo2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		GenericStack&lt;Integer&gt; intStack = <span class="keyword">new</span> GenericStack&lt;Integer&gt;();</span><br><span class="line">		intStack.push(<span class="number">1</span>);</span><br><span class="line">		intStack.push(<span class="number">2</span>);</span><br><span class="line">		intStack.push(-<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">		print(intStack);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(GenericStack&lt;Object&gt; stack)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(!stack.isEmpty())</span><br><span class="line">			System.out.println(stack.pop() + <span class="string">" "</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码是不合法的，尽管我们的stack的泛型类型是?（等价于&lt;? Extends Object&gt;） 我们intStack的泛型类型是Integer，但是如果调用print(intStack)将会报错，因为GenericStack并不是GenericStack的子类型，所以我们需要使用&lt;? super T&gt;通配符</p>
<hr>
<h2 id="泛型注意事项"><a href="#泛型注意事项" class="headerlink" title="泛型注意事项"></a>泛型注意事项</h2><ol>
<li>泛型类型必须是引用类型，不可以使用基本数据类型来进行替换</li>
<li>泛型类中，构造方法不需要加上泛型</li>
<li>泛型类有多个参数的时候，我们需要</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 泛型 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse工具讲解（中文语言包的安装，活用workspace，添加新的JDK环境）]]></title>
      <url>/2017/03/17/Eclipse/</url>
      <content type="html"><![CDATA[<h2 id="中文语言包的安装"><a href="#中文语言包的安装" class="headerlink" title="中文语言包的安装"></a>中文语言包的安装</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><blockquote>
<ol>
<li>安装好的Eclipse，可以去网上下载，免费，下载<a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">Eclipse</a></li>
<li>有网络环境</li>
</ol>
</blockquote>
<a id="more"></a>
<h3 id="下载中文语言包"><a href="#下载中文语言包" class="headerlink" title="下载中文语言包"></a>下载中文语言包</h3><ol>
<li>进入<a href="http://www.eclipse.org/babel/downloads.php" target="_blank" rel="noopener">语言包下载</a></li>
<li>找到自己所对应的Eclipse版本，并且点击，进入语言包界面</li>
<li>找到Language: Chinese (Simplified) 栏目</li>
<li>下载该栏目下所有文件</li>
</ol>
<h3 id="解压缩中文语言包"><a href="#解压缩中文语言包" class="headerlink" title="解压缩中文语言包"></a>解压缩中文语言包</h3><ol>
<li>将所下载的压缩包解压到一个文件中</li>
<li>解压后的文件有两个子目录，features 和 plugins ，复制到Eclipse的安装目录，提示是否覆盖，选择是，打开Eclipse即可看到中文界面的Eclipse</li>
</ol>
<hr>
<h2 id="添加新的JDK环境"><a href="#添加新的JDK环境" class="headerlink" title="添加新的JDK环境"></a>添加新的JDK环境</h2><blockquote>
<p>Eclipse的成功运行需要Java运行环境的支持，才能够启动运行，并且Eclipse启动后，会把当前Java执行环境当作Eclipse的默认开发环境</p>
</blockquote>
<ol>
<li>选择 Window–&gt;Preferences–&gt;Java选项卡–&gt;Installed JREs –&gt;Add</li>
<li>选择 Standard VM</li>
<li>弹出的新界面，点击Directory，找到JDK安装路径，点击finish</li>
</ol>
<p>注意：这里也可以点击 Variables 设置JRE环境的内存参数，在缺省VM参数的编辑框，写入 “-xmx200M”参数就可以为虚拟机添加内存，可以避免大型应用程序因为内存不足而无法运行</p>
<hr>
<h2 id="为项目添加类库"><a href="#为项目添加类库" class="headerlink" title="为项目添加类库"></a>为项目添加类库</h2><blockquote>
<ol>
<li>一个大型项目的开发，需要几个或多个JAR文件的支持，比如数据库连接的类库等等</li>
<li>构建路径就是把各个类库设置到CLASSPATH类路径当中，是一个环境变量，这样，在编译源文件时才能够找到引用的其他JAR文件中的API</li>
</ol>
</blockquote>
<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>自己新建一个文件夹 lib ，然后把所有用到的JAR文件复制粘贴过来</p>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><blockquote>
<p>对于重复使用的类库，不需要每次添加，直接添加到用户的类库中就可以</p>
</blockquote>
<ol>
<li>选择Window –&gt; Preferences–&gt; Java –&gt; Build Path –&gt; user libraries</li>
<li>选择import ，点击自己所存放类库的位置就可以</li>
</ol>
<hr>
<h2 id="安装界面设计器（WindowBuilder插件）"><a href="#安装界面设计器（WindowBuilder插件）" class="headerlink" title="安装界面设计器（WindowBuilder插件）"></a>安装界面设计器（WindowBuilder插件）</h2><blockquote>
<p>由于Java Swing开发桌面应用程序比较灵活，由于API众多，因此开发难度增大，而且Swing为了实现跨平台的应用程序，使得程序员不得不边运行程序，边进行界面设计，因此这里介绍一个插件，帮助大家快速开发桌面应用程序</p>
</blockquote>
<h3 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h3><ol>
<li>进入 <a href="http://www.eclipse.org/windowbuilder/download.php" target="_blank" rel="noopener">WindowBuilder下载界面</a></li>
<li>找到对应版本的Eclipse，选择 Release Version下的 Zipped Update Site （离线安装）</li>
<li>将压缩包中的文件解压，并覆盖Eclipse文件夹下的同名文件夹</li>
</ol>
<h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><ol>
<li>进入 <a href="http://www.eclipse.org/windowbuilder/download.php" target="_blank" rel="noopener">WindowBuilder下载界面</a></li>
<li>找到对应版本的Eclipse，选择 Release Version下的Update Site 的link选项，点击，复制进入新界面的网址</li>
<li>打开Eclipse</li>
<li>点击 Help–&gt;Install new software–&gt; Add –&gt;输入名称（WindowBuilder），输入位置 （把复制的网址粘贴）</li>
<li>点击确定，然后选择出来的WindowBuilder，然后一路next</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Eclipse </tag>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件输入输出流]]></title>
      <url>/2017/03/09/%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/</url>
      <content type="html"><![CDATA[<p>文本输入输出流–Scanner和PrintWriter–输入和输出针对Java虚拟机而言</p>
<h2 id="PrintWriter输出流"><a href="#PrintWriter输出流" class="headerlink" title="PrintWriter输出流"></a>PrintWriter输出流</h2><blockquote>
<ol>
<li>使用PrintWriter可以创建一个文本文件，并且向文本文件写入数据</li>
<li>使用PrintWriter后，必须使用关闭输出流，可以手动也可以自动关闭，不关闭会导致数据不能正确的保存在文件中</li>
</ol>
</blockquote>
<a id="more"></a>
<h3 id="手动关闭"><a href="#手动关闭" class="headerlink" title="手动关闭"></a>手动关闭</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteData</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		File file = <span class="keyword">new</span> File(<span class="string">"H:/wored.txt"</span>);</span><br><span class="line">		<span class="keyword">if</span>(file.exists())</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="string">"文件已经存在，操作不成功"</span>);</span><br><span class="line">			System.exit(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		PrintWriter pw = <span class="keyword">new</span> PrintWriter(file);			<span class="comment">//这里会自动创建一个新的文件</span></span><br><span class="line">		pw.write(<span class="string">"FREE Code"</span>);</span><br><span class="line">		pw.print(<span class="string">"Jo hnTsMI TL"</span>);</span><br><span class="line">		pw.close();										<span class="comment">//必须调用该方法，如果没有调用，则不能正确保存在文件中</span></span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(file);</span><br><span class="line">		System.out.println(in.nextLine());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用try-with-resources自动关闭输出流"><a href="#使用try-with-resources自动关闭输出流" class="headerlink" title="使用try-with-resources自动关闭输出流"></a>使用try-with-resources自动关闭输出流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteDataWithAutoClose</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 文件输出流PrintWriter注意事项</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">		File file = <span class="keyword">new</span> File(<span class="string">"H:/wored.txt"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(file.exists())</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="string">"File already exits"</span>);</span><br><span class="line">			System.exit(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span>(</span><br><span class="line">				PrintWriter pw = <span class="keyword">new</span> PrintWriter(file);				</span><br><span class="line">		<span class="comment">//这里的pw只会当作AutoCloseable的子类型，在try语句块有效，因此会自动关闭所创建的文件输出流,并不需要我们手动关闭</span></span><br><span class="line">			)&#123;</span><br><span class="line">			pw.print(<span class="string">"John T Smith"</span>);</span><br><span class="line">			pw.print(<span class="number">90</span>);</span><br><span class="line">			pw.print(<span class="string">"Eric K Jones"</span>);</span><br><span class="line">			pw.println(<span class="string">"Evet"</span>);</span><br><span class="line">			pw.print(<span class="string">"85"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(file);</span><br><span class="line">		System.out.println(in.nextLine());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Scanner输入流"><a href="#Scanner输入流" class="headerlink" title="Scanner输入流"></a>Scanner输入流</h2><blockquote>
<p>使用java.util.Scanner 类来从控制台或者文本读取数据到虚拟机</p>
</blockquote>
<h3 id="从键盘读取"><a href="#从键盘读取" class="headerlink" title="从键盘读取"></a>从键盘读取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">	</span><br><span class="line">Scanner input1 = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure>
<h3 id="从文件中读取"><a href="#从文件中读取" class="headerlink" title="从文件中读取"></a>从文件中读取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">	</span><br><span class="line">Scanner input = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(<span class="string">"H:/wored.txt"</span>));</span><br></pre></td></tr></table></figure>
<p>例子1：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadData</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">		Scanner input = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(<span class="string">"H:/wored.txt"</span>));				<span class="comment">//从文件中读取数据</span></span><br><span class="line">		String str = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span>(input.hasNext())</span><br><span class="line">			 str = input.nextLine();</span><br><span class="line">		System.out.println(str);</span><br><span class="line">		input.close();              <span class="comment">//当然这里自动关闭也是可以的  </span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Scanner-如何工作"><a href="#Scanner-如何工作" class="headerlink" title="Scanner 如何工作"></a>Scanner 如何工作</h3><blockquote>
<ol>
<li>Scanner中的next()，nextInt()，nextDouble()等方法都是标记读取方法，默认标记符为空格，读取以分隔符分开的标记，当然分隔符也可以使用useDelimiter(String regex)方法进行设置</li>
<li>Scanner中的next()，nextInt()，nextDouble()首先都会跳过任意分隔符，知道下一次遇到分隔符，才会读取结束</li>
</ol>
</blockquote>
<p>例子2：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadData</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner input = <span class="keyword">new</span> Scanner(<span class="string">"54 33"</span>);</span><br><span class="line">		<span class="keyword">int</span> sum = input.nextInt() + input.nextInt();</span><br><span class="line">		System.out.println(sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//结果为87</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例子3：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadData</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//从键盘中输入数据34 换行 567</span></span><br><span class="line">		<span class="keyword">int</span> intValue = input.nextInt();</span><br><span class="line">		String line = input.nextLine();</span><br><span class="line">		System.out.println(intValue);</span><br><span class="line">		System.out.println(line);</span><br><span class="line">	&#125;	</span><br><span class="line">		<span class="comment">//结果只有34，因为line读取到换行符，因为在换行符之前为空，返回为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> File </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[版本管理工具-Git篇[1]]]></title>
      <url>/2017/01/15/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-Git%E7%AF%87/</url>
      <content type="html"><![CDATA[<h2 id="版本管理工具的介绍"><a href="#版本管理工具的介绍" class="headerlink" title="版本管理工具的介绍"></a>版本管理工具的介绍</h2><p>作用：备份文件，与U盘等备份文件相比，可以随时随地，项目中经常使用。</p>
<h3 id="版本管理工具可以记录历史"><a href="#版本管理工具可以记录历史" class="headerlink" title="版本管理工具可以记录历史"></a>版本管理工具可以记录历史</h3><p>网盘 u盘 保存了文件的最新状态，而不会记录修改的历史纪录，而版本管理工具对每次的修改都会进行备份，并且保留了时间和修改人，可以让我们回溯，如果不小心删除版本管理工具中的备份时，我们可以通过历史纪录对其进行找回，因此使用版本管理工具无需担心，而且使用版本管理工具，可以多端共享，例如我们经常所说的云盘，而且只要提交一次，我们就可以在任何地方通过版本管理工具对提交的代码进行下载。尤其对于，一些经常需要分开工作的工作人员比较实用</p>
<a id="more"></a>
<h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><ol>
<li><p>CVS： 版本管理工具始祖，也是被第一个大规模使用的版本管理工具。由荷兰一所大学教授所开发，由于当时三个人分开工作，为了便于一起协调，创建了CVS。集中式的工具，放到中心服务器上，需要联网</p>
</li>
<li><p>SVN： 2000年诞生，也是集中式的工具</p>
</li>
<li><p>git： 2005年诞生，Geek社区主流工具，分布式工具！</p>
</li>
<li><p>Github： 程序员社区，托管代码基于Git操作。大牛多在这里！！！</p>
</li>
</ol>
<h3 id="集中式-与-分布式-区别"><a href="#集中式-与-分布式-区别" class="headerlink" title="集中式 与 分布式 区别"></a>集中式 与 分布式 区别</h3><ol>
<li>集中式需要放到中心服务器上，并且操作需要联网，不方便</li>
<li>分布式则是只要有版本库，就可以在不联网的前提下，快速完成文件提交，记录查看，以及删除等操作，效率高！</li>
</ol>
<hr>
<h2 id="初探Git"><a href="#初探Git" class="headerlink" title="初探Git"></a>初探Git</h2><h3 id="Git-下载-与-安装"><a href="#Git-下载-与-安装" class="headerlink" title="Git 下载 与 安装"></a>Git 下载 与 安装</h3><h4 id="Linux下的安装"><a href="#Linux下的安装" class="headerlink" title="Linux下的安装"></a>Linux下的安装</h4><blockquote>
<p>打开终端 执行 yum install git 然后键入 yes 等待既可以安装完成 Git</p>
</blockquote>
<h2 id="入门Github"><a href="#入门Github" class="headerlink" title="入门Github"></a>入门Github</h2><blockquote>
<p>GitHub由于下载比较难，推荐离线安装包安装</p>
</blockquote>
<h3 id="Linux下检出项目到本地"><a href="#Linux下检出项目到本地" class="headerlink" title="Linux下检出项目到本地"></a>Linux下检出项目到本地</h3><blockquote>
<p>使用 git clone Github上的仓库地址</p>
<ol>
<li>首先创建一个 目录，用来存放 我们检出的项目，使用命令 mkdir Test</li>
<li>接下来，进入到Test目录，然后 git clone Github上的仓库地址，就可以了</li>
</ol>
</blockquote>
<h3 id="Linux下提交项目"><a href="#Linux下提交项目" class="headerlink" title="Linux下提交项目"></a>Linux下提交项目</h3><blockquote>
<p>再修改之后，只停留到了本地，没有交到Github维护，因此我们需要同步到Github</p>
</blockquote>
<ol>
<li>首先使用 git status 查看工作区的状态</li>
<li>对于未跟踪的文件，使用git add 文件名（不包括文件类型），进行跟踪</li>
<li>然后键入 git commit 命令，并对修改进行描述，这里提交的是提交到了本地的仓库，并没有提交给Github维护</li>
<li>键入git push，输入Github账户和密码，然后成功提交给Github进行维护</li>
</ol>
<h3 id="Windows下检出并提交项目"><a href="#Windows下检出并提交项目" class="headerlink" title="Windows下检出并提交项目"></a>Windows下检出并提交项目</h3><ol>
<li>首先进入GitHub官方主页，并进入项目所对应的仓库主页，然后点击 open in desktop，选择本地的一个目录，此时检出完成，只需要我们对其进行修改</li>
<li>修改之后，首先要做的提交修改的东东，并对修改的东西进行一个修改说明</li>
<li>之后进行同步就可以了</li>
</ol>
]]></content>
      
        <categories>
            
            <category> git </category>
            
            <category> 入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> GitHub </tag>
            
            <tag> 版本管理工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[版本管理工具-Git篇[1]]]></title>
      <url>/2017/01/15/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-Git%E7%AF%87%5B1%5D/</url>
      <content type="html"><![CDATA[<h2 id="版本管理工具的介绍"><a href="#版本管理工具的介绍" class="headerlink" title="版本管理工具的介绍"></a>版本管理工具的介绍</h2><p>作用：备份文件，与U盘等备份文件相比，可以随时随地，项目中经常使用。</p>
<h3 id="版本管理工具可以记录历史"><a href="#版本管理工具可以记录历史" class="headerlink" title="版本管理工具可以记录历史"></a>版本管理工具可以记录历史</h3><p>网盘 u盘 保存了文件的最新状态，而不会记录修改的历史纪录，而版本管理工具对每次的修改都会进行备份，并且保留了时间和修改人，可以让我们回溯，如果不小心删除版本管理工具中的备份时，我们可以通过历史纪录对其进行找回，因此使用版本管理工具无需担心，而且使用版本管理工具，可以多端共享，例如我们经常所说的云盘，而且只要提交一次，我们就可以在任何地方通过版本管理工具对提交的代码进行下载。尤其对于，一些经常需要分开工作的工作人员比较实用</p>
<a id="more"></a>
<h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><figure class="image-box">
                <img src="http://on3w7gc9m.bkt.clouddn.com/psb.png" alt="这里写图片描述" title class>
                <p>这里写图片描述</p>
            </figure>
<ol>
<li><p>CVS： 版本管理工具始祖，也是被第一个大规模使用的版本管理工具。由荷兰一所大学教授所开发，由于当时三个人分开工作，为了便于一起协调，创建了CVS。集中式的工具，放到中心服务器上，需要联网</p>
</li>
<li><p>SVN： 2000年诞生，也是集中式的工具</p>
</li>
<li><p>git： 2005年诞生，Geek社区主流工具，分布式工具！</p>
</li>
<li><p>Github： 程序员社区，托管代码基于Git操作。大牛多在这里！！！</p>
</li>
</ol>
<h3 id="集中式-与-分布式-区别"><a href="#集中式-与-分布式-区别" class="headerlink" title="集中式 与 分布式 区别"></a>集中式 与 分布式 区别</h3><ol>
<li>集中式需要放到中心服务器上，并且操作需要联网，不方便</li>
<li>分布式则是只要有版本库，就可以在不联网的前提下，快速完成文件提交，记录查看，以及删除等操作，效率高！</li>
</ol>
<hr>
<h2 id="初探Git"><a href="#初探Git" class="headerlink" title="初探Git"></a>初探Git</h2><h3 id="Git-下载-与-安装"><a href="#Git-下载-与-安装" class="headerlink" title="Git 下载 与 安装"></a>Git 下载 与 安装</h3><h4 id="Linux下的安装"><a href="#Linux下的安装" class="headerlink" title="Linux下的安装"></a>Linux下的安装</h4><blockquote>
<p>打开终端 执行 yum install git 然后键入 yes 等待既可以安装完成 Git</p>
</blockquote>
<h2 id="入门Github"><a href="#入门Github" class="headerlink" title="入门Github"></a>入门Github</h2><blockquote>
<p>GitHub由于下载比较难，推荐离线安装包安装</p>
</blockquote>
<h3 id="Linux下检出项目到本地"><a href="#Linux下检出项目到本地" class="headerlink" title="Linux下检出项目到本地"></a>Linux下检出项目到本地</h3><blockquote>
<p>使用 git clone Github上的仓库地址</p>
<ol>
<li>首先创建一个 目录，用来存放 我们检出的项目，使用命令 mkdir Test</li>
<li>接下来，进入到Test目录，然后 git clone Github上的仓库地址，就可以了</li>
</ol>
</blockquote>
<h3 id="Linux下提交项目"><a href="#Linux下提交项目" class="headerlink" title="Linux下提交项目"></a>Linux下提交项目</h3><blockquote>
<p>再修改之后，只停留到了本地，没有交到Github维护，因此我们需要同步到Github</p>
</blockquote>
<ol>
<li>首先使用 git status 查看工作区的状态</li>
<li>对于未跟踪的文件，使用git add 文件名（不包括文件类型），进行跟踪</li>
<li>然后键入 git commit 命令，并对修改进行描述，这里提交的是提交到了本地的仓库，并没有提交给Github维护</li>
<li>键入git push，输入Github账户和密码，然后成功提交给Github进行维护</li>
</ol>
<h3 id="Windows下检出并提交项目"><a href="#Windows下检出并提交项目" class="headerlink" title="Windows下检出并提交项目"></a>Windows下检出并提交项目</h3><ol>
<li>首先进入GitHub官方主页，并进入项目所对应的仓库主页，然后点击 open in desktop，选择本地的一个目录，此时检出完成，只需要我们对其进行修改</li>
<li>修改之后，首先要做的提交修改的东东，并对修改的东西进行一个修改说明</li>
<li>之后进行同步就可以了</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Java]-8]]></title>
      <url>/2017/01/02/Java-8/</url>
      <content type="html"><![CDATA[<h2 id="Util包"><a href="#Util包" class="headerlink" title="Util包"></a>Util包</h2><h3 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h3><h4 id="nextInt-方法"><a href="#nextInt-方法" class="headerlink" title="nextInt()方法"></a>nextInt()方法</h4><p>范围只是包含【0，输入的数字）；生成一个输入数字以内的随机整数</p>
<h4 id="Date-类，SimpleDateFormat类，以及Calendar类"><a href="#Date-类，SimpleDateFormat类，以及Calendar类" class="headerlink" title="Date 类，SimpleDateFormat类，以及Calendar类"></a>Date 类，SimpleDateFormat类，以及Calendar类</h4><blockquote>
<p>1.Date 类最主要的作用就是获得当前时间，同时这个类里面也具有设置时间以及一些其他的功能，但是由于本身设计的问题，这些方法却遭到众多批评，不建议使用，更推荐使用<br>Calendar 类进行时间和日期的处理。</p>
<ol start="2">
<li>由于Date类中，许多方法已经过时，因此现在我们通常用Date来保存时间，而使用Calendar来修改时间</li>
<li>格式化时间通常使用Date类以及SimpleDateFormat类<br>使用 Date 类的默认无参构造方法创建出的对象就代表当前时间，我们可以直接输出 Date 对象显示当前的时间</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Date d = <span class="keyword">new</span> Date();</span><br><span class="line">		System.out.println(d);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*输出 Sat Jan 14 19:13:41 CST 2017*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Sat 代表 Saturday (星期六)， Jan 代表 January (一月)， 14代表 14 号， CST 代表 China Standard Time (中国标准时间，也就是北京时间，东八区)。</p>
<a id="more"></a>
<h4 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h4><h5 id="将日期格式化，并以字符串形式输出"><a href="#将日期格式化，并以字符串形式输出" class="headerlink" title="将日期格式化，并以字符串形式输出"></a>将日期格式化，并以字符串形式输出</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Date d = <span class="keyword">new</span> Date();</span><br><span class="line">		System.out.println(d);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd号 HH时mm分ss秒"</span>);</span><br><span class="line">		String s = sdf.format(d);</span><br><span class="line">		System.out.println(s);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>这里年，月，号，时，分，秒 可以自由换符号表示，可以换成 - 等等，也就是分隔符可以自由切换，但是英文字固定</li>
<li><strong>需要注意的是格式化日期的时候 yyyy代表年份，mm代表分钟，MM代表月份，dd代表号，HH代表24小时制度的时，hh代表12进制的时，ss代表秒</strong></li>
</ol>
</blockquote>
<h5 id="将字符串格式的日期转换为系统默认格式输出"><a href="#将字符串格式的日期转换为系统默认格式输出" class="headerlink" title="将字符串格式的日期转换为系统默认格式输出"></a>将字符串格式的日期转换为系统默认格式输出</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line"></span><br><span class="line">		String s = <span class="string">"2016年12月14号 19时28分34秒"</span>;</span><br><span class="line">		SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd号 HH时mm分ss秒"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		Date date = sdf.parse(s);</span><br><span class="line">		System.out.println(date);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将日期格式化系统格式的时候，需要注意声明异常</p>
</blockquote>
<hr>
<h3 id="Calendar类的使用"><a href="#Calendar类的使用" class="headerlink" title="Calendar类的使用"></a>Calendar类的使用</h3><blockquote>
<p>java.util.Calendar 类是一个抽象类，可以<strong>通过调用 getInstance() 静态方法获取一个 Calendar 对象</strong>，此对象已由当前日期时间初始化，即默认代表当前时间，如 <strong>Calendar c = Calendar.getInstance()</strong>;这里很深刻的体现了<strong>Java设计模式中的单例模式</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*1.得到系统当前时间*/</span></span><br><span class="line">		Date date = <span class="keyword">new</span> Date();</span><br><span class="line">		Calendar calendar = Calendar.getInstance();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*2.把要修改的时间给cal,同时进行修改*/</span></span><br><span class="line">		calendar.setTime(date);</span><br><span class="line">		calendar.set(calendar.YEAR, <span class="number">2016</span>);</span><br><span class="line">		calendar.set(calendar.MONTH, <span class="number">11</span>);</span><br><span class="line">		calendar.set(calendar.DATE, <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*3.修改完成后转换成Date进行保存*/</span></span><br><span class="line">		date = calendar.getTime();</span><br><span class="line">		System.out.println(date);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Calendar修改的时候，需要我们注意几个问题，月份的值是 0-11，而且一个月份的天数超过，则会自动进入下个月</p>
</blockquote>
<hr>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><blockquote>
<p>集合长度随时可以改变，动态数组中，增长因子默认为10，大小改变，元素不变，将原先的数组复制到该数组</p>
</blockquote>
<figure class="image-box">
                <img src="http://on3w7gc9m.bkt.clouddn.com/collcetion.png" alt="这里写图片描述" title class>
                <p>这里写图片描述</p>
            </figure>
<p>Collection 是集合类的根接口，其中下辖子接口 List , Set, Queue.</p>
<h3 id="动态数组-与-动态链表-区别"><a href="#动态数组-与-动态链表-区别" class="headerlink" title="动态数组 与 动态链表 区别"></a>动态数组 与 动态链表 区别</h3><p>动态数组：增删效率低，查询效率高，<strong>物理（实际的位置）和逻辑（花名册上的位置）均相邻，所以查询效率高</strong></p>
<p>动态链表：增删效率高，查询效率低，<strong>物理不相邻，逻辑相邻，所以查询效率低</strong></p>
<h3 id="ArrayList-与-Vector-区别"><a href="#ArrayList-与-Vector-区别" class="headerlink" title="ArrayList 与 Vector 区别"></a>ArrayList 与 Vector 区别</h3><p>ArrayList ： 异步（允许同一时间操作）<br>Vector ： 同步（不允许同一时间操作）</p>
<h3 id="同步与异步区别"><a href="#同步与异步区别" class="headerlink" title="同步与异步区别"></a>同步与异步区别</h3><p>同步：一个接一个，效率低，安全性高<br>异步：一起，效率高，安全性低</p>
<hr>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>例题一： 图书馆借阅时间判断合法性</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">		Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"请输入借书时间："</span>);</span><br><span class="line">		String s = input.nextLine();<span class="comment">/*只能扫描输入一行*/</span></span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"请输入还书时间："</span>);</span><br><span class="line">		String s1 = input.nextLine();</span><br><span class="line"></span><br><span class="line">		SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH-mm-ss"</span>);</span><br><span class="line"></span><br><span class="line">		Date date = sdf.parse(s);</span><br><span class="line"></span><br><span class="line">		Date date1 = sdf.parse(s1);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>( date.getTime() &gt; date1.getTime() )</span><br><span class="line">			System.out.println(<span class="string">"借书成功！"</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			System.out.println(<span class="string">"借书失败！"</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Util基本类的使用 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[[Java]-7]]></title>
      <url>/2016/12/30/Java-7/</url>
      <content type="html"><![CDATA[<h2 id="Java中类与类之间的转换"><a href="#Java中类与类之间的转换" class="headerlink" title="Java中类与类之间的转换"></a>Java中类与类之间的转换</h2><blockquote>
<p><strong>类与类之间的转换如果要强转，则必须要有继承关系</strong>。否则，编译器会报出，ClassCastException异常</p>
</blockquote>
<h3 id="包装类之间的转换"><a href="#包装类之间的转换" class="headerlink" title="包装类之间的转换"></a>包装类之间的转换</h3><blockquote>
<p>思路是：将包装类进行拆箱，转换成基础数据类型之后，再进行转换，最后进行装箱</p>
</blockquote>
<p>例如：Integer与Double的转换</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Integer a = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">int</span> b = a;</span><br><span class="line">		<span class="keyword">double</span> m = b;</span><br><span class="line">		Double c = m;</span><br><span class="line">		System.out.println(c);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h2 id="String类详解"><a href="#String类详解" class="headerlink" title="String类详解"></a>String类详解</h2><blockquote>
<ol>
<li>String类也是Java中的lang包中的一个类，众所周知，lang包中的所有类都不需要导入就可以使用，<strong>String类与System,Scanner类一样，都是Java中的一个预定义类型，而且String类是一个引用类型，任何Java类型都可以将变量表示为引用类型。使用引用类型声明的变量都是引用变量，引用在一个对象里。</strong></li>
<li>String 类中 hashcode根据内容而生成（<strong>生成方式不同，即使生成内容相同，也不能说地址相同）</strong></li>
<li>字节是计算机存储信息的基本单位，1 个字节等于 8 位， gbk 编码中 1 个汉字字符存储需要 2 个字节，1 个英文字符存储需要 1 个字节。所以我们看到上面的程序运行结果中，每个汉字对应两个字节值，如“学”对应 “-47 -89” ，而英文字母 “J” 对应 “74” 。同时，我们还发现汉字对应的字节值为负数，原因在于每个字节是 8 位，最大值不能超过 127，而汉字转换为字节后超过127，如果超过就会溢出，以负数的形式显示。</li>
</ol>
</blockquote>
<p>例如 ： 代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Object object = <span class="keyword">new</span> Object();</span><br><span class="line">		System.out.println(object.hashCode());</span><br><span class="line">		Integer integer = <span class="keyword">new</span> Integer(<span class="number">7051261</span>);</span><br><span class="line">		System.out.println(integer.hashCode());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建的两种形式"><a href="#创建的两种形式" class="headerlink" title="创建的两种形式"></a>创建的两种形式</h3><ol>
<li>常量池中创建（内容唯一，不允许重复出现，在编译的时候就可以确定）</li>
<li>堆中创建（在JVM中只存在一个堆，但是在运行时才可以确定）<br><strong>在堆中创建的时候，一般做两件事：第一，检查常量池是否存在与其相同的。第二，如果有则直接复制过来，如果没有，在堆中新建，并且保存常量池</strong></li>
</ol>
<blockquote>
<ol>
<li>从大体上来讲，Java中的内存分为 常量池，堆，以及栈（存放引用，也就是我们常说的遥控器，花名册），关于进一步内存详解，<a href="http://www.cnblogs.com/xiohao/p/4296088.html" target="_blank" rel="noopener">请移步</a></li>
<li>一旦一个字符串在内存中创建，则这个字符串将不可改变。如果需要一个可以改变的字符串，我们可以使用StringBuffer或者StringBuilder（后面章节中会讲到）。</li>
</ol>
</blockquote>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><blockquote>
<ol>
<li><strong>常量池中创建的 String 对象创建后则不能被修改，是不可变的，所谓的修改其实是创建了新的副本，则会在常量池中产生一个副本，所指向的内存空间不同</strong></li>
<li>另外需要注意的是 ： String类中重写了equals方法，比较的是内容是否相同，而 == 判断的是地址是否相同，也就是哈希码是否相同</li>
<li>常量在编译中就可以确定，但是变量在运行时才可以确定</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">/*编译时就已经创建，并且放在常量池中*/</span></span><br><span class="line">		String str = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*执行时才会确定，因此放到堆中*/</span></span><br><span class="line">		String str2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">		String s = <span class="string">"a"</span> + <span class="string">"bc"</span>;<span class="comment">/* 等同于 String s = "abc";  //编译的时候这里会进行优化 s = abc*/</span></span><br><span class="line">		String s4 = s + str ;<span class="comment">/*运行时确定的值放堆中 */</span></span><br><span class="line"></span><br><span class="line">		System.out.println(str == str2);       <span class="comment">/*false*/</span></span><br><span class="line">		System.out.println(str.equals(str2));  <span class="comment">/*true*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="image-box">
                <img src="http://img.mukewang.com/53d9f7d200010bb007780366.jpg" alt="字符串中的方法" title class>
                <p>字符串中的方法</p>
            </figure>
<h3 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h3><ol>
<li>使用方法并没有赋值，因此结果仍然不变</li>
<li>使用charAt 方法的时候不要越界</li>
<li>使用 indexOf 进行字符或字符串查找时，如果匹配返回位置索引；如果没有匹配结果，返回 -1</li>
<li>使用 substring(beginIndex , endIndex) 进行字符串截取时，包括 beginIndex 位置的字符，不包括 endIndex 位置的字符，因此如果只是截取之后的字符，直接使用 subString(int beginIndex)</li>
<li><strong>数组中，length是属性，而String类中，length()是方法，</strong></li>
<li>intern() 方法是将字符串对象放入到常量池中，如果已经存在，则返回池中的字符串。</li>
<li>String类中的trim()方法去除的是前后两端的空白字符，包括字符’ ‘,’\t’,’\r’,’\n’</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="string">"a"</span>;</span><br><span class="line">		s = s.concat(<span class="string">"bc"</span>);</span><br><span class="line">		System.out.println(s.equals(<span class="string">"abc"</span>));</span><br><span class="line">		String s2 = <span class="string">"abc"</span>;</span><br><span class="line">		System.out.println(s==s2);</span><br><span class="line"></span><br><span class="line">		System.out.println(s2.startsWith(<span class="string">"ab"</span>));<span class="comment">/*是否以小写ab开头*/</span></span><br><span class="line">		System.out.println(<span class="string">"ABC"</span>.equals(s2));</span><br><span class="line">		System.out.println(<span class="string">"ABC"</span>.equalsIgnoreCase(s2));<span class="comment">/*忽略大小写，看是否匹配，具体查看API*/</span></span><br><span class="line"></span><br><span class="line">		String s11 = <span class="string">"hello"</span>;</span><br><span class="line">		String s12 = s11.concat(<span class="string">" world"</span>);</span><br><span class="line">		System.out.println(s11);<span class="comment">/*hello*/</span></span><br><span class="line">		System.out.println(s12);<span class="comment">/*hello world*/</span></span><br><span class="line">		String s13 = <span class="keyword">new</span> String(<span class="string">"indei"</span>);</span><br><span class="line">		s13.intern();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>这里讲述了转义符，以及replaceAll方法的使用，”.” 号作为通配符，指的是所有的</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test11</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="string">"http://www.baidu.com"</span>;</span><br><span class="line">		String s1 = s;</span><br><span class="line">		s = s.replaceAll(<span class="string">"\\."</span>, <span class="string">" "</span>);		</span><br><span class="line">		<span class="comment">/*这里使用双\转义，使用两个\，首先对一个\进行转译，然后只有一个\.  再通过\对点号进行转义*/</span></span><br><span class="line"></span><br><span class="line">		System.out.println(s);	<span class="comment">/*http://www baidu com*/</span></span><br><span class="line">		System.out.println(s1); <span class="comment">/*http://www.baidu.com*/</span></span><br><span class="line"></span><br><span class="line">		s1 = s1.replace(<span class="string">"."</span>, <span class="string">""</span>);</span><br><span class="line">		System.out.println();   <span class="comment">/*输出为空*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="trim方法"><a href="#trim方法" class="headerlink" title="trim方法"></a>trim方法</h3><p>使用trim 方法需要注意，只能去掉首尾两个地方的空格，不可以去掉其他地方的空格</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String  s = <span class="string">"  hello world!  "</span>;</span><br><span class="line"></span><br><span class="line">		System.out.println(s.trim());</span><br><span class="line">		<span class="comment">/*hello world!*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="contact方法：拼接字符串"><a href="#contact方法：拼接字符串" class="headerlink" title="contact方法：拼接字符串"></a>contact方法：拼接字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test16</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="string">"abc"</span>;</span><br><span class="line">		s = s + <span class="string">"de"</span>;</span><br><span class="line">		s = s + <span class="string">"fg"</span>;</span><br><span class="line">		System.out.println(s);</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"abc"</span>);</span><br><span class="line">		sb.append(<span class="string">"de"</span>);</span><br><span class="line">		System.out.println(sb);</span><br><span class="line"></span><br><span class="line">		String s2 = sb.toString();</span><br><span class="line">		System.out.println(s2);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从代码中我们可以看到，当频繁操作字符串时，就会额外产生很多临时变量。<strong>容易产生很多垃圾内存</strong>。使用 StringBuilder 或 StringBuffer 就可以避免这个问题。至于 StringBuilder 和StringBuffer ，它们基本相似，不同之处，<strong>StringBuffer 是线程安全的，而 StringBuilder 则没有实现线程安全功能，所以性能略高</strong>。因此一般情况下，<strong>如果需要创建一个内容可变的字符串对象，应优先考虑使用 StringBuilder 类。</strong></p>
<hr>
<p>练习一：</p>
<blockquote>
<p>判断邮件格式以及Java源代码文件名是否合法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	        <span class="comment">/*Java文件名*/</span></span><br><span class="line">			String fileName = <span class="string">"HelloWorld.java"</span>;</span><br><span class="line">		    <span class="comment">/* 邮箱*/</span></span><br><span class="line">			String email = <span class="string">"laurenyang@imooc.com"</span>;</span><br><span class="line"></span><br><span class="line">			<span class="comment">/* 判断.java文件名是否正确：合法的文件名应该以.java结尾*/</span></span><br><span class="line">		    <span class="comment">/*</span></span><br><span class="line"><span class="comment">		    参考步骤：</span></span><br><span class="line"><span class="comment">		    1、获取文件名中最后一次出现"."号的位置</span></span><br><span class="line"><span class="comment">		    2、根据"."号的位置，获取文件的后缀</span></span><br><span class="line"><span class="comment">		    3、判断"."号位置及文件后缀名</span></span><br><span class="line"><span class="comment">		    */</span></span><br><span class="line">		    <span class="comment">/*获取文件名中最后一次出现"."号的位置*/</span></span><br><span class="line">			<span class="keyword">int</span> index = fileName.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line"></span><br><span class="line">		    <span class="comment">/* 获取文件的后缀*/</span></span><br><span class="line">			String prefix = fileName.substring(index + <span class="number">1</span>, fileName.length());</span><br><span class="line">		    System.out.println(prefix.equals(<span class="string">"java"</span>));</span><br><span class="line">			<span class="comment">/* 判断必须包含"."号，且不能出现在首位，同时后缀名为"java"*/</span></span><br><span class="line">			<span class="keyword">if</span> (    index != -<span class="number">1</span> &amp;&amp; index != <span class="number">0</span> &amp;&amp;     prefix.equals(<span class="string">"java"</span>)  ) &#123;</span><br><span class="line">				System.out.println(<span class="string">"Java文件名正确"</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">"Java文件名无效"</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		    <span class="comment">/* 判断邮箱格式是否正确：合法的邮箱名中至少要包含"@", 并且"@"是在"."之前*/</span></span><br><span class="line">		     <span class="comment">/*</span></span><br><span class="line"><span class="comment">		    参考步骤：</span></span><br><span class="line"><span class="comment">		    1、获取文件名中"@"符号的位置</span></span><br><span class="line"><span class="comment">		    2、获取邮箱中"."号的位置</span></span><br><span class="line"><span class="comment">		    3、判断必须包含"@"符号，且"@"必须在"."之前</span></span><br><span class="line"><span class="comment">		    */</span></span><br><span class="line">		    <span class="comment">/* 获取邮箱中"@"符号的位置*/</span></span><br><span class="line">				<span class="keyword">int</span> index2 = email.indexOf(<span class="string">'@'</span>);</span><br><span class="line"></span><br><span class="line">		    <span class="comment">/* 获取邮箱中"."号的位置*/</span></span><br><span class="line">			<span class="keyword">int</span> index3 = email.indexOf(<span class="string">'.'</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">/*判断必须包含"@"符号，且"@"必须在"."之前*/</span></span><br><span class="line">			<span class="keyword">if</span> (index2 != -<span class="number">1</span> &amp;&amp; index3 &gt; index2) &#123;</span><br><span class="line">				System.out.println(<span class="string">"邮箱格式正确"</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">"邮箱格式无效"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>练习二：</p>
<blockquote>
<p>生成随机验证码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prac</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*方法一：自己写*/</span></span><br><span class="line">		String s1 = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(s1.charAt((<span class="keyword">int</span>)(Math.random() * <span class="number">63</span> )));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*方法二：推荐使用的方法*/</span></span><br><span class="line">		String s = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line">		Random random = <span class="keyword">new</span> Random();</span><br><span class="line">		<span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">char</span> ch = s.charAt(random.nextInt(<span class="number">26</span>));</span><br><span class="line">			chs[i] = ch;</span><br><span class="line">		&#125;</span><br><span class="line">		String code = <span class="keyword">new</span> String(chs);</span><br><span class="line">		System.out.println(code);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：方法二将验证码保存了，方法与用户输入进行比对，然而方法一只是完成了生成验证码的任务，没有按照用户体验考虑</p>
<h2 id="String与基本数据类型之间的转换"><a href="#String与基本数据类型之间的转换" class="headerlink" title="String与基本数据类型之间的转换"></a>String与基本数据类型之间的转换</h2><h3 id="String与int-类型之间的转换"><a href="#String与int-类型之间的转换" class="headerlink" title="String与int 类型之间的转换"></a>String与int 类型之间的转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">'a'</span> + <span class="string">'b'</span>);<span class="comment">/*这里返回的是a与b的Ascii码的和*/</span></span><br><span class="line">		<span class="comment">/*整数转字符串*/</span></span><br><span class="line">		<span class="comment">/*方法一*/</span></span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">		String s = a + <span class="string">""</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*方法二*/</span></span><br><span class="line">		Integer i = a;</span><br><span class="line">		String s1 = i.toString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">/*字符串转整数*/</span></span><br><span class="line">		<span class="keyword">int</span> a1 = Integer.parseInt(s);</span><br><span class="line">		System.out.println(a1);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 基础 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows常用命令]]></title>
      <url>/2016/12/25/Windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="CMD命令："><a href="#CMD命令：" class="headerlink" title="CMD命令："></a>CMD命令：</h2><blockquote>
<p>开始－&gt;运行－&gt;键入cmd或command（在命令行里可以看到系统版本、文件系统版本）</p>
</blockquote>
<ul>
<li>appwiz.cpl：程序和功能</li>
<li>calc：启动计算器</li>
<li>certmgr.msc：证书管理实用程序</li>
<li>charmap：启动字符映射表</li>
<li>chkdsk.exe：Chkdsk磁盘检查（管理员身份运行命令提示符）</li>
<li>cleanmgr: 打开磁盘清理工具</li>
<li>cliconfg：SQL SERVER 客户端网络实用工具</li>
<li>cmstp：连接管理器配置文件安装程序</li>
<li>cmd.exe：CMD命令提示符</li>
</ul>
<a id="more"></a>
<h3 id="自动关机命令"><a href="#自动关机命令" class="headerlink" title="自动关机命令"></a>自动关机命令</h3><ul>
<li>Shutdown -s -t 600：表示600秒后自动关机</li>
<li>shutdown -a ：可取消定时关机</li>
<li>Shutdown -r -t 600：表示600秒后自动重启</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>rundll32 user32.dll,LockWorkStation：表示锁定计算机</p>
<p>colorcpl：颜色管理，配置显示器和打印机等中的色彩</p>
<p>CompMgmtLauncher：计算机管理</p>
<p>compmgmt.msc：计算机管理</p>
<p>credwiz：备份或还原储存的用户名和密码</p>
<p>comexp.msc：打开系统组件服务</p>
<p>control：控制面版</p>
<p>dcomcnfg：打开系统组件服务</p>
<p>Dccw：显示颜色校准</p>
<p>devmgmt.msc：设备管理器</p>
<p>desk.cpl：屏幕分辨率</p>
<p>dfrgui：优化驱动器 Windows 7→dfrg.msc：磁盘碎片整理程序</p>
<p>dialer：电话拨号程序</p>
<p>diskmgmt.msc：磁盘管理</p>
<p>dvdplay：DVD播放器</p>
<p>dxdiag：检查DirectX信息</p>
<p>eudcedit：造字程序</p>
<p>eventvwr：事件查看器</p>
<p>explorer：打开资源管理器</p>
<p>Firewall.cpl：Windows防火墙</p>
<p>FXSCOVER：传真封面编辑器</p>
<p>fsmgmt.msc：共享文件夹管理器</p>
<p>gpedit.msc：组策略</p>
<p>hdwwiz.cpl：设备管理器</p>
<p>inetcpl.cpl：Internet属性</p>
<p>intl.cpl：区域</p>
<p>iexpress：木马捆绑工具，系统自带</p>
<p>joy.cpl：游戏控制器</p>
<p>logoff：注销命令</p>
<p>lusrmgr.msc：本地用户和组</p>
<p>lpksetup：语言包安装/删除向导，安装向导会提示下载语言包</p>
<p>lusrmgr.msc：本机用户和组</p>
<p>main.cpl：鼠标属性</p>
<p>mmsys.cpl：声音</p>
<p>magnify：放大镜实用程序</p>
<p>mem.exe：显示内存使用情况（如果直接运行无效，可以先管理员身份运行命令提示符，在命令提示符里输入mem.exe&gt;d:a.txt 即可打开d盘查看a.txt，里面的就是内存使用情况了。当然什么盘什么文件名可自己决定。）</p>
<p>MdSched:Windows内存诊断程序</p>
<p>mmc：打开控制台</p>
<p>mobsync：同步命令</p>
<p>mplayer2：简易widnows media player</p>
<p>Msconfig.exe：系统配置实用程序<br>msdt：微软支持诊断工具</p>
<p>msinfo32：系统信息</p>
<p>mspaint：画图</p>
<p>Msra：Windows远程协助</p>
<p>mstsc：远程桌面连接</p>
<p>NAPCLCFG.MSC：客户端配置</p>
<p>ncpa.cpl：网络连接</p>
<p>narrator：屏幕“讲述人”</p>
<p>Netplwiz：高级用户帐户控制面板，设置登陆安全相关的选项</p>
<p>netstat : an(TC)命令检查接口</p>
<p>notepad：打开记事本</p>
<p>Nslookup：IP地址侦测器</p>
<p>odbcad32：ODBC数据源管理器</p>
<p>OptionalFeatures：打开“打开或关闭Windows功能”对话框</p>
<p>osk：打开屏幕键盘</p>
<p>perfmon.msc：计算机性能监测器</p>
<p>perfmon：计算机性能监测器</p>
<p>PowerShell：提供强大远程处理能力</p>
<p>printmanagement.msc：打印管理</p>
<p>powercfg.cpl：电源选项</p>
<p>psr：问题步骤记录器</p>
<p>Rasphone：网络连接</p>
<p>Recdisc：创建系统修复光盘</p>
<p>Resmon：资源监视器</p>
<p>Rstrui：系统还原</p>
<p>regedit.exe：注册表</p>
<p>regedt32：注册表编辑器</p>
<p>rsop.msc：组策略结果集</p>
<p>sdclt：备份状态与配置，就是查看系统是否已备份</p>
<p>secpol.msc：本地安全策略</p>
<p>services.msc：本地服务设置</p>
<p>sfc /scannow：扫描错误并复原/windows文件保护</p>
<p>sfc.exe：系统文件检查器</p>
<p>shrpubw：创建共享文件夹</p>
<p>sigverif：文件签名验证程序</p>
<p>slui：Windows激活，查看系统激活信息</p>
<p>slmgr.vbs -dlv ：显示详细的许可证信息</p>
<p>　 slmgr.vbs -dli ：显示许可证信息</p>
<p>　 slmgr.vbs -xpr ：当前许可证截止日期</p>
<p>　 slmgr.vbs -dti ：显示安装ID 以进行脱机激</p>
<p>　 slmgr.vbs -ipk ：(Product Key)安装产品密钥</p>
<p>　 slmgr.vbs -ato ：激活Windows</p>
<p>　 slmgr.vbs -cpky ：从注册表中清除产品密钥（防止泄露引起的攻击）</p>
<p>　 slmgr.vbs -ilc ：(License file)安装许可证</p>
<p>　 slmgr.vbs -upk ：卸载产品密钥</p>
<p>　 slmgr.vbs -skms ：(name[ort] )批量授权</p>
<p>snippingtool：截图工具，支持无规则截图</p>
<p>soundrecorder：录音机，没有录音时间的限制</p>
<p>StikyNot：便笺</p>
<p>sysdm.cpl：系统属性</p>
<p>sysedit：系统配置编辑器</p>
<p>syskey：系统加密，一旦加密就不能解开，保护系统的双重密码</p>
<p>taskmgr：任务管理器（旧版）</p>
<p>TM任务管理器（新版）</p>
<p>taskschd.msc：任务计划程序</p>
<p>timedate.cpl：日期和时间</p>
<p>UserAccountControlSettings用户账户控制设置</p>
<p>utilman：辅助工具管理器</p>
<p>wf.msc：高级安全Windows防火墙</p>
<p>WFS：Windows传真和扫描</p>
<p>wiaacmgr：扫描仪和照相机向导</p>
<p>winver：关于Windows</p>
<p>wmimgmt.msc：打开windows管理体系结构(WMI)</p>
<p>write：写字板</p>
<p>wscui.cpl：操作中心</p>
<p>wscript：windows脚本宿主设置</p>
<p>wuapp：Windows更新</p>
<p>gpedit.msc—–组策略</p>
<p>sndrec32——-录音机</p>
<p>Nslookup——-IP地址侦测器 ，是一个 监测网络中 DNS 服务器是否能正确实现域名解析的命令行工具。 它在 Windows NT/2000/XP 中均可使用 , 但在 Windows 98 中却没有集成这一个工具。</p>
<p>explorer——-打开资源管理器</p>
<p>logoff———注销命令</p>
<p>shutdown——-60秒倒计时关机命令</p>
<p>lusrmgr.msc—-本机用户和组</p>
<p>services.msc—本地服务设置</p>
<p>oobe/msoobe /a—-检查XP是否激活</p>
<p>notepad——–打开记事本</p>
<p>cleanmgr——-垃圾整理</p>
<p>net start messenger—-开始信使服务</p>
<p>compmgmt.msc—计算机管理</p>
<p>net stop messenger—–停止信使服务</p>
<p>conf———–启动netmeeting</p>
<p>dvdplay——–DVD播放器</p>
<p>charmap——–启动字符映射表</p>
<p>diskmgmt.msc—磁盘管理实用程序</p>
<p>calc———–启动计算器</p>
<p>dfrg.msc——-磁盘碎片整理程序</p>
<p>chkdsk.exe—–Chkdsk磁盘检查</p>
<p>devmgmt.msc— 设备管理器</p>
<p>regsvr32 /u *.dll—-停止dll文件运行</p>
<p>drwtsn32—— 系统医生</p>
<p>rononce -p—-15秒关机</p>
<p>dxdiag———检查DirectX信息</p>
<p>regedt32——-注册表编辑器</p>
<p>Msconfig.exe—系统配置实用程序</p>
<p>rsop.msc——-组策略结果集</p>
<p>mem.exe——–显示内存使用情况</p>
<p>regedit.exe—-注册表</p>
<p>winchat——–XP自带局域网聊天</p>
<p>progman——–程序管理器</p>
<p>winmsd———系统信息</p>
<p>perfmon.msc—-计算机性能监测程序</p>
<p>winver———检查Windows版本</p>
<p>sfc /scannow—–扫描错误并复原</p>
<p>taskmgr—–任务管理器（2000/xp/2003</p>
<p>winver———检查Windows版本</p>
<p>wmimgmt.msc—-打开windows管理体系结构(WMI)</p>
<p>wupdmgr——–windows更新程序</p>
<p>wscript——–windows脚本宿主设置</p>
<p>write———-写字板</p>
<p>winmsd———系统信息</p>
<p>wiaacmgr——-扫描仪和照相机向导</p>
<p>winchat——–XP自带局域网聊天</p>
<p>mem.exe——–显示内存使用情况</p>
<p>Msconfig.exe—系统配置实用程序</p>
<p>mplayer2——-简易widnows media player</p>
<p>mspaint——–画图板</p>
<p>mstsc———-远程桌面连接</p>
<p>mplayer2——-媒体播放机</p>
<p>magnify——–放大镜实用程序</p>
<p>mmc————打开控制台</p>
<p>mobsync——–同步命令</p>
<p>dxdiag———检查DirectX信息</p>
<p>iexpress——-木马捆绑工具，系统自带 58. fsmgmt.msc—–共享文件夹管理器</p>
<p>utilman——–辅助工具管理器</p>
<p>diskmgmt.msc—磁盘管理实用程序</p>
<p>dcomcnfg——-打开系统组件服务</p>
<p>ddeshare——-打开DDE共享设置</p>
<p>osk————打开屏幕键盘</p>
<p>odbcad32——-ODBC数据源管理器</p>
<p>oobe/msoobe /a—-检查XP是否激活 114. logoff———注销命令</p>
<p>notepad——–打开记事本</p>
<p>nslookup——-网络管理的工具向导</p>
<p>ntbackup——-系统备份和还原</p>
<p>narrator——-屏幕“讲述人”</p>
<p>ntmsmgr.msc—-移动存储管理器</p>
<p>ntmsoprq.msc—移动存储管理员操作请求</p>
<p>netstat -an—-(TC)命令检查接口</p>
<p>syncapp——–创建一个公文包</p>
<p>sysedit——–系统配置编辑器</p>
<p>sigverif——-文件签名验证程序</p>
<p>ciadv.msc——索引服务程序</p>
<p>shrpubw——–创建共享文件夹</p>
<p>secpol.msc—–本地安全策略</p>
<p>syskey———系统加密，一旦加密就不能解开，保护windows xp系统的双重密码</p>
<p>services.msc—本地服务设置</p>
<p>Sndvol32——-音量控制程序</p>
<p>sfc.exe——–系统文件检查器</p>
<p>sfc /scannow—windows文件保护</p>
<p>ciadv.msc——索引服务程序</p>
<p>tourstart——xp简介（安装完成后出现的漫游xp程序）</p>
<p>taskmgr——–任务管理器</p>
<p>eventvwr——-事件查看器</p>
<p>eudcedit——-造字程序</p>
<p>compmgmt.msc—计算机管理</p>
<p>packager——-对象包装程序</p>
<p>perfmon.msc—-计算机性能监测程序</p>
<p>charmap——–启动字符映射表</p>
<p>cliconfg——-SQL SERVER 客户端网络实用程序</p>
<p>Clipbrd——–剪贴板查看器</p>
<p>conf———–启动netmeeting</p>
<p>certmgr.msc—-证书管理实用程序</p>
<p>regsvr32 /u *.dll—-停止dll文件运行</p>
<p>regsvr32 /u zipfldr.dll——取消ZIP支持</p>
<p>cmd.exe——–CMD命令提示符</p>
<p>chkdsk.exe—–Chkdsk磁盘检查</p>
<hr>
<h3 id="基本的操作命令："><a href="#基本的操作命令：" class="headerlink" title="基本的操作命令："></a>基本的操作命令：</h3><h4 id="磁盘操作"><a href="#磁盘操作" class="headerlink" title="磁盘操作"></a>磁盘操作</h4><p>　　fdisk 隐含 参数 /mbr 重建主引导记录fdisk /mbr 重建主引导记录</p>
<p>　　fdisk 在DOS7.0以后增加了/cmbr参数，可在挂接多个物理硬盘时，重建排序在后面的硬盘的主引导记录，例如：fdisk /cmbr 2，可重写第二个硬盘的主引导记录。（在使用时要十分小心，避免把好的硬盘引导记录损坏）</p>
<p>　　format 参数： /q 快速格式化 /u 不可恢复 /autotest 不提示 /s 创建 MS-DOS 引导盘 format c: /q /u /autotest</p>
<hr>
<h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><ul>
<li><p>DIR [目录名或文件名] [/S][/W][/P][/A] 列出目录 参数: /s 查找子目录/w 只显示文件名 /p 分页/a 显示隐藏文件 DIR format.exe /s查找该盘的format.exe文件并报告位置</p>
</li>
<li><p>MD (MKDIR) [目录名] 创建目录 MKDIR HELLOWORLD 创建HELLOWORLD目录</p>
</li>
<li><p>CD (CHDIR) [目录名] PS:可以使用相对目录或绝对目录 进入目录 CD AA 进入当前文件夹下的AA目录,cd .. 进入上一个文件夹cd \返回根目录;cd c:\windows 进入c:\windows文件夹</p>
</li>
<li><p>RD ( RMDIR) [目录名] 删除目录 RD HELLOWORLD 删除HELLOWORLD目录</p>
</li>
</ul>
<hr>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul>
<li><p>删除目录及其文件： rmdir [目录名或文件名] [/S][/W][/P][/A] 。例 rmdir c:\qqdownload/s 删除C盘的qqdownload目录。</p>
</li>
<li><p>del [目录名或文件名] [/f][/s][/q] 删除 参数:/f 删除只读文件/s 删除该目录及其下的所有内容 /q 删除前不确认</p>
</li>
<li><p>del c:\del /s /q 自动删除c盘的del目录。</p>
</li>
<li><p>copy [源文件或目录] [目标目录] 复制文件 copy d:\pwin98<em>.</em> c:\presetup 将d盘的pwin98的所有文件复制到c盘的presetup下。</p>
</li>
<li><p>attrib [参数][源文件或目录] 文件属性操作命令，attrib命令可以列出或修改磁盘上文件的属性，文件属性包括文档（A）、只读(R)、隐藏(H)、系统(S)，例如：attrib -h -r -s io.sys 执行这一命令后，将把DOS系统文件io.sys文件的只读、隐藏、系统属性去掉，这时将可以直接通过dir命令看到io.sys文件。attrib +h +r +s autoexec.bat将为自动批处理文件增加以上属性。</p>
</li>
</ul>
<hr>
<h3 id="内存操作"><a href="#内存操作" class="headerlink" title="内存操作"></a>内存操作</h3><ul>
<li><p>debug 调试内存 参数 -w [文件名] 写入二进制文件 -o [地址1] [地址2] 输出内存 -q 退出 exp:o 70 10[return] o 71 01</p>
</li>
<li><p>[return] 01[return] q[return] DOS下通过写70h/71h PORT改变BIOS密码在CMOS中存放的对应位置的值,用以清除AWARD BIOS密码.debug 还可以破解硬盘保护卡等,但只可以在纯DOS下用。</p>
</li>
</ul>
<hr>
<h3 id="分区操作"><a href="#分区操作" class="headerlink" title="分区操作"></a>分区操作</h3><blockquote>
<p>给磁盘分区，一般都会分成四个区，磁盘分区由主分区、扩展分区、逻辑分区组成。</p>
</blockquote>
<p>PQ和Acronis Disk Director这两个工具都可以在不丢失数据的情况下对分区进行调整大小，以及合并等操作，XP系统的话你用PQ，WIN7系统的话用Acronis Disk Director 操作基本一样，可以去网上找教程来看看，再不重装系统的情况下都能调整分区大小，但是建议你还是先备份下数据再调整，毕竟对硬盘直接进行的操作有一定的危险性。</p>
<p>　　net use ipipc$ “ “ /user:” “ 建立IPC空链接</p>
<p>　　net use ipipc$ “密码” /user:”用户名” 建立IPC非空链接</p>
<p>　　net use h: ipc$ “密码” /user:”用户名” 直接登陆后映射对方C：到本地为H:</p>
<p>　　net use h: ipc$ 登陆后映射对方C：到本地为H:</p>
<p>　　net use ipipc$ /del 删除IPC链接</p>
<p>　　net use h: /del 删除映射对方到本地的为H:的映射</p>
<p>　　net user 用户名　密码　/add 建立用户</p>
<p>　　net user guest /active:yes 激活guest用户</p>
<p>　　net user 查看有哪些用户</p>
<p>　　net user 帐户名 查看帐户的属性</p>
<p>　　net localgroup administrators 用户名 /add 把“用户”添加到管理员中使其具有管理员权限</p>
<p>　　net start 查看开启了哪些服务</p>
<p>　　net start 服务名　开启服务；(如:net start telnet， net start schedule)</p>
<p>　　net stop 服务名 停止某服务</p>
<p>　　net time 目标ip 查看对方时间</p>
<p>　　net time 目标ip /set 设置本地计算机时间与“目标IP”主机的时间同步,加上参数/yes可取消确认信息</p>
<p>　　net view 查看本地局域网内开启了哪些共享</p>
<p>　　net view ip 查看对方局域网内开启了哪些共享</p>
<p>　　net config 显示系统网络设置</p>
<p>　　net logoff 断开连接的共享</p>
<p>　　net pause 服务名 暂停某服务</p>
<p>　　net send ip “文本信息” 向对方发信息</p>
<p>　　net ver 局域网内正在使用的网络连接类型和信息</p>
<p>　　net share 查看本地开启的共享</p>
<p>　　net share ipc开启ipc共享</p>
<p>　　net share ipc/del删除ipc共享</p>
<p>　　net share c$ /del 删除C：共享</p>
<p>　　net user guest 12345 用guest用户登陆后用将密码改为12345</p>
<p>　　net password 密码 更改系统登陆密码</p>
<p>　　netstat -a 查看开启了哪些端口,常用netstat -an</p>
<p>　　netstat -n 查看端口的网络连接情况，常用netstat -an</p>
<p>　　netstat -v 查看正在进行的工作</p>
<p>　　netstat -p 协议名 例：netstat -p tcq/ip 查看某协议使用情况</p>
<p>　　netstat -s 查看正在使用的所有协议使用情况</p>
<p>　　nbtstat -A ip 对方136到139其中一个端口开了的话，就可查看对方最近登陆的用户名</p>
<p>　　tracert -参数 ip(或计算机名) 跟踪路由（数据包），参数：“-w数字”用于设置超时间隔。</p>
<p>　　ping ip(或域名) 向对方主机发送默认大小为32字节的数据，参数：“-l[空格]数据包大小”；“-n发送数据次数”；“-t”指一直ping。</p>
<p>　　ping -t -l 65550 ip 死亡之ping(发送大于64K的文件并一直ping就成了死亡之ping)</p>
<p>　　ipconfig (winipcfg) 用于windows NT及XP(windows 95 98)查看本地ip地址，ipconfig可用参数“/all”显示全部配置信息</p>
<p>　　tlist -t 以树行列表显示进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内)</p>
<p>　　kill -F 进程名 加-F参数后强制结束某进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内)</p>
<p>　　del -F 文件名 加-F参数后就可删除只读文件,/AR、/AH、/AS、/AA分别表示删除只读、隐藏、系统、存档文件，/A-R、/A-H、/A-S、/A-A表示删除除只读、隐藏、系统、存档以外的文件。例如“DEL/AR .”表示删除当前目录下所有只读文件，“DEL/A-S .”表示删除当前目录下除系统文件以外的所有文件</p>
<p>　　del /S /Q 目录 或用：rmdir /s /Q 目录 /S删除目录及目录下的所有子目录和文件。同时使用参数/Q 可取消删除操作时的系统确认就直接删除。（二个命令作用相同）</p>
<p>　　move 盘符路径要移动的文件名　存放移动文件的路径移动后文件名 移动文件,用参数/y将取消确认移动目录存在相同文件的提示就直接覆盖</p>
<p>　　fc one.txt two.txt &gt; 3st.txt 对比二个文件并把不同之处输出到3st.txt文件中，”&gt; “和”&gt; &gt;” 是重定向命令</p>
<p>　　at id号 开启已注册的某个计划任务</p>
<p>　　at /delete 停止所有计划任务，用参数/yes则不需要确认就直接停止</p>
<p>　　at id号 /delete 停止某个已注册的计划任务</p>
<p>　　at 查看所有的计划任务</p>
<p>　　at ip time 程序名(或一个命令) /r 在某时间运行对方某程序并重新启动计算机</p>
<p>　　finger username @host 查看最近有哪些用户登陆</p>
<p>　　telnet ip 端口 远和登陆服务器,默认端口为23</p>
<p>　　open ip 连接到IP（属telnet登陆后的命令）</p>
<p>　　telnet 在本机上直接键入telnet 将进入本机的telnet</p>
<p>　　copy 路径文件名1　路径文件名2 /y 复制文件1到指定的目录为文件2，用参数/y就同时取消确认你要改写一份现存目录文件</p>
<p>　　copy c:srv.exe ipadmin$ 复制本地c:srv.exe到对方的admin下</p>
<p>　　copy 1st.jpg/b+2st.txt/a 3st.jpg 将2st.txt的内容藏身到1st.jpg中生成3st.jpg新的文件，注：2st.txt文件头要空三排，参数：/b指二进制文件，/a指ASCLL格式文件</p>
<p>　　copy ipadminsvv.exec:或:copyipadmin. 复制对方admini$共享下的srv.exe文件（所有文件）至本地C：</p>
<p>　　xcopy 要复制的文件或目录树　目标地址目录名 复制文件和目录树，用参数/Y将不提示覆盖相同文件</p>
<p>　　用参数/e才可连目录下的子目录一起复制到目标地址下。</p>
<p>　　tftp -i 自己IP(用肉机作跳板时这用肉机IP) get server.exec:server.exe 登陆后，将“IP”的server.exe下载到目标主机c:server.exe 参数：-i指以二进制模式传送，如传送exe文件时用，如不加-i 则以ASCII模式（传送文本文件模式）进行传送</p>
<p>　　tftp -i 对方IP　put c:server.exe 登陆后，上传本地c:server.exe至主机</p>
<p>　　ftp ip 端口 用于上传文件至服务器或进行文件操作，默认端口为21。bin指用二进制方式传送（可执行文件进）；默认为ASCII格式传送(文本文件时)</p>
<p>　　route print 显示出IP路由，将主要显示网络地址Network addres，子网掩码Netmask，网关地址Gateway addres，接口地址Interface</p>
<p>　　arp 查看和处理ARP缓存，ARP是名字解析的意思，负责把一个IP解析成一个物理性的MAC地址。arp -a将显示出全部信息</p>
<p>　　start 程序名或命令 /max 或/min 新开一个新窗口并最大化（最小化）运行某程序或命令</p>
<p>　　mem 查看cpu使用情况</p>
<p>　　attrib 文件名(目录名) 查看某文件（目录）的属性</p>
<p>　　attrib 文件名 -A -R -S -H 或 +A +R +S +H 去掉(添加)某文件的 存档，只读，系统，隐藏 属性；用+则是添加为某属性</p>
<p>　　dir 查看文件，参数：/Q显示文件及目录属系统哪个用户，/T:C显示文件创建时间，/T:A显示文件上次被访问时间，/T:W上次被修改时间</p>
<p>　　date /t 、 time /t 使用此参数即“DATE/T”、“TIME/T”将只显示当前日期和时间，而不必输入新日期和时间</p>
<p>　　set 指定环境变量名称=要指派给变量的字符 设置环境变量</p>
<p>　　set 显示当前所有的环境变量</p>
<p>　　set p(或其它字符) 显示出当前以字符p(或其它字符)开头的所有环境变量</p>
<p>　　pause 暂停批处理程序，并显示出：请按任意键继续….</p>
<p>　　if 在批处理程序中执行条件处理（更多说明见if命令及变量）</p>
<p>　　goto 标签 将cmd.exe导向到批处理程序中带标签的行（标签必须单独一行，且以冒号打头，例如：“：start”标签）</p>
<p>　　call 路径批处理文件名 从批处理程序中调用另一个批处理程序 （更多说明见call /?）</p>
<p>　　for 对一组文件中的每一个文件执行某个特定命令（更多说明见for命令及变量）</p>
<p>　　echo on或off 打开或关闭echo，仅用echo不加参数则显示当前echo设置</p>
<p>　　echo 信息 在屏幕上显示出信息</p>
<p>　　echo 信息 &gt;&gt; pass.txt 将”信息”保存到pass.txt文件中</p>
<p>　　findstr “Hello” aa.txt 在aa.txt文件中寻找字符串hello</p>
<p>　　find 文件名 查找某文件</p>
<p>　　title 标题名字 更改CMD窗口标题名字</p>
<p>　　color 颜色值 设置cmd控制台前景和背景颜色；0=黑、1=蓝、2=绿、3=浅绿、4=红、5=紫、6=黄、7=白、8=灰、9=淡蓝、A=淡绿、B=淡浅绿、C=淡红、D=淡紫、E=淡黄、F=亮白</p>
<p>　　prompt 名称 更改cmd.exe的显示的命令提示符(把C:、D:统一改为：EntSky )</p>
<p>　　ver 在DOS窗口下显示版本信息</p>
<p>　　winver 弹出一个窗口显示版本信息（内存大小、系统版本、补丁版本、计算机名）</p>
<p>　　format 盘符 /FS:类型 格式化磁盘,类型:FAT、FAT32、NTFS ,例：Format D: /FS:NTFS</p>
<p>　　md　目录名 创建目录</p>
<p>　　replace 源文件　要替换文件的目录 替换文件</p>
<p>　　ren 原文件名　新文件名 重命名文件名</p>
<p>　　tree 以树形结构显示出目录，用参数-f 将列出第个文件夹中文件名称</p>
<p>　　type 文件名 显示文本文件的内容</p>
<p>　　more 文件名 逐屏显示输出文件</p>
<p>　　doskey 要锁定的命令=字符</p>
<p>　　doskey 要解锁命令= 为DOS提供的锁定命令(编辑命令行，重新调用win2k命令，并创建宏)。如：锁定dir命令：doskey dir=entsky (不能用doskey dir=dir)；解锁：doskey dir=</p>
<p>　　taskmgr 调出任务管理器</p>
<p>　　chkdsk /F D: 检查磁盘D并显示状态报告；加参数/f并修复磁盘上的错误</p>
<p>　　tlntadmn telnt服务admn,键入tlntadmn选择3，再选择8,就可以更改telnet服务默认端口23为其它任何端口</p>
<p>　　exit 退出cmd.exe程序或目前，用参数/B则是退出当前批处理脚本而不是cmd.exe</p>
<p>　　path 路径可执行文件的文件名 为可执行文件设置一个路径。</p>
<p>　　cmd 启动一个win2K命令解释窗口。参数：/eff、/en 关闭、开启命令扩展；更我详细说明见cmd /?</p>
<p>　　regedit /s 注册表文件名 导入注册表；参数/S指安静模式导入，无任何提示；</p>
<p>　　regedit /e 注册表文件名 导出注册表</p>
<p>　　cacls 文件名　参数 显示或修改文件访问控制列表（ACL）——针对NTFS格式时。参数：/D 用户名:设定拒绝某用户访问；/P 用户名:perm 替换指定用户的访问权限；/G 用户名:perm 赋予指定用户访问权限；Perm 可以是: N 无，R 读取， W 写入， C 更改(写入)，F 完全控制；例：cacls D: est.txt /D pub 设定d: est.txt拒绝pub用户访问。</p>
<p>　　cacls 文件名 查看文件的访问用户权限列表</p>
<p>　　REM 文本内容 在批处理文件中添加注解</p>
<p>　　netsh 查看或更改本地网络配置情况</p>
]]></content>
      
        <categories>
            
            <category> 常用命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CMD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo常用命令]]></title>
      <url>/2016/12/25/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>这里收录了一些常用的Hexo命令，经常用到</p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>npm install hexo -g #安装<br>npm update hexo -g #升级<br>hexo init #初始化</p>
<a id="more"></a>
<p>注意：需要node.js环境</p>
<hr>
<h2 id="新建博客目录"><a href="#新建博客目录" class="headerlink" title="新建博客目录"></a>新建博客目录</h2><p>hexo init blog #生成一个blog目录</p>
<p>注解：在 hexo 目录下生成blog文件夹，包含 node_modules、scaffolds、source、themes、.gitignore、_config.yml、db.json、package.json，其中 _config.yml 为全局配置文件</p>
<hr>
<h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><p>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo p == hexo publish<br>hexo g == hexo generate#生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy#部署</p>
<hr>
<h2 id="新建文件夹（或者说是页面）（自动在文件夹下新建index-md）"><a href="#新建文件夹（或者说是页面）（自动在文件夹下新建index-md）" class="headerlink" title="新建文件夹（或者说是页面）（自动在文件夹下新建index.md）"></a>新建文件夹（或者说是页面）（自动在文件夹下新建index.md）</h2><p>hexo new page file<br>hexo new page “file”<br>INFO Created: D:…\blog\source\file\index.md</p>
<hr>
<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>hexo n fileName<br>hexo new “fileName”<br>hexo new post fileName<br>hexo new post “fileName”<br>INFO Created: D:…\blog\source_posts\fileName.md</p>
<hr>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP</p>
<p>备注：4000为默认端口，若站点 _config.yml 中 修改配置 root: /blog/ ，即访问地址对应为 htto://localhost:4000/blog/</p>
<p>hexo clean #清除缓存 网页正常情况下可以忽略此条命令<br>hexo g #生成静态网页<br>hexo d #开始部署</p>
<hr>
<h2 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h2><p>hexo generate #使用 Hexo 生成静态文件快速而且简单<br>hexo generate –watch #监视文件变动</p>
]]></content>
      
        <categories>
            
            <category> 常用命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Java]-6]]></title>
      <url>/2016/12/25/Java-6/</url>
      <content type="html"><![CDATA[<h2 id="常用JAVA开发工具"><a href="#常用JAVA开发工具" class="headerlink" title="常用JAVA开发工具"></a>常用JAVA开发工具</h2><ul>
<li>MyEclipse：收费软件，不过内部集成了很强大的插件，从而称霸武林(使用MyEclipse出错时，可以使用 ctrl + 1 快捷键来提示错误 )</li>
<li>Eclipse：开源软件</li>
</ul>
<blockquote>
<p>作为一个J2EE工作者，我很希望MyEclipse能够开源，毕竟Eclipse都开源了</p>
</blockquote>
<h2 id="Java中的包"><a href="#Java中的包" class="headerlink" title="Java中的包"></a>Java中的包</h2><blockquote>
<p>说到JAVA中的包，其实类似于我们windows系统下的文件夹</p>
</blockquote>
<ol>
<li>包的作用如下<ol>
<li>不同文件夹下的文件可以重名</li>
<li>方便对文件进行管理</li>
</ol>
</li>
<li>使用包的注意事项：<ol>
<li>包名要全部小写，经常倒着写，例如，可以用网站名字倒着写</li>
<li>不建议使用默认包</li>
</ol>
</li>
</ol>
<h2 id="lang-包"><a href="#lang-包" class="headerlink" title="lang 包"></a>lang 包</h2><blockquote>
<p>lang包作为JAVA语言最基础的包之一，下辖了许多类和方法可以供我们使用，其中最长使用的类是Object类，Math类，以及基本数据类型的包装类，下面我们将对这两个进行讲解</p>
</blockquote>
<a id="more"></a>
<h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><blockquote>
<p>JAVA中的类都是单继承，这里说的单继承是指每个类只能有一个直接父类，而且JAVA中的Object类虽然是每个类的子类，但是每个类的直接父类并不一定是Object类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">	<span class="comment">//例如在这个类中,直接父类是Animal，因此直接父类是Animal，并不是Object</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="clone-方法讲解"><a href="#clone-方法讲解" class="headerlink" title="clone() 方法讲解"></a>clone() 方法讲解</h4><blockquote>
<p>API 中这样说道 ：“创建并返回此对象的一个副本。”</p>
</blockquote>
<h5 id="使用的注意事项："><a href="#使用的注意事项：" class="headerlink" title="使用的注意事项："></a><strong>使用的注意事项：</strong></h5><blockquote>
<ol>
<li>clone（）返回的是一个Object类型，因此我们需要将类型进行转换，转成我们所需要的类型，作为一个设计人员，因为在写clone（）方法的时候，我们不知道如何该方法返回一个何类型，所以先返回Object类型，再进行强转</li>
<li>需要声明异常CloneNotSupportedException</li>
<li>在使用clone（）的类中，我们实现接口Cloneable</li>
</ol>
</blockquote>
<h5 id="结果注意事项："><a href="#结果注意事项：" class="headerlink" title="结果注意事项："></a><strong>结果注意事项：</strong></h5><ol>
<li>通过clone方法得到的副本，除了地址不同之外其他与原来的一样，克隆生成的是两个独立的对象，可以通过hashcode（）来进行判断，hashcode（）相同则为同一个对象，因为hashcode就是根据地址来生成的</li>
<li>通过clone方法克隆叫做浅度克隆，也就是只克隆基本数据类型，并且值相等，而引用数据类型，我们将不会克隆，但是在深度克隆中，我们将会将引用数据类型以及基本类型都克隆，从而产生新对象，深度克隆通过JAVA中的流来实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">		Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">		Dog dog2 = (Dog) dog.clone();</span><br><span class="line">		System.out.println(dog2.age);</span><br><span class="line">		<span class="comment">//10</span></span><br><span class="line">		System.out.println(dog == dog2);</span><br><span class="line">		<span class="comment">//false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="equals-方法与-讲解"><a href="#equals-方法与-讲解" class="headerlink" title="equals()方法与 == 讲解"></a>equals()方法与 == 讲解</h4><h5 id="使用的注意事项：-1"><a href="#使用的注意事项：-1" class="headerlink" title="使用的注意事项："></a><strong>使用的注意事项：</strong></h5><ol>
<li>equals方法在Object类中，比较的是两个对象的地址（因为在其他类中，我们可能会对equals（）方法重写），==永远比较两个对象的地址</li>
<li>equals方法在包装类中 比较的是 内容</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">		Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">		Dog dog2 = (Dog) dog.clone();</span><br><span class="line">		System.out.println(dog.equals(dog2));</span><br><span class="line">		<span class="comment">//false</span></span><br><span class="line">		System.out.println(dog == dog2);</span><br><span class="line">		<span class="comment">//false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="finalize"><a href="#finalize" class="headerlink" title="finalize()"></a>finalize()</h4><blockquote>
<p>API中说到：当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。 JAVA中的垃圾内存：没有引用指向的内存<br>通过finalize（）：释放对象，回收内存， 而且JAVA是自动回收内存的，不需要程序员实现，比C/C++痛苦轻多了</p>
</blockquote>
<h5 id="使用的注意事项：-2"><a href="#使用的注意事项：-2" class="headerlink" title="使用的注意事项："></a>使用的注意事项：</h5><ol>
<li>需要有垃圾</li>
<li>需要启动垃圾回收器 System.gc();</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span>  </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">super</span>.finalize();</span><br><span class="line">		System.out.println(<span class="string">"垃圾被回收了"</span>);		<span class="comment">//有垃圾</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		Dog dog = <span class="keyword">new</span> Dog();   <span class="comment">//所谓的垃圾内存</span></span><br><span class="line">		dog = <span class="keyword">new</span> Dog();</span><br><span class="line">		System.gc();		<span class="comment">//充当了一个垃圾回收人员来主动收垃圾</span></span><br><span class="line">		<span class="comment">//输出：垃圾被回收了</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果分析：有的由于JDK版本不同，偶尔会输出“垃圾被回收了”，因为这里垃圾回收涉及到了JAVA中的一个线程，而且JAVA中垃圾的回收就是通过一个线程进行管理，线程不会时时刻刻都会处在管理状态</p>
<hr>
<h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><ol>
<li>ceil（）：向上取整（大于该数的最小整数）</li>
<li>floor（）：向上取整（大于该数的最小整数）</li>
<li>round（）：加上0.5，去掉小数点之后的东西，也就是四舍五入</li>
<li>Random（）：随机生成一个【0，1.0）的数字</li>
</ol>
<h4 id="Math中涉及到的关于JAVA中的单例设计模式："><a href="#Math中涉及到的关于JAVA中的单例设计模式：" class="headerlink" title="Math中涉及到的关于JAVA中的单例设计模式："></a>Math中涉及到的关于JAVA中的单例设计模式：</h4><p>类似于Math类，我们只需要对其构造函数进行私有化，因此我们只能在该类中对其进行实例化，所以称为单例设计模式，也就是只允许有1个对象，因为该类所占空间太大，使用单例设计模式的最直接表现就是私有化该类的构造函数，因此属性和方法我们将会加上static修饰符</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Math math1 = <span class="keyword">new</span> Math();<span class="comment">//这里会报错</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>包装类中，== 在new 和 不 new的时候有区分</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Integer integer = <span class="number">10</span>;</span><br><span class="line">		Integer integer2 = <span class="keyword">new</span> Integer(<span class="string">"10"</span>);</span><br><span class="line">		System.out.println(integer == integer2);</span><br><span class="line">		System.out.println(integer.hashCode());</span><br><span class="line">		System.out.println(integer2.hashCode());</span><br><span class="line">		System.out.println(integer.equals(integer2));</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		*false</span></span><br><span class="line"><span class="comment">		*10</span></span><br><span class="line"><span class="comment">		*10</span></span><br><span class="line"><span class="comment">		*true</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><blockquote>
<p>包装类：所谓的JAVA中的基本数据类型中所对应，进行包装而成的类</p>
</blockquote>
<p><strong>装箱：基本数据类型转换为对应包装类型的过程</strong><br><strong>拆箱：包装类型转换为基本数据类型的过程</strong></p>
<p><strong>包装类中，hashcode根据对象内容生成</strong></p>
<blockquote>
<p>JDK1.4的时候，需要手动进行拆箱和装箱，并且1.4不支持注解</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Integer integer = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">		Integer integer1 = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">		System.out.println(integer);</span><br><span class="line">		<span class="comment">//10</span></span><br><span class="line">		System.out.println(integer1);</span><br><span class="line">		<span class="comment">//10</span></span><br><span class="line">		<span class="comment">//在JDK1.4中，需要我们手动拆装箱</span></span><br><span class="line">		<span class="keyword">int</span> i = integer1;</span><br><span class="line">		System.out.println(i);</span><br><span class="line">		<span class="comment">//10</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要注意的是：在JDK5.0之后，JAVA引入了自动装箱和拆箱</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Integer integer = <span class="number">10</span>;</span><br><span class="line">		Integer integer1 = <span class="number">10</span>;</span><br><span class="line">		System.out.println(integer);</span><br><span class="line">		<span class="comment">//10</span></span><br><span class="line">		System.out.println(integer1);</span><br><span class="line">		<span class="comment">//10</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用的注意事项：-3"><a href="#使用的注意事项：-3" class="headerlink" title="使用的注意事项："></a>使用的注意事项：</h4><p>看到拆装箱这么自如，是不是很想用包装类呢，但是这里需要注意：能用基本数据类型解决问题，我们就用基本数据类型，因为基本数据类型效率高，占用空间小，比如我们项目中所涉及到的客户端传参</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 基础 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[[Android]-目录字典]]></title>
      <url>/2016/12/25/Android-%E7%9B%AE%E5%BD%95%E5%AD%97%E5%85%B8/</url>
      <content type="html"><![CDATA[<h2 id="src"><a href="#src" class="headerlink" title="src"></a>src</h2><p>存放Android应用程序源代码的文件，通过在该文件夹下，通常创建包来进行区分不同的功能，在相应的包写上对应功能的程序代码，比如将服务，广播，还有活动区别分来</p>
<a id="more"></a>
<hr>
<h2 id="gen"><a href="#gen" class="headerlink" title="gen"></a>gen</h2><p>gen文件夹是由应用程序自动生成的配置文件，不需要去手动修改</p>
<p>gen文件夹下面的R.java文件是该Android 应用程序资源管理文件，也就是通俗的字典，该文件将所有资源生成相对应的唯一的ID，可以通过ID对与其对应的资源进行引用</p>
<p>说到R.java 有时候可能无法正常生成R.java 自已有过亲身经历，自从修改了ADT之后，问题就消失了</p>
<hr>
<h2 id="assets"><a href="#assets" class="headerlink" title="assets:"></a>assets:</h2><p>该文件会放一些资源文件，例如多媒体文件</p>
<p>下面讲到的res文件夹也可以存放资源, 不过assets 与 res有一些实质性的区别：</p>
<p>assests下的资源文件不会自动生成资源ID 和占用apk(Android发布的可执行文件) 空间</p>
<p>assests文件可以通过AssetsManager类进行访问，存放到这里的资源在运行打包的时候都会打入程序安装包中</p>
<hr>
<h2 id="bin"><a href="#bin" class="headerlink" title="bin:"></a>bin:</h2><p>存放编译后的文件，例如 apk,dex(Android上可执行文件的类型),class,资源文件等</p>
<hr>
<h2 id="libs"><a href="#libs" class="headerlink" title="libs:"></a>libs:</h2><p>存放第三方使用到的JAVA架包</p>
<hr>
<h2 id="res"><a href="#res" class="headerlink" title="res:"></a>res:</h2><p>存放各种类型的资源文件，包含不同的目录<br>drawble:存放图片文件，但是由于设备的不同，需要存放不同分辨率下的图片，ldpi–&gt;mdpi–&gt;hdpi–&gt;xhdpi–&gt;xxhdpi 分辨率由低到高<br>layout:存放布局问文件<br>menu:存放菜单文件<br>values：<br>dimens:存放尺寸大小<br>strings:存放字符串资源<br>styles:存放主题或者样式<br>colors:存放颜色</p>
<hr>
<h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><p>这是android项目的系统清单文件，也是整个android应用的全局描述文件。清单文件说明了android应用的名称、所使用的图标以及包含的组件等，</p>
<hr>
<h2 id="proguard-project-txt"><a href="#proguard-project-txt" class="headerlink" title="proguard-project.txt:"></a>proguard-project.txt:</h2><p>代码混淆相关文件</p>
<hr>
<h2 id="project-properties："><a href="#project-properties：" class="headerlink" title="project.properties："></a>project.properties：</h2><p>工程属性的配置文件，配置编译的版本等</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Java]-5]]></title>
      <url>/2016/12/23/Java-5/</url>
      <content type="html"><![CDATA[<p><strong>注意: 在JAVA方法中，不允许再定义方法，只可以调用</strong></p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><table><thead><tr><th>访问修饰符</th><th style="text-align:right">所有类</th><th style="text-align:center">当前包以及不同包的子类</th><th>同包的类</th><th>当前类</th></tr></thead><tr align="center"><td>public</td><td style="text-align:right">Y</td><td style="text-align:center">Y</td><td>Y</td><td>Y</td></tr><tr align="center"><td>protected</td><td style="text-align:right">N</td><td style="text-align:center">Y</td><td>Y</td><td>Y</td></tr><tr align="center"><td>默认(不写)</td><td style="text-align:right">N</td><td style="text-align:center">N</td><td>Y</td><td>Y</td></tr><tr align="center"><td>private</td><td style="text-align:right">N</td><td style="text-align:center">N</td><td>N</td><td>N</td></tr></table>


<blockquote>
<p>其实访问修饰符就是帮助JAVA实现封装，封装就是我们生活中的包装，例如食物不包装会腐烂，汽车不包装会生锈，但是在JAVA中，我们封装可以提高安全性，可以避免恶意程序的调用，当然完全封装也不利于我们对功能的实现，所以我们在封装的时候，会留下接口，其实接口就是我们在封装所设置的set以及get方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：JAVA中方法的重写时，子类方法的访问修饰符   &gt;=   父类的访问修饰符</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h3><ol>
<li>首先创建一个Animal类</li>
<li>创建一个Tiger类</li>
<li>创建一个Test类</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Animal类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Tiger类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tiger</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">	 <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Tiger tiger = <span class="keyword">new</span> Tiger();</span><br><span class="line">		tiger.sayHello();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果：编译报错，因为子类访问权限低于父类访问权限</p>
</blockquote>
<hr>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote>
<p>方法的重载和覆盖都属于多态</p>
</blockquote>
<hr>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote>
<p>接口在我们做一些小型项目的时候，不会常用到，但是在做一些大型项目的时候，我们经常会用到，尤其是接口的应用，一定程度上决定了项目的好坏，以及延展性，这里我们将对接口进行一些介绍</p>
</blockquote>
<ul>
<li>接口只是一个规范，只要求要做什么，没有要求我们如何去做（得到的一个结论就是扩展性强，从而一定程度上弥补了JAVA中单继承的缺点）</li>
<li>JAVA中的接口与接口之间是多继承的关系，也就是一个接口可以有多个父接口，但是类与类之间是单继承</li>
<li>接口中的方法不能有方法体</li>
<li><strong>通过文件定义接口的时候，注意接口名字与文件名前缀相同</strong></li>
<li>接口的作用：被类实现，该类叫做接口的实现类，实现类也会获取接口中的方法和属性</li>
<li><strong>非抽象类实现接口，必须对接口中的抽象方法进行实现</strong></li>
<li>关于接口中的变量以及方法，看下面代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> foot = <span class="number">4</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进行反编译后的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> foot;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结论：JAVA中的接口，变量前面自动加上了public static final 修饰符，方法加上了public abstract 修饰符，并且我们不写修饰符的时候也会自动加上！</p>
</blockquote>
<hr>
<h2 id="常用关键字"><a href="#常用关键字" class="headerlink" title="常用关键字"></a>常用关键字</h2><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><ul>
<li>修饰属性 和 方法：可以通过类直接调用</li>
<li>修饰类: 只能是内部类</li>
<li>静态块：在类加载的时候执行（也就是在主方法执行前执行）</li>
<li>静态成员(包括属性和方法)不能访问非静态成员(包括属性和方法)，因为静态成员优先于非静态成- 员分配内存</li>
<li>静态成员在内存中公共（所有对象都可以对其进行操作，并且结果保留），并且唯一（在内存中只有一份，被大家一起所有，而不是像其他属性，对象才有）</li>
</ul>
<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><ul>
<li>修饰类：该类不能有子类</li>
<li>修饰属性：表示属性不能被重新赋值，也就是所说的常量</li>
<li>修饰方法：该方法不能被重写（覆盖）</li>
</ul>
<h3 id="abstract关键字"><a href="#abstract关键字" class="headerlink" title="abstract关键字"></a>abstract关键字</h3><ul>
<li>修饰类：该类是抽象类，不能被实例化</li>
<li>修饰方法：该方法是抽象方法，不能有方法体，例如 public abstract void setAge(int age);</li>
</ul>
<blockquote>
<ul>
<li>有抽象方法的类一定是抽象类，抽象类不一定有抽象方法</li>
<li>抽象类作用就在于可以被继承</li>
<li>abstract 和 final关键字不可以共存</li>
</ul>
</blockquote>
<h4 id="instanceof-关键字使用-返回-true-或者-false"><a href="#instanceof-关键字使用-返回-true-或者-false" class="headerlink" title="instanceof 关键字使用:(返回 true 或者 false)"></a>instanceof 关键字使用:(返回 true 或者 false)</h4><blockquote>
<p>基本语法：对象 instanceof 类名</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	Test t1 = <span class="keyword">new</span> Test();</span><br><span class="line">	System.out.println(t1 <span class="keyword">instanceof</span> Test);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//打印结果为true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="约定名称书写规范"><a href="#约定名称书写规范" class="headerlink" title="约定名称书写规范"></a>约定名称书写规范</h2><blockquote>
<ul>
<li>全部大写：常量名字</li>
<li>全部小写：工程名字 包名字</li>
<li>Pascal命名法： 每个单词首字母大写 类名</li>
<li>驼峰命名法: 第一个单词首字母小写，其他单词首字母全部大写 方法名字，以及类的属性</li>
</ul>
</blockquote>
<hr>
<h2 id="类成员执行优先级顺序："><a href="#类成员执行优先级顺序：" class="headerlink" title="类成员执行优先级顺序："></a>类成员执行优先级顺序：</h2><ul>
<li><strong>static 优先于 非static</strong></li>
<li><strong>同级别 属性&gt;块&gt;主方法&gt;普通方法 构造方法的话得看他调用的先后</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Test t1 = <span class="keyword">new</span> Test();</span><br><span class="line">		t1.a=<span class="number">500</span>;</span><br><span class="line">		System.out.println(<span class="string">"a:"</span>+t1.a);			<span class="comment">//500</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">b</span></span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">c</span></span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OOP </tag>
            
            <tag> static </tag>
            
            <tag> final </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Java]-怪题-1]]></title>
      <url>/2016/12/22/Java-%E6%80%AA%E9%A2%98-1/</url>
      <content type="html"><![CDATA[<h2 id="例题一："><a href="#例题一：" class="headerlink" title="例题一："></a>例题一：</h2><p>不使用中间变量的情况下将两个数字进行交换并成功输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exchange</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">   <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*方法一：通过加减法进行交换*/</span></span><br><span class="line">   a = a + b;</span><br><span class="line">   b = a - b;</span><br><span class="line">   a = a - b;</span><br><span class="line">   System.out.println(<span class="string">"a:"</span> + a + <span class="string">" b:"</span> + b);<span class="comment">/*a:10 b:20*/</span></span><br><span class="line">      <span class="comment">/*方法二：通过乘除法进行交换*/</span></span><br><span class="line">	 a = a * b;</span><br><span class="line">   b = a / b;</span><br><span class="line">   a = a / b;</span><br><span class="line">	 System.out.println(<span class="string">"a:"</span> + a + <span class="string">" b:"</span> + b);  <span class="comment">/*a:20 b:10*/</span></span><br><span class="line">      <span class="comment">/*方法三：通过位运算进行交换*/</span></span><br><span class="line">      <span class="comment">/*20：1 0100*/</span></span><br><span class="line">      <span class="comment">/*10：  1010*/</span></span><br><span class="line">  	a = a&gt;&gt;<span class="number">1</span>;                  <span class="comment">/*右移1位*/</span></span><br><span class="line">  	b = b&lt;&lt;<span class="number">1</span>;                  <span class="comment">/*左移1位*/</span></span><br><span class="line">  	System.out.println(<span class="string">"a:"</span> + a + <span class="string">" b:"</span> + b);<span class="comment">/*a:10 b:20*/</span></span><br><span class="line">      <span class="comment">/*方法四：通过异或运算进行交换*/</span></span><br><span class="line">      <span class="comment">/*原理：一个数异或本身等于0，而且异或运算符合交换律*/</span></span><br><span class="line">  	a = a ^ b;</span><br><span class="line">  	b = a ^ b;</span><br><span class="line">  	a = a ^ b;</span><br><span class="line">  	System.out.println(a);</span><br><span class="line">  	System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h2 id="例题二："><a href="#例题二：" class="headerlink" title="例题二："></a>例题二：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exchange</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	    </span>&#123;</span><br><span class="line">			<span class="keyword">double</span> num = <span class="number">1.0</span>/<span class="number">0</span>;          <span class="comment">/*计算的时候将0转换成0.0*/</span></span><br><span class="line">			System.out.println(num);     <span class="comment">/*输出infinity*/</span></span><br><span class="line">			&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	特别注意：  这里计算num的 时候将除数的0 转换成0.0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="例题三："><a href="#例题三：" class="headerlink" title="例题三："></a>例题三：</h2><p>关于下面这个代码快</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			<span class="keyword">int</span> millSeconds = <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> * <span class="number">1000</span>;</span><br><span class="line">			<span class="keyword">int</span> seconds = <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">			System.out.println(millSeconds);</span><br><span class="line">			System.out.println(seconds);</span><br><span class="line">			System.out.println(millSeconds/seconds);</span><br><span class="line">			System.out.println(millSeconds + Integer.MIN_VALUE - Integer.MAX_VALUE - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote>
<p>//-1944854528<br>//1471228928<br>//-1<br>//-1944854528</p>
</blockquote>
<p>###原因分析：</p>
<blockquote>
<p>首先millSeconds变量产生了溢出，对于溢出的变量，如果达到了最大值，那么将继续从最小值开始，补足剩余的差值，因此最后输出的数字是-1944854528</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 基础 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[数据类型注意事项]]></title>
      <url>/2016/12/22/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<h2 id="例题1："><a href="#例题1：" class="headerlink" title="例题1："></a>例题1：</h2><blockquote>
<p>给出如下一段代码，判断会输出什么</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Second</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">byte</span> a = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">byte</span> b = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">byte</span> c = a + b;                     <span class="comment">/*1*/</span></span><br><span class="line">		<span class="keyword">byte</span> d = (<span class="keyword">byte</span>)a + (<span class="keyword">byte</span>)b;         <span class="comment">/*2*/</span></span><br><span class="line">		System.out.println(c);</span><br><span class="line">		System.out.println(d);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><blockquote>
<p>其实，这里什么都不会输出，并且会报错</p>
</blockquote>
<h3 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h3><blockquote>
<p>这里有一条规律，JAVA中 int以及int以下的类型进行运算，结果是int类型，这个程序中，注释标为1和2的地方都是byte类型经过加法运算，所以最终结果是int类型，而且int转byte是不可以自动转换的，需要进行强制转换</p>
</blockquote>
<h3 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a>总结一下：</h3><ol>
<li>int及int以下的类型，经过运算结果仍为intl类型</li>
<li>JAVA是一种强类型语言，大类型转小类型强转，小转大自动转</li>
</ol>
<a id="more"></a>
<hr>
<h2 id="例题2："><a href="#例题2：" class="headerlink" title="例题2："></a>例题2：</h2><blockquote>
<p>给出如下一段代码，判断会输出什么</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">short</span> s2 = <span class="number">20</span>;</span><br><span class="line">		<span class="keyword">char</span> ch = s + s2;</span><br><span class="line">		System.out.println(ch);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果：-1"><a href="#结果：-1" class="headerlink" title="结果："></a>结果：</h3><blockquote>
<p>这里会报错</p>
</blockquote>
<h3 id="原因分析：-1"><a href="#原因分析：-1" class="headerlink" title="原因分析："></a>原因分析：</h3><blockquote>
<p>首先要明确，int 与 char[^footnote]：是无法转换的，而且char类型取值范围与int无大小之分，因此这里会报错</p>
</blockquote>
<h3 id="总结一下：-1"><a href="#总结一下：-1" class="headerlink" title="总结一下："></a>总结一下：</h3><ul>
<li>没有大小之分的数据类型，通过转换，精度出现损失的时候，需要进行强转</li>
<li>char的取值范围从0开始，而其他6个基本数值型则从负数开始</li>
</ul>
<hr>
<h2 id="例题3："><a href="#例题3：" class="headerlink" title="例题3："></a>例题3：</h2><blockquote>
<p>给出如下一段代码，判断会输出什么</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Second</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">byte</span> b  = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">short</span> s = b;</span><br><span class="line">		System.out.println(s);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">byte</span> b2 = s;</span><br><span class="line">		System.out.println(b2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果：-2"><a href="#结果：-2" class="headerlink" title="结果："></a>结果：</h3><blockquote>
<p>依然会报错</p>
</blockquote>
<h3 id="原因分析：-2"><a href="#原因分析：-2" class="headerlink" title="原因分析："></a>原因分析：</h3><blockquote>
<p>short类型转换为byte需要进行强制转换，因为会有精度损失</p>
</blockquote>
<hr>
<h2 id="例题4："><a href="#例题4：" class="headerlink" title="例题4："></a>例题4：</h2><blockquote>
<p>给出如下一段代码，判断会输出什么</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Second</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">byte</span> b = -<span class="number">10</span>;</span><br><span class="line">		<span class="keyword">char</span> ch = b;</span><br><span class="line">		System.out.println(ch);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果：-3"><a href="#结果：-3" class="headerlink" title="结果："></a>结果：</h3><blockquote>
<p>报错</p>
</blockquote>
<h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><blockquote>
<p>byte与char无大小之分，需要进行强转</p>
</blockquote>
<hr>
<h2 id="例题5"><a href="#例题5" class="headerlink" title="例题5"></a>例题5</h2><blockquote>
<p>给出如下一段代码，判断会输出什么</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Second</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">char</span> ch = (<span class="keyword">char</span>)s;</span><br><span class="line">		System.out.println(ch + <span class="number">1</span> - <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果：-4"><a href="#结果：-4" class="headerlink" title="结果："></a>结果：</h3><blockquote>
<p>程序可以正常运行，因为自己在写的时候特意加上了<strong>（char）</strong></p>
</blockquote>
<h3 id="原因分析：-3"><a href="#原因分析：-3" class="headerlink" title="原因分析："></a>原因分析：</h3><blockquote>
<p>因为short 类型是有符号的，而char类型是无符号的，因此尽管char类型与short类型字节数相同，但是在这里还是不能进行强转的</p>
</blockquote>
<p>问题来了：<strong>为什么输出的时候ch + 1 - 1就会输出一个数字呢</strong>（直接用ch输出看不到效果，因为输出的是字符）</p>
<hr>
<h2 id="例题6"><a href="#例题6" class="headerlink" title="例题6"></a>例题6</h2><blockquote>
<p>给出如下一段代码，判断会输出什么</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Second</span></span></span><br><span class="line">	public static void main(String[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">long</span> l = <span class="number">100</span>;</span><br><span class="line">		<span class="keyword">float</span> f = l;</span><br><span class="line">		System.out.println(f);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果：-5"><a href="#结果：-5" class="headerlink" title="结果："></a>结果：</h3><blockquote>
<p>正常输出 100.0</p>
</blockquote>
<h3 id="原因分析：-4"><a href="#原因分析：-4" class="headerlink" title="原因分析："></a>原因分析：</h3><blockquote>
<p>JAVA数据类型中，虽然long比float的字节数多，但是他们表示的方法不同，long采用的是二进制，而float采用的是科学计数法，因此float虽然字节数少，但是范围较long还要大些</p>
</blockquote>
<hr>
<h2 id="例题7"><a href="#例题7" class="headerlink" title="例题7"></a>例题7</h2><blockquote>
<p>给出如下一段代码，判断会输出什么</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Second</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">float</span> f = <span class="number">10.0f</span>/<span class="number">0</span>;</span><br><span class="line">		System.out.println(f);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果：-6"><a href="#结果：-6" class="headerlink" title="结果："></a>结果：</h3><blockquote>
<p>infinity</p>
</blockquote>
<h3 id="原因：-1"><a href="#原因：-1" class="headerlink" title="原因："></a>原因：</h3><blockquote>
<p>这里进行计算的时候，将0转换成0.0，因此结果是Infinity</p>
</blockquote>
<hr>
<h2 id="例题8"><a href="#例题8" class="headerlink" title="例题8"></a>例题8</h2><blockquote>
<p>给出如下一段代码，判断会输出什么</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Second</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">long</span> a  = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">		<span class="keyword">int</span> c = a + b;</span><br><span class="line">		System.out.println(c);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果：-7"><a href="#结果：-7" class="headerlink" title="结果："></a>结果：</h3><blockquote>
<p>报错</p>
</blockquote>
<h3 id="原因分析：-5"><a href="#原因分析：-5" class="headerlink" title="原因分析："></a>原因分析：</h3><blockquote>
<p>int 与 int以上的类型进行运算，结果仍为大类型</p>
</blockquote>
<hr>
<p>总结：关于数据类型的注意事项，上面一些题目，都需要注意</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Java]-4]]></title>
      <url>/2016/12/17/Java-4/</url>
      <content type="html"><![CDATA[<h2 id="面向过程-与-面向对象"><a href="#面向过程-与-面向对象" class="headerlink" title="面向过程 与 面向对象"></a>面向过程 与 面向对象</h2><ol>
<li>面向过程：通过事件发生的过程来进行分析</li>
<li>面向对象：通过事件的参与者来进行分析</li>
</ol>
<blockquote>
<p>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p>
<p>面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。</p>
</blockquote>
<hr>
<h2 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h2><h3 id="如何描述一个JAVA中的类："><a href="#如何描述一个JAVA中的类：" class="headerlink" title="如何描述一个JAVA中的类："></a>如何描述一个JAVA中的类：</h3><ol>
<li>属性</li>
<li>方法</li>
</ol>
<blockquote>
<p>cmd下的JAVA命令，只可以运行有主方法的类<br>Javac 进行编译含有主方法类的时候，会自动将里面所涉及到的类自动编译，不需要手动对其他类进行编译</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">			Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">			<span class="comment">/*这里的animal只是一个名字，不是指新建出来的对象*/</span></span><br><span class="line">			<span class="comment">/*Head First Java中将其形象的说成了遥控器*/</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="类中特殊的方法-构造方法"><a href="#类中特殊的方法-构造方法" class="headerlink" title="类中特殊的方法-构造方法"></a>类中特殊的方法-构造方法</h3><blockquote>
<p>作为JAVA中的最特殊方法—构造方法，并非浪得虚名，通过构造方法，我们可以给属性进行赋值，同时产生一个对象，<strong>当一个子类继承了一个父类的时候，子类的构造方法的第一句一定是通过super调用父类的构造方法。</strong></p>
</blockquote>
<h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><ol>
<li>与类同名</li>
<li>无返回类型（与void不同，void是返回为空）</li>
<li>不能通过对象调用，只在new的时候调用</li>
<li><strong>如果用户没有定义，系统提供一个默认的无参构造方法</strong></li>
<li>构造方法不可以被继承</li>
<li>不可以被重写，只可以被重载</li>
</ol>
<blockquote>
<p>这里我们可以先对类进行编译，编译之后通过dos下的javap 类名 即可进行反编译</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line">		Animal1 animal = <span class="keyword">new</span> Animal1(<span class="number">10</span>);</span><br><span class="line">		<span class="comment">/*animal.age = 10;*/</span></span><br><span class="line">		System.out.println(animal.age);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Animal1</span><span class="params">(<span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：输出0<br>原因分析：所有方法中，局部变量优先于全局变量，在这里就是 把局部变量的 age = 10;</p>
<h3 id="父类引用指向子类对象"><a href="#父类引用指向子类对象" class="headerlink" title="父类引用指向子类对象"></a>父类引用指向子类对象</h3><p><a href="http://blog.csdn.net/kaiwii/article/details/8042488%20%E7%A7%BB%E6%AD%A5" target="_blank" rel="noopener">移步</a></p>
<hr>
<h2 id="OOP四大特性"><a href="#OOP四大特性" class="headerlink" title="OOP四大特性"></a>OOP四大特性</h2><ol>
<li>抽象：描述一个类，只是通过我们在业务中所用到的一些方法和属性进行描述</li>
<li>继承：JAVA中的继承包括两种，类与类之间的继承是单继承（子类继承父类的属性和方法（<strong>这句话局部正确，毕竟构造方法肯定不可以</strong>）），类与接口的继承是多继承</li>
<li>封装</li>
<li>多态：通过重载与覆盖表现出来</li>
</ol>
<blockquote>
<p>关于继承的时候：一般都是一对多，此时我们需要由多的一方进行维护，这和我们在数据库中所涉及到的是一样的</p>
</blockquote>
<hr>
<h2 id="this-与-super"><a href="#this-与-super" class="headerlink" title="this 与 super"></a>this 与 super</h2><p>this：一般常用于方法中，哪个对象调用就指的是这个对象，特指当前对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(<span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;<span class="comment">/*在这里就是该对象的age属性被赋值成age(所谓的局部变量)*/</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>super：只是一个关键字，并不是父类对象，但是我们可以通过super来调用父类的属性和方法</p>
<hr>
<p>注意：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line">		Animal1 animal = <span class="keyword">new</span> Animal1(<span class="number">10</span>);</span><br><span class="line">		<span class="comment">/*animal.age = 10;*/</span></span><br><span class="line">		System.out.println(animal.age);</span><br><span class="line">		System.out.println(animal);<span class="comment">/*这里输出   类名@哈希码  通过哈希码我们可以判断是不是同一个对象，相同则是同一个对象*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OOP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Java]-怪题-3]]></title>
      <url>/2016/12/14/Java-%E6%80%AA%E9%A2%98-3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这里介绍一个之前曾经遇到过的一个问题</p>
</blockquote>
<p>例题：采用递归的方法求100以内的数字和</p>
<p>方法一：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> s = <span class="number">100</span>;</span><br><span class="line">		System.out.println(getSum(<span class="number">100</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*这里自己另外写了一个方法*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(n &lt; <span class="number">1</span>)</span><br><span class="line">			<span class="keyword">return</span> n;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> n + getSum(n-<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>方法二：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> s = <span class="number">100</span>;</span><br><span class="line">		System.out.println(sum(<span class="number">100</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*这种方法代码量少，而且富有技巧，但是不是自己写的，还是需要加强	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(number &gt;= <span class="number">1</span>)</span><br><span class="line">			s = number-- + sum(number);</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Java]-3]]></title>
      <url>/2016/12/14/Java-3/</url>
      <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote>
<p>数组作为最常使用的引用数据类型，在项目中使用较为广泛，这里进行一些相关介绍</p>
</blockquote>
<h3 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h3><ol>
<li>首先声明数组</li>
<li>创建数组</li>
<li>数组赋初值（不赋初值，系统会默认赋值，byte short int long 系统赋初值0 ，float double系统赋初值0.0 boolean系统赋初值false）</li>
</ol>
<blockquote>
<p>需要注意的是：数组在定义长度和赋初值同时操作会报错，同时数组长度一旦确定将不能发生改变</p>
</blockquote>
<h2 id="类中的方法"><a href="#类中的方法" class="headerlink" title="类中的方法"></a>类中的方法</h2><h3 id="形参与实参的区别"><a href="#形参与实参的区别" class="headerlink" title="形参与实参的区别"></a>形参与实参的区别</h3><ol>
<li>形参只是一个形式参数，最主要的是方法中的参数的数据类型，而不是形参本身</li>
<li>实参是一个实际参数，指定了使用方法时所需传递的数据</li>
</ol>
<a id="more"></a>
<h3 id="方法的调用本质条件"><a href="#方法的调用本质条件" class="headerlink" title="方法的调用本质条件"></a>方法的调用本质条件</h3><ol>
<li>方法名字</li>
<li>参数(参数要分顺序)</li>
</ol>
<h3 id="方法的返回值类型与void的使用"><a href="#方法的返回值类型与void的使用" class="headerlink" title="方法的返回值类型与void的使用"></a>方法的返回值类型与void的使用</h3><ol>
<li>方法返回值类型不是void时，则必须加上return 和相对应的返回类型。</li>
<li>方法返回值是void类型的时候，加上return语句也可以，(<strong>例如下面的代码</strong>)</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;	</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;			</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>break : 强制退出当次循环<br>continue : 进入下一次循环<br>return : 跳出当前方法</p>
</blockquote>
<h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><ol>
<li>发生在同一个类中</li>
<li>方法名字相同</li>
<li>参数不同（参数的类型，参数的顺序，参数的个数）</li>
</ol>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>根据方法名与参数只能找到一个与其对应的方法，则编译正确</p>
<blockquote>
<p>例如：（代码将会报错）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">add</span><span class="params">(String a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(String a, <span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> b;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>著名的三元运算符 ？ ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">	</span><br><span class="line">System.out.println(<span class="number">5</span> &gt; <span class="number">3</span> ? <span class="number">5</span> : <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<strong>?号前面的运算结果必须为boolean类型</strong>，不可以为其他类型</p>
</blockquote>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><blockquote>
<p>逻辑运算符中，包含有 &amp;&amp; || &amp; | ^ !</p>
</blockquote>
<h4 id="详解-amp-与-amp-amp"><a href="#详解-amp-与-amp-amp" class="headerlink" title="####详解 &amp; 与 &amp;&amp;"></a>####详解 &amp; 与 &amp;&amp;</h4><blockquote>
<p>&amp;&amp;只可以做逻辑运算，&amp;则既可以做逻辑运算，也可以做位运算</p>
<ol>
<li>&amp;&amp; 与 &amp; 做逻辑运算规则相同</li>
<li>&amp; 做位运算，规则是 将两个数字转换为二进制，对比每个二进制位，有0的便为0，全为1便为1 | 与 || 也同理</li>
<li>&amp;&amp;在做逻辑运算的时候会部分短路，（在假与真或的时候）</li>
</ol>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 基础 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[[Java]-2]]></title>
      <url>/2016/12/10/Java-2/</url>
      <content type="html"><![CDATA[<h2 id="Java中的基本数据类型"><a href="#Java中的基本数据类型" class="headerlink" title="Java中的基本数据类型"></a>Java中的基本数据类型</h2><h3 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h3><table><tr align="center"><td>byte</td><td>1字节</td></tr><tr align="center"><td>short  char</td><td>2字节</td></tr><tr align="center"><td>int</td><td>4字节</td></tr><tr align="center"><td>long</td><td>8字节</td></tr><tr align="center"><td>float</td><td>4字节</td></tr><tr align="center"><td>double</td><td>8字节</td></tr></table>

<h3 id="非数值型"><a href="#非数值型" class="headerlink" title="非数值型"></a>非数值型</h3><p>boolean</p>
<a id="more"></a>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><blockquote>
<ol>
<li>这8种数据类型都是Java的基本数据类型，值得注意的是Java中的int与float字节数相同，但是表示方法不同，从而范围不同， float采用科学计数法</li>
<li>char类型是数值型中唯一一个无符号位的数据类型，而其他数据类型中，使用二进制对其进行表示的时候，最开始的一位便是符号位，1为负数 0 为正数</li>
<li>虽然0000 0000 与 1000 0000 都可以代表0，但是计算机中采用补码来表示0</li>
<li>short与char 的字节数相同，但是因为char无符号位，因此char: 0-65535 short:-32768-32767</li>
</ol>
</blockquote>
<hr>
<h2 id="Java的基本类型数据转换注意事项"><a href="#Java的基本类型数据转换注意事项" class="headerlink" title="Java的基本类型数据转换注意事项"></a>Java的基本类型数据转换注意事项</h2><blockquote>
<p>Java中对于数据类型的转换，有着默认的规则，这里将记录一些常用的套路，对于更深层次的研究，请<a href="http://www.sivan0222.cn/2016/12/22/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/" target="_blank" rel="noopener">移步</a></p>
</blockquote>
<ol>
<li>小类型转换成大类型自动转换，大类型转换成小类型需要进行强转（可能会产生溢出）</li>
<li>当数据类型所表示的范围无大小之分时，产生精度损失就需要进行强转（例如char和int类型进行转换）</li>
<li>int以及int类型以下的数据类型运算结果为int</li>
<li>char类型是数值型中唯一一个没有符号位的数据类型，同时char类型在定义的时候还可以用单个字符来进行定义</li>
<li>大类型 + 小类型 = 大类型</li>
<li>float以及double 都采用科学计数法来表示一个数字，虽然float和int所占用字节数相同，long和double所占字节数相同，但是两者表示方法不同，从而所表示的数值范围不同。<strong>Java中的小数类型默认是double类型</strong></li>
<li><strong>char类型数据可以转换为任意一个数据类型，但是将整数转换为一个char类型的时候，只用到该整数的低16位，其余被忽略。</strong></li>
<li><strong>将一个浮点型数转换为一个char类型的数字的时候，首先将浮点型数值转换成int类型，然后转换为char类型。如果转换结果适用于目标变量，则隐式转换，否则显式转换</strong></li>
<li><strong>所有数值操作符都可以用在char类型操作数上，如果另一个操作数是一个数字或字符，那么char类型操作数就会被自动转换成一个数字，如果另一个操作数是一个字符串，字符就会与该字符串相连。</strong></li>
</ol>
<hr>
<h2 id="Java一些语句的注意事项"><a href="#Java一些语句的注意事项" class="headerlink" title="Java一些语句的注意事项"></a>Java一些语句的注意事项</h2><blockquote>
<p>当采用记事本编程Java的时候，需要使用ctrl + c 退出dos下的死循环，然后dos下键入cls清屏</p>
<ol>
<li><strong>switch语句中，条件只能是int以及int一下的数据类型，从JDK1.7开始支持字符串</strong></li>
<li>switch语句执行，每个case语句一旦触发，没有break时，后面的语句都会得到执行</li>
<li>Java中 + 号作为被重载的运算符具有两个功能： 第一，如果+号两边都是数字，则计算结果为数字。第二，如果+号两边，出现字符串，则会对字符串进行拼接。</li>
</ol>
</blockquote>
<hr>
<h2 id="float内存详解"><a href="#float内存详解" class="headerlink" title="float内存详解"></a>float内存详解</h2><blockquote>
<p>这里将会介绍一些float的内存详解，用来区分int与float，从而更深层次的理解int 与 float为什么会字节数相同，表示的数据类型范围不同，不仅仅是体现在了方法上面</p>
</blockquote>
<h3 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h3><ol>
<li>定点数表达法的缺点在于其形式过于僵硬，固定的小数点位置决定了固定位数的整数部分和小数部分，不利于同时表达特别大的数或者特别小的数。</li>
<li>计算机系统采纳了所谓的浮点数表达方式。这种表达方式利用科学计数法来表达实数，即用一个尾数（Mantissa也叫有效数字 ），一个基数（Base），一个指数（Exponent）以及一个表示正负的符号来表达实数。浮点数利用指数达到了浮动小数点的效果，从而可以灵活地表达更大范围的实数。</li>
<li>当一个浮点数的尾数为0，不论其阶码为何值，该浮点数的值都为0。当阶码的值为它能表示的最小一个值或更小的值时,不管其尾数为何值，计算机都把该浮点数看成零值,通常称其为机器零，此时该浮点数的所有各位（包括阶码位和尾数位）都清为0值。</li>
</ol>
<blockquote>
<p>Java 平台上的浮点数类型 float 和 double 采纳了 IEEE 754 标准中所定义的单精度 32 位浮点数和双精度 64 位浮点数的格式。<br>在 IEEE 标准中，浮点数是将特定长度的连续字节的所有二进制位分割为特定宽度的符号域，指数域和尾数域三个域，其中保存的值分别用于表示给定二进制浮点数中的符号，指数和尾数。这样，通过尾数和可以调节的指数就可以表达给定的数值了。</p>
</blockquote>
<h4 id="表示原理讲解"><a href="#表示原理讲解" class="headerlink" title="表示原理讲解"></a>表示原理讲解</h4><ol>
<li>第一个域为符号域。其中 0 表示数值为正数，而 1 则表示负数。</li>
<li>第二个域为指数域，对应于我们之前介绍的二进制科学计数法中的指数部分。其中单精度数为 8 位，双精度数为 11 位。以单精度数为例，8 位的指数为可以表达 0 到 255 之间的 255 个指数值（注：指数8位的最高位都是数值位，没有符号位）。但是，指数可以为正数，也可以为负数。为了处理负指数的情况，实际的指数值按要求需要加上一个偏差（Bias）值作为保存在指数域中的值，单精度数的偏差值为 127（2^7-1），而双精度数的偏差值为1023（2^10-1）。比如，单精度的实际指数值 0 在指数域中将保存为 127；而保存在指数域中的 64 则表示实际的指数值 -63（64-127=-63）。 偏差的引入使得对于单精度数，实际可以表达的指数值的范围就变成 -127（表示小数点需向左移动127位） 到128（表示小数点需向右移动128位） 之间（包含两端）。我们不久还将看到，实际的指数值 -127（全 0）以及 +128（全 1）保留用作特殊值的处理。这样，实际可以表达的有效指数范围就在 -127 和 127 之间。</li>
<li>第三个域为尾数域，其中单精度数为 23 位长，双精度数为 52 位长。除了我们将要讲到的某些特殊值外，IEEE 标准要求浮点数必须是规范的。这意味着尾数的小数点左侧必须为1，因此我们在保存尾数的时候，可以省略小数点前面这个 1，从而腾出一个二进制位来保存更多的尾数。这样我们实际上用 23 位长的尾数域表达了 24 位的尾数。比如对于单精度数而言，二进制的 1001.101（对应于十进制的 9.625）可以表达为 1.001101 × 2^3，所以实际保存在尾数域中的值为 00110100000000000000000，即去掉小数点左侧的 1，并用 0 在右侧补齐。</li>
</ol>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>值得注意的是，对于单精度数，由于我们只有 24 位的尾数（其中一位隐藏），所以可以表达的最大尾数为 2^24- 1 = 16,777,215。特别的，16,777,216 是偶数，所以我们可以通过将它除以 2 并相应地调整指数来保存这个数，这样 16,777,216 同样可以被精确的保存。相反，数值 16,777,217 则无法被精确的保存。由此，我们可以看到单精度的浮点数可以表达的十进制数值中，真正有效的数字不高于 8 位。事实上，对相对误差的数值分析结果显示有效的精度大约为 7.22 位（由于位数不可取小数，所以单精度的精度为7，即可精确到小数点后7位）。参考下面的示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">16777215f</span>);<span class="comment">/*1.6777215E7  */</span></span><br><span class="line">System.out.println(<span class="number">16777216f</span>);<span class="comment">/*1.6777216E7  */</span></span><br><span class="line">System.out.println(<span class="number">16777217f</span>);<span class="comment">/*1.6777216E7  */</span></span><br><span class="line">System.out.println(<span class="number">16777218f</span>);<span class="comment">/*1.6777218E7  */</span></span><br><span class="line">System.out.println(<span class="number">16777219f</span>);<span class="comment">/*1.677722E7  */</span></span><br><span class="line">System.out.println(<span class="number">16777220f</span>);<span class="comment">/*1.677722E7  */</span></span><br><span class="line">System.out.println(<span class="number">16777221f</span>);<span class="comment">/*1.677722E7  */</span></span><br><span class="line">System.out.println(<span class="number">16777222f</span>);<span class="comment">/*1.6777222E7  */</span></span><br><span class="line">System.out.println(<span class="number">16777223f</span>);<span class="comment">/*1.6777224E7  */</span></span><br><span class="line">System.out.println(<span class="number">16777224f</span>);<span class="comment">/*1.6777224E7  */</span></span><br><span class="line">System.out.println(<span class="number">16777225f</span>);<span class="comment">/*1.6777224E7  */</span></span><br><span class="line">System.out.println(<span class="number">16777215f</span>);<span class="comment">/*1.6777215E7*/</span></span><br><span class="line">System.out.println(<span class="number">16777216f</span>);<span class="comment">/*1.6777216E7*/</span></span><br><span class="line">System.out.println(<span class="number">16777217f</span>);<span class="comment">/*1.6777216E7*/</span></span><br><span class="line">System.out.println(<span class="number">16777218f</span>);<span class="comment">/*1.6777218E7*/</span></span><br><span class="line">System.out.println(<span class="number">16777219f</span>);<span class="comment">/*1.677722E7*/</span></span><br><span class="line">System.out.println(<span class="number">16777220f</span>);<span class="comment">/*1.677722E7*/</span></span><br><span class="line">System.out.println(<span class="number">16777221f</span>);<span class="comment">/*1.677722E7*/</span></span><br><span class="line">System.out.println(<span class="number">16777222f</span>);<span class="comment">/*1.6777222E7*/</span></span><br><span class="line">System.out.println(<span class="number">16777223f</span>);<span class="comment">/*1.6777224E7*/</span></span><br><span class="line">System.out.println(<span class="number">16777224f</span>);<span class="comment">/*1.6777224E7*/</span></span><br><span class="line">System.out.println(<span class="number">16777225f</span>);<span class="comment">/*1.6777224E7*/</span></span><br></pre></td></tr></table></figure>
<p>请看结果推导分析：</p>
<blockquote>
<p>111111111111111111111111 16777215f<br>1.11111111111111111111111 刚好是23位，不会丢失精度，能精确表示 0 23+127 11111111111111111111111 0 10010110 11111111111111111111111</p>
<p>1000000000000000000000000 16777216f<br>1.00000000000000000000000 0 去掉的是0，所以还是能准确表示 0 24+127 00000000000000000000000 0 10010111 00000000000000000000000</p>
<p>1000000000000000000000001 16777217f<br>1.00000000000000000000000 1 不能准确表示。先试着进位<br>1.00000000000000000000001 由于进位后，结果的最末们不是0，所以直接舍掉<br>1.00000000000000000000000 到这里结果就是16777216f</p>
<p>1000000000000000000000010 16777218f<br>1.0000000000000000000001 0 去掉的是0，所以还是能准确表示 0 24+127 00000000000000000000001 0 10010111 00000000000000000000001</p>
<p>1000000000000000000000011 16777219f<br>1.0000000000000000000001 1 不能准确表示。先试着进位<br>1.0000000000000000000010 进位后的结果，最末们为0，所以进位成功 0 24+127 00000000000000000000010 0 10010111 00000000000000000000010<br>1.000000000000000000000100*2^24 16777219f存储在内存中的结</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基本数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[Java]-1]]></title>
      <url>/2016/12/07/Java-1/</url>
      <content type="html"><![CDATA[<h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><ol>
<li>编译执行 ：例如我们所说的C/C++</li>
<li>解释执行</li>
</ol>
<hr>
<h2 id="Java应用开发方向"><a href="#Java应用开发方向" class="headerlink" title="Java应用开发方向:"></a>Java应用开发方向:</h2><ol>
<li>JAVA SE:桌面应用程序开发，是JAVA基础！</li>
<li>JAVA EE:web开发 jsp(Java Server Pages)也是网站开发，但是具有高大上，生命周期长，安全稳定的优点</li>
<li>JAVA ME: 移动端开发(手机)，物联网移动应用程序开发</li>
</ol>
<a id="more"></a>
<hr>
<h2 id="JAVA组成："><a href="#JAVA组成：" class="headerlink" title="JAVA组成："></a>JAVA组成：</h2><ol>
<li>JVM:（JAVA虚拟机），JAVA的核心组件，JAVA实现跨平台的前提条件</li>
<li>JRE:(JAVA运行时环境)，是java程序运行的充分必备条件.(JRE=JVM+LIB(基本类库))，JRE可从官网下载，面向客户，而不是开发者</li>
<li>JDK:(JAVA，面向程序员，JDK=JRE+LIB(类库,比JRE的LIB更加强大)+编译器<br>JAVA程序(.java)—–(.class)—-&gt;虚拟机(虚拟机面向的对象根据自己电脑系统来决定)——–&gt;OS(操作系统)</li>
</ol>
<blockquote>
<p>虚拟机：程序虚拟出来的机器，如果一个java程序在windows下执行，虚拟机是for windows ,在linux下执行，虚拟机是for linux，也就是说字节码可以跨平台，但是虚拟机不可以跨平台，而且虚拟机不识别源代码</p>
</blockquote>
<p>缺点:由于有JVM存在而使得JAVA程序运行效率低</p>
<p>优点：虚拟机的垃圾收集机制；开发效率高；安全性高</p>
<hr>
<h2 id="部署开发环境"><a href="#部署开发环境" class="headerlink" title="部署开发环境:"></a>部署开发环境:</h2><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><h4 id="配置环境变量-在操作系统中注册Java这个软件"><a href="#配置环境变量-在操作系统中注册Java这个软件" class="headerlink" title="配置环境变量(在操作系统中注册Java这个软件)"></a>配置环境变量(在操作系统中注册Java这个软件)</h4><p>１．新建环境变量(在下面的系统变量新建) JAVA_HOME: (值就是存放jdk的目录)(JAVA_HOME小写也可以，因为在windows系统中是不区分大小写的，大小写只是为了兼容linux系统)</p>
<p>２．找到Path: 按下HOME键使光标移到最左边，添加 %JAVA_HOME%\bin; (末尾的分号是用来隔开后面的文件)</p>
<blockquote>
<p>Ｐａｔｈ：配到ＪＤＫ下的ｂｉｎ目录<br>ＣＬＡＳＳＰＡＴＨ：ｌｉｂ目录　＋　当前目录（用点号表示）<br>Path目录讲解：可以存放一些我们在dos下可以执行的东西，例如我们把QQ启动程序放到Path中，便可以在dos窗口下输入QQ，就可以启动QQ，同理Path对JAVA也是这样处理的，因为我们需要执行JAVA以及JAVAC命令</p>
</blockquote>
<p>３．新建CLASSPATH(作用是为了找到lib目录，同时也是为了可以运行自己写的类而进行配置): 值是 %JAVA_HOME%\lib;. (末尾必须是分号点号)</p>
<blockquote>
<p>如果我们写ＪＡＶＡ程序出现乱码，只需要把中文改成英文就可以了</p>
</blockquote>
<hr>
<h2 id="JDK目录功能-里面包含include文件夹，说明JAVA是可以调用C语言的"><a href="#JDK目录功能-里面包含include文件夹，说明JAVA是可以调用C语言的" class="headerlink" title="JDK目录功能(里面包含include文件夹，说明JAVA是可以调用C语言的):"></a>JDK目录功能(里面包含include文件夹，说明JAVA是可以调用C语言的):</h2><ol>
<li>bin：存放二进制文件（可执行文件）</li>
<li>lib：类库文件、</li>
<li>jre：JAVA运行时环境</li>
<li>sample：一些简单例子</li>
<li>src.zip：源代码</li>
</ol>
<hr>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>验证JAVA环境搭配好的方法:在DOS窗口下，输入javac 正常输出配置信息，便成功！</p>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><blockquote>
<p>在验证JAVA开发环境的时候，也就是验证Java环境变量是否正确设置在系统上的时候，请注意：JRE的命令是嵌入在系统中的，例如，java.exe<br>会复制到system32文件夹中，因此该命令可以随处运行，从而不能够作为验证环境变量正确配置的标志</p>
</blockquote>
<h3 id="WinRAR对JAR文件的关联："><a href="#WinRAR对JAR文件的关联：" class="headerlink" title="WinRAR对JAR文件的关联："></a>WinRAR对JAR文件的关联：</h3><blockquote>
<p>WinRAR以及JRE安装之后都需要设置其对JAR文件的关联，不同的是通过关联使用JRE操作JAR文件之后会尝试运行这个文件，而WinRAR则会把它当作压缩包文件。所以要使计算机能够正确运行JAR文件，必须在WinRAR等压缩软件之后安装JRE环境。</p>
</blockquote>
<h3 id="编写代码并测试"><a href="#编写代码并测试" class="headerlink" title="编写代码并测试:"></a>编写代码并测试:</h3><ol>
<li>编写源程序代码</li>
<li>编译（例如 javac Test.java）（目的一是为了检查是否有错误，而是生成字节码(.class)文件(二进制文件)，可以在虚拟机上直接运行，而源代码是不可以的！）</li>
<li>运行( java Test)</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDK </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
